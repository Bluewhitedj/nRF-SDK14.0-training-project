; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_pwr_mgmt.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_pwr_mgmt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_pwr_mgmt.crf ..\..\..\..\..\..\components\libraries\pwr_mgmt\nrf_pwr_mgmt.c]
                          THUMB

                          AREA ||i.nrf_mtx_unlock||, CODE, READONLY, ALIGN=1

                  nrf_mtx_unlock PROC
;;;116    
;;;117    __STATIC_INLINE void nrf_mtx_unlock(nrf_mtx_t * p_mtx)
000000  2100              MOVS     r1,#0
;;;118    {
;;;119        ASSERT(p_mtx  != NULL);
;;;120        ASSERT(*p_mtx == NRF_MTX_LOCKED);
;;;121    
;;;122        *p_mtx = NRF_MTX_UNLOCKED;
000002  6001              STR      r1,[r0,#0]
;;;123        __DMB();
000004  bf00              NOP      
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f3bf8f5f          DMB      
00000e  bf00              NOP      
000010  bf00              NOP      
000012  bf00              NOP      
;;;124    }
000014  4770              BX       lr
;;;125    
                          ENDP


                          AREA ||i.nrf_pwr_mgmt_feed||, CODE, READONLY, ALIGN=1

                  nrf_pwr_mgmt_feed PROC
;;;361    
;;;362    void nrf_pwr_mgmt_feed(void)
000000  4770              BX       lr
;;;363    {
;;;364        NRF_LOG_DEBUG("Feed");
;;;365        // It does not stop started shutdown process.
;;;366        PWR_MGMT_STANDBY_TIMEOUT_CLEAR();
;;;367    }
;;;368    
                          ENDP


                          AREA ||i.nrf_pwr_mgmt_init||, CODE, READONLY, ALIGN=2

                  nrf_pwr_mgmt_init PROC
;;;316    
;;;317    ret_code_t nrf_pwr_mgmt_init(void)
000000  b510              PUSH     {r4,lr}
;;;318    {
;;;319        NRF_LOG_INFO("Init");
;;;320    
;;;321        m_shutdown_started = false;
000002  2000              MOVS     r0,#0
000004  4912              LDR      r1,|L3.80|
000006  7008              STRB     r0,[r1,#0]
;;;322        nrf_mtx_init(&m_sysoff_mtx);
000008  bf00              NOP      
00000a  4912              LDR      r1,|L3.84|
00000c  6008              STR      r0,[r1,#0]
00000e  bf00              NOP      
000010  bf00              NOP      
000012  bf00              NOP      
000014  bf00              NOP      
000016  f3bf8f5f          DMB      
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  bf00              NOP      
;;;323        nrf_section_iter_init(&m_handlers_iter, &pwr_mgmt_data);
000022  490d              LDR      r1,|L3.88|
000024  480d              LDR      r0,|L3.92|
000026  f7fffffe          BL       nrf_section_iter_init
;;;324    
;;;325        PWR_MGMT_SLEEP_INIT();
;;;326        PWR_MGMT_DEBUG_PINS_INIT();
;;;327        PWR_MGMT_STANDBY_TIMEOUT_INIT();
;;;328        PWR_MGMT_CPU_USAGE_MONITOR_INIT();
;;;329    
;;;330        return PWR_MGMT_TIMER_CREATE();
00002a  bf00              NOP      
00002c  4a0c              LDR      r2,|L3.96|
00002e  2101              MOVS     r1,#1
000030  480c              LDR      r0,|L3.100|
000032  f7fffffe          BL       app_timer_create
000036  4604              MOV      r4,r0
000038  b10c              CBZ      r4,|L3.62|
00003a  4620              MOV      r0,r4
00003c  e006              B        |L3.76|
                  |L3.62|
00003e  2200              MOVS     r2,#0
000040  f44f4100          MOV      r1,#0x8000
000044  4807              LDR      r0,|L3.100|
000046  6800              LDR      r0,[r0,#0]  ; m_pwr_mgmt_timer
000048  f7fffffe          BL       app_timer_start
                  |L3.76|
;;;331    }
00004c  bd10              POP      {r4,pc}
;;;332    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      m_shutdown_started
                  |L3.84|
                          DCD      m_sysoff_mtx
                  |L3.88|
                          DCD      pwr_mgmt_data
                  |L3.92|
                          DCD      m_handlers_iter
                  |L3.96|
                          DCD      nrf_pwr_mgmt_timeout_handler
                  |L3.100|
                          DCD      m_pwr_mgmt_timer

                          AREA ||i.nrf_pwr_mgmt_run||, CODE, READONLY, ALIGN=2

                  nrf_pwr_mgmt_run PROC
;;;332    
;;;333    void nrf_pwr_mgmt_run(void)
000000  b538              PUSH     {r3-r5,lr}
;;;334    {
;;;335        PWR_MGMT_FPU_SLEEP_PREPARE();
000002  bf00              NOP      
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       app_util_critical_region_enter
00000e  bf00              NOP      
000010  eef10a10          VMRS     r0,FPSCR
000014  4604              MOV      r4,r0
000016  f024009f          BIC      r0,r4,#0x9f
00001a  eee10a10          VMSR     FPSCR,r0
00001e  bf00              NOP      
000020  bf00              NOP      
000022  bf00              NOP      
000024  bf00              NOP      
000026  bf00              NOP      
000028  f3bf8f5f          DMB      
00002c  bf00              NOP      
00002e  bf00              NOP      
000030  bf00              NOP      
000032  2026              MOVS     r0,#0x26
000034  f000021f          AND      r2,r0,#0x1f
000038  2101              MOVS     r1,#1
00003a  4091              LSLS     r1,r1,r2
00003c  4a09              LDR      r2,|L4.100|
00003e  0943              LSRS     r3,r0,#5
000040  f8421023          STR      r1,[r2,r3,LSL #2]
000044  bf00              NOP      
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  f7fffffe          BL       app_util_critical_region_exit
00004e  bf00              NOP      
;;;336        PWR_MGMT_SLEEP_LOCK_ACQUIRE();
;;;337        PWR_MGMT_CPU_USAGE_MONITOR_SECTION_ENTER();
;;;338        PWR_MGMT_DEBUG_PIN_SET();
;;;339    
;;;340        // Wait for an event.
;;;341    #ifdef SOFTDEVICE_PRESENT
;;;342        if (nrf_sdh_is_enabled())
000050  f7fffffe          BL       nrf_sdh_is_enabled
000054  b110              CBZ      r0,|L4.92|
;;;343        {
;;;344            ret_code_t ret_code = sd_app_evt_wait();
000056  df3e              SVC      #0x3e
000058  4604              MOV      r4,r0
;;;345            ASSERT((ret_code == NRF_SUCCESS) || (ret_code == NRF_ERROR_SOFTDEVICE_NOT_ENABLED));
;;;346        }
00005a  e002              B        |L4.98|
                  |L4.92|
;;;347        else
;;;348    #endif // SOFTDEVICE_PRESENT
;;;349        {
;;;350            // Wait for an event.
;;;351            __WFE();
00005c  bf20              WFE      
;;;352            // Clear the internal event register.
;;;353            __SEV();
00005e  bf40              SEV      
;;;354            __WFE();
000060  bf20              WFE      
                  |L4.98|
;;;355        }
;;;356    
;;;357        PWR_MGMT_DEBUG_PIN_CLEAR();
;;;358        PWR_MGMT_CPU_USAGE_MONITOR_SECTION_EXIT();
;;;359        PWR_MGMT_SLEEP_LOCK_RELEASE();
;;;360    }
000062  bd38              POP      {r3-r5,pc}
;;;361    
                          ENDP

                  |L4.100|
                          DCD      0xe000e280

                          AREA ||i.nrf_pwr_mgmt_shutdown||, CODE, READONLY, ALIGN=2

                  nrf_pwr_mgmt_shutdown PROC
;;;427    
;;;428    void nrf_pwr_mgmt_shutdown(nrf_pwr_mgmt_shutdown_t shutdown_type)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;429    {
000004  4605              MOV      r5,r0
;;;430        // Check if shutdown procedure is not started.
;;;431        if (!nrf_mtx_trylock(&m_sysoff_mtx))
000006  4c13              LDR      r4,|L5.84|
000008  2601              MOVS     r6,#1
00000a  466a              MOV      r2,sp
00000c  4631              MOV      r1,r6
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov
000014  4680              MOV      r8,r0
000016  bf00              NOP      
000018  4647              MOV      r7,r8
00001a  b90f              CBNZ     r7,|L5.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L5.34|
                  |L5.32|
000020  2000              MOVS     r0,#0
                  |L5.34|
000022  b908              CBNZ     r0,|L5.40|
                  |L5.36|
;;;432        {
;;;433            return;
;;;434        }
;;;435    
;;;436        if (shutdown_type != NRF_PWR_MGMT_SHUTDOWN_CONTINUE)
;;;437        {
;;;438            if (m_shutdown_started)
;;;439            {
;;;440                nrf_mtx_unlock(&m_sysoff_mtx);
;;;441                return;
;;;442            }
;;;443            else
;;;444            {
;;;445                m_pwr_mgmt_evt      = (nrf_pwr_mgmt_evt_t)shutdown_type;
;;;446                m_shutdown_started  = true;
;;;447            }
;;;448        }
;;;449    
;;;450        ASSERT(m_shutdown_started);
;;;451        NRF_LOG_INFO("Shutdown request %d", shutdown_type);
;;;452    
;;;453    #if NRF_PWR_MGMT_CONFIG_USE_SCHEDULER
;;;454        ret_code_t ret_code = app_sched_event_put(NULL, 0, scheduler_shutdown_handler);
;;;455        APP_ERROR_CHECK(ret_code);
;;;456    #else
;;;457        shutdown_process();
;;;458    #endif // NRF_PWR_MGMT_CONFIG_USE_SCHEDULER
;;;459    
;;;460        nrf_mtx_unlock(&m_sysoff_mtx);
;;;461    }
000024  e8bd83f8          POP      {r3-r9,pc}
                  |L5.40|
000028  2d04              CMP      r5,#4                 ;436
00002a  d00b              BEQ      |L5.68|
00002c  480a              LDR      r0,|L5.88|
00002e  7800              LDRB     r0,[r0,#0]            ;438  ; m_shutdown_started
000030  b118              CBZ      r0,|L5.58|
000032  4808              LDR      r0,|L5.84|
000034  f7fffffe          BL       nrf_mtx_unlock
000038  e7f4              B        |L5.36|
                  |L5.58|
00003a  4808              LDR      r0,|L5.92|
00003c  7005              STRB     r5,[r0,#0]            ;445
00003e  2001              MOVS     r0,#1                 ;446
000040  4905              LDR      r1,|L5.88|
000042  7008              STRB     r0,[r1,#0]            ;446
                  |L5.68|
000044  f7fffffe          BL       shutdown_process
000048  4802              LDR      r0,|L5.84|
00004a  f7fffffe          BL       nrf_mtx_unlock
00004e  bf00              NOP      
000050  e7e8              B        |L5.36|
;;;462    
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
                          DCD      m_sysoff_mtx
                  |L5.88|
                          DCD      m_shutdown_started
                  |L5.92|
                          DCD      m_pwr_mgmt_evt

                          AREA ||i.nrf_pwr_mgmt_timeout_handler||, CODE, READONLY, ALIGN=2

                  nrf_pwr_mgmt_timeout_handler PROC
;;;293         */
;;;294        static void nrf_pwr_mgmt_timeout_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;295        {
000002  4604              MOV      r4,r0
;;;296            PWR_MGMT_CPU_USAGE_MONITOR_UPDATE();
;;;297            PWR_MGMT_AUTO_SHUTDOWN_RETRY();
000004  bf00              NOP      
000006  4804              LDR      r0,|L6.24|
000008  7800              LDRB     r0,[r0,#0]  ; m_shutdown_started
00000a  b110              CBZ      r0,|L6.18|
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       nrf_pwr_mgmt_shutdown
                  |L6.18|
000012  bf00              NOP      
;;;298            PWR_MGMT_STANDBY_TIMEOUT_CHECK();
;;;299        }
000014  bd10              POP      {r4,pc}
;;;300    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      m_shutdown_started

                          AREA ||i.shutdown_process||, CODE, READONLY, ALIGN=2

                  shutdown_process PROC
;;;370     */
;;;371    static void shutdown_process(void)
000000  b510              PUSH     {r4,lr}
;;;372    {
;;;373        NRF_LOG_INFO("Shutdown started. Type %d", m_pwr_mgmt_evt);
;;;374        // Executing all callbacks.
;;;375        for (/* m_handlers_iter is initialized in nrf_pwr_mgmt_init(). Thanks to that each handler is
000002  e00c              B        |L7.30|
                  |L7.4|
;;;376                called only once.*/;
;;;377             nrf_section_iter_get(&m_handlers_iter) != NULL;
;;;378             nrf_section_iter_next(&m_handlers_iter))
;;;379        {
;;;380            nrf_pwr_mgmt_shutdown_handler_t * p_handler =
000004  bf00              NOP      
000006  482c              LDR      r0,|L7.184|
000008  6880              LDR      r0,[r0,#8]
00000a  4604              MOV      r4,r0
;;;381                (nrf_pwr_mgmt_shutdown_handler_t *) nrf_section_iter_get(&m_handlers_iter);
;;;382            if ((*p_handler)(m_pwr_mgmt_evt))
00000c  482b              LDR      r0,|L7.188|
00000e  7800              LDRB     r0,[r0,#0]  ; m_pwr_mgmt_evt
000010  6821              LDR      r1,[r4,#0]
000012  4788              BLX      r1
000014  b900              CBNZ     r0,|L7.24|
;;;383            {
;;;384                NRF_LOG_INFO("SysOff handler 0x%08X => ready", (unsigned int)*p_handler);
;;;385            }
;;;386            else
;;;387            {
;;;388                // One of the modules is not ready.
;;;389                NRF_LOG_INFO("SysOff handler 0x%08X => blocking", (unsigned int)*p_handler);
;;;390                return;
;;;391            }
;;;392        }
;;;393    
;;;394        PWR_MGMT_CPU_USAGE_MONITOR_SUMMARY();
;;;395        NRF_LOG_INFO("Shutdown complete.");
;;;396        NRF_LOG_FINAL_FLUSH();
;;;397    
;;;398        if ((m_pwr_mgmt_evt == NRF_PWR_MGMT_EVT_PREPARE_RESET)
;;;399         || (m_pwr_mgmt_evt == NRF_PWR_MGMT_EVT_PREPARE_DFU))
;;;400        {
;;;401            NVIC_SystemReset();
;;;402        }
;;;403        else
;;;404        {
;;;405            // Enter System OFF.
;;;406    #ifdef SOFTDEVICE_PRESENT
;;;407            if (nrf_sdh_is_enabled())
;;;408            {
;;;409                ret_code_t ret_code = sd_power_system_off();
;;;410                ASSERT((ret_code == NRF_SUCCESS) || (ret_code == NRF_ERROR_SOFTDEVICE_NOT_ENABLED));
;;;411            }
;;;412    #endif // SOFTDEVICE_PRESENT
;;;413            nrf_power_system_off();
;;;414        }
;;;415    }
000016  bd10              POP      {r4,pc}
                  |L7.24|
000018  4827              LDR      r0,|L7.184|
00001a  f7fffffe          BL       nrf_section_iter_next
                  |L7.30|
00001e  bf00              NOP                            ;377
000020  4825              LDR      r0,|L7.184|
000022  6880              LDR      r0,[r0,#8]            ;377
000024  2800              CMP      r0,#0                 ;377
000026  d1ed              BNE      |L7.4|
000028  bf00              NOP                            ;396
00002a  f7fffffe          BL       nrf_log_panic
00002e  bf00              NOP                            ;396
000030  bf00              NOP                            ;396
                  |L7.50|
000032  f7fffffe          BL       nrf_log_frontend_dequeue
000036  2800              CMP      r0,#0                 ;396
000038  d1fb              BNE      |L7.50|
00003a  bf00              NOP                            ;396
00003c  bf00              NOP                            ;396
00003e  481f              LDR      r0,|L7.188|
000040  7800              LDRB     r0,[r0,#0]            ;398  ; m_pwr_mgmt_evt
000042  2803              CMP      r0,#3                 ;398
000044  d003              BEQ      |L7.78|
000046  481d              LDR      r0,|L7.188|
000048  7800              LDRB     r0,[r0,#0]            ;399  ; m_pwr_mgmt_evt
00004a  2802              CMP      r0,#2                 ;399
00004c  d11d              BNE      |L7.138|
                  |L7.78|
00004e  bf00              NOP                            ;401
000050  bf00              NOP                            ;401
000052  bf00              NOP                            ;401
000054  bf00              NOP                            ;401
000056  bf00              NOP                            ;401
000058  f3bf8f4f          DSB                            ;401
00005c  bf00              NOP                            ;401
00005e  bf00              NOP                            ;401
000060  bf00              NOP                            ;401
000062  4817              LDR      r0,|L7.192|
000064  6800              LDR      r0,[r0,#0]            ;401
000066  f40060e0          AND      r0,r0,#0x700          ;401
00006a  4916              LDR      r1,|L7.196|
00006c  4308              ORRS     r0,r0,r1              ;401
00006e  1d00              ADDS     r0,r0,#4              ;401
000070  4913              LDR      r1,|L7.192|
000072  6008              STR      r0,[r1,#0]            ;401
000074  bf00              NOP                            ;401
000076  bf00              NOP                            ;401
000078  bf00              NOP                            ;401
00007a  f3bf8f4f          DSB                            ;401
00007e  bf00              NOP                            ;401
000080  bf00              NOP                            ;401
000082  bf00              NOP                            ;401
000084  bf00              NOP                            ;401
                  |L7.134|
000086  bf00              NOP                            ;401
000088  e7fd              B        |L7.134|
                  |L7.138|
00008a  f7fffffe          BL       nrf_sdh_is_enabled
00008e  b110              CBZ      r0,|L7.150|
000090  df32              SVC      #0x32                 ;409
000092  4604              MOV      r4,r0                 ;409
000094  bf00              NOP                            ;411
                  |L7.150|
000096  bf00              NOP                            ;413
000098  2001              MOVS     r0,#1                 ;413
00009a  490b              LDR      r1,|L7.200|
00009c  6008              STR      r0,[r1,#0]            ;413
00009e  bf00              NOP                            ;413
0000a0  bf00              NOP                            ;413
0000a2  bf00              NOP                            ;413
0000a4  bf00              NOP                            ;413
0000a6  f3bf8f4f          DSB                            ;413
0000aa  bf00              NOP                            ;413
0000ac  bf00              NOP                            ;413
0000ae  bf00              NOP                            ;413
0000b0  e000              B        |L7.180|
                  |L7.178|
0000b2  bf20              WFE                            ;413
                  |L7.180|
0000b4  e7fd              B        |L7.178|
;;;416    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L7.184|
                          DCD      m_handlers_iter
                  |L7.188|
                          DCD      m_pwr_mgmt_evt
                  |L7.192|
                          DCD      0xe000ed0c
                  |L7.196|
                          DCD      0x05fa0000
                  |L7.200|
                          DCD      0x40000500

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_handlers_iter
                          %        12
                  m_pwr_mgmt_timer_data
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  pwr_mgmt_data_array
                          DCD      ||pwr_mgmt_data0$$Base||
                          DCD      ||pwr_mgmt_data0$$Limit||
                          DCD      ||pwr_mgmt_data1$$Base||
                          DCD      ||pwr_mgmt_data1$$Limit||
                          DCD      ||pwr_mgmt_data2$$Base||
                          DCD      ||pwr_mgmt_data2$$Limit||
                  pwr_mgmt_data
                          DCD      pwr_mgmt_data_array
                          DCD      pwr_mgmt_data_array+0x18
                          DCD      0x00000004
                  m_pwr_mgmt_timer
                          DCD      m_pwr_mgmt_timer_data

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  7077725f          DCB      0x70,0x77,0x72,0x5f
000004  6d676d74          DCB      0x6d,0x67,0x6d,0x74
000008  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  m_pwr_mgmt_evt
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  m_sysoff_mtx
                          DCD      0x00000000
                  m_shutdown_started
000008  00                DCB      0x00

                          AREA log_const_data, DATA, READONLY, ALIGN=2

                  m_nrf_log_pwr_mgmt_logs_data_const
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
000004  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA log_dynamic_data, DATA, ALIGN=2

                  m_nrf_log_pwr_mgmt_logs_data_dynamic
                  |symbol_number.77|
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\pwr_mgmt\\nrf_pwr_mgmt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_nrf_pwr_mgmt_c_f22138a6____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6____REVSH|
#line 402
|__asm___14_nrf_pwr_mgmt_c_f22138a6____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6____RRX|
#line 587
|__asm___14_nrf_pwr_mgmt_c_f22138a6____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov|
#line 65 "..\\..\\..\\..\\..\\..\\components\\libraries\\atomic\\nrf_atomic_internal.h"
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_mov| PROC
#line 68

#line 72
 
 push {r4, r5}
 mov r4, r0

loop_mov
 ldrex r0, [r4]
 mov r5, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_mov

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_orr|
#line 89
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_orr| PROC
#line 92

 push {r4, r5}
 mov r4, r0

loop_orr
 ldrex r0, [r4]
 orr r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_orr

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_and|
#line 108
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_and| PROC
#line 111

 push {r4, r5}
 mov r4, r0

loop_and
 ldrex r0, [r4]
 and r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_and

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_eor|
#line 127
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_eor| PROC
#line 130

 push {r4, r5}
 mov r4, r0

loop_eor
 ldrex r0, [r4]
 eor r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_eor

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_add|
#line 146
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_add| PROC
#line 149

 push {r4, r5}
 mov r4, r0

loop_add
 ldrex r0, [r4]
 add r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_add

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_sub|
#line 165
|__asm___14_nrf_pwr_mgmt_c_f22138a6__nrf_atomic_internal_sub| PROC
#line 168

 push {r4, r5}
 mov r4, r0

loop_sub
 ldrex r0, [r4]
 sub r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_sub

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP

;*** End   embedded assembler ***
