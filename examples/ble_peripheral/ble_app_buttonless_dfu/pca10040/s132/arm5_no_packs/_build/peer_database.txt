; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\peer_database.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\peer_database.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\peer_database.crf ..\..\..\..\..\..\components\ble\peer_manager\peer_database.c]
                          THUMB

                          AREA ||i.internal_state_reset||, CODE, READONLY, ALIGN=2

                  internal_state_reset PROC
;;;242     */
;;;243    static void internal_state_reset()
000000  b510              PUSH     {r4,lr}
;;;244    {
;;;245        for (uint32_t i = 0; i < PM_FLASH_BUFFERS; i++)
000002  2400              MOVS     r4,#0
000004  e007              B        |L1.22|
                  |L1.6|
;;;246        {
;;;247            write_buffer_record_invalidate(&m_write_buffer_records[i]);
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a04              LDR      r2,|L1.28|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       write_buffer_record_invalidate
000014  1c64              ADDS     r4,r4,#1              ;245
                  |L1.22|
000016  2c08              CMP      r4,#8                 ;245
000018  d3f5              BCC      |L1.6|
;;;248        }
;;;249    }
00001a  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L1.28|
                          DCD      m_write_buffer_records

                          AREA ||i.pdb_clear||, CODE, READONLY, ALIGN=1

                  pdb_clear PROC
;;;730    
;;;731    ret_code_t pdb_clear(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b570              PUSH     {r4-r6,lr}
;;;732    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;733        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;734        return pds_peer_data_delete(peer_id, data_id);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       pds_peer_data_delete
;;;735    }
00000e  bd70              POP      {r4-r6,pc}
;;;736    
                          ENDP


                          AREA ||i.pdb_evt_send||, CODE, READONLY, ALIGN=2

                  pdb_evt_send PROC
;;;229     */
;;;230    static void pdb_evt_send(pdb_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;231    {
000002  4605              MOV      r5,r0
;;;232        for (uint32_t i = 0; i < PDB_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L3.20|
                  |L3.8|
;;;233        {
;;;234            m_evt_handlers[i](p_event);
000008  4804              LDR      r0,|L3.28|
00000a  f8501024          LDR      r1,[r0,r4,LSL #2]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;232
                  |L3.20|
000014  2c05              CMP      r4,#5                 ;232
000016  d3f7              BCC      |L3.8|
;;;235        }
;;;236    }
000018  bd70              POP      {r4-r6,pc}
;;;237    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      m_evt_handlers

                          AREA ||i.pdb_init||, CODE, READONLY, ALIGN=2

                  pdb_init PROC
;;;369    
;;;370    ret_code_t pdb_init()
000000  b53e              PUSH     {r1-r5,lr}
;;;371    {
;;;372        ret_code_t ret;
;;;373    
;;;374        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;375    
;;;376        internal_state_reset();
000002  f7fffffe          BL       internal_state_reset
;;;377    
;;;378        PM_BUFFER_INIT(&m_write_buffer, PM_FLASH_BUFFERS, PDB_WRITE_BUF_SIZE, ret);
000006  bf00              NOP      
000008  2050              MOVS     r0,#0x50
00000a  2108              MOVS     r1,#8
00000c  2201              MOVS     r2,#1
00000e  4b09              LDR      r3,|L4.52|
000010  e9cd2100          STRD     r2,r1,[sp,#0]
000014  9002              STR      r0,[sp,#8]
000016  00c2              LSLS     r2,r0,#3
000018  4907              LDR      r1,|L4.56|
00001a  4808              LDR      r0,|L4.60|
00001c  f7fffffe          BL       pm_buffer_init
000020  4604              MOV      r4,r0
000022  bf00              NOP      
;;;379    
;;;380        if (ret != NRF_SUCCESS)
000024  b10c              CBZ      r4,|L4.42|
;;;381        {
;;;382            return NRF_ERROR_INTERNAL;
000026  2003              MOVS     r0,#3
                  |L4.40|
;;;383        }
;;;384    
;;;385        m_module_initialized = true;
;;;386    
;;;387        return NRF_SUCCESS;
;;;388    }
000028  bd3e              POP      {r1-r5,pc}
                  |L4.42|
00002a  2001              MOVS     r0,#1                 ;385
00002c  4904              LDR      r1,|L4.64|
00002e  7008              STRB     r0,[r1,#0]            ;385
000030  2000              MOVS     r0,#0                 ;387
000032  e7f9              B        |L4.40|
;;;389    
                          ENDP

                  |L4.52|
                          DCD      mutex_memory
                  |L4.56|
                          DCD      buffer_memory
                  |L4.60|
                          DCD      m_write_buffer
                  |L4.64|
                          DCD      m_module_initialized

                          AREA ||i.pdb_n_peers||, CODE, READONLY, ALIGN=1

                  pdb_n_peers PROC
;;;737    
;;;738    uint32_t pdb_n_peers(void)
000000  b510              PUSH     {r4,lr}
;;;739    {
;;;740        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;741        return pds_peer_count_get();
000002  f7fffffe          BL       pds_peer_count_get
;;;742    }
000006  bd10              POP      {r4,pc}
;;;743    
                          ENDP


                          AREA ||i.pdb_next_deleted_peer_id_get||, CODE, READONLY, ALIGN=1

                  pdb_next_deleted_peer_id_get PROC
;;;751    
;;;752    pm_peer_id_t pdb_next_deleted_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;753    {
000002  4604              MOV      r4,r0
;;;754        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;755        return pds_next_deleted_peer_id_get(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       pds_next_deleted_peer_id_get
;;;756    }
00000a  bd10              POP      {r4,pc}
;;;757    
                          ENDP


                          AREA ||i.pdb_next_peer_id_get||, CODE, READONLY, ALIGN=1

                  pdb_next_peer_id_get PROC
;;;744    
;;;745    pm_peer_id_t pdb_next_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;746    {
000002  4604              MOV      r4,r0
;;;747        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;748        return pds_next_peer_id_get(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       pds_next_peer_id_get
;;;749    }
00000a  bd10              POP      {r4,pc}
;;;750    
                          ENDP


                          AREA ||i.pdb_pds_evt_handler||, CODE, READONLY, ALIGN=2

                  pdb_pds_evt_handler PROC
;;;256     */
;;;257    void pdb_pds_evt_handler(pds_evt_t const * p_event)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;258    {
000004  4604              MOV      r4,r0
;;;259        ret_code_t            err_code;
;;;260        pdb_buffer_record_t * p_write_buffer_record;
;;;261        bool                  retry_flash_full = false;
000006  f04f0800          MOV      r8,#0
;;;262        pdb_evt_t             event =
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
000010  9002              STR      r0,[sp,#8]
000012  9003              STR      r0,[sp,#0xc]
000014  8860              LDRH     r0,[r4,#2]
000016  f8ad0002          STRH     r0,[sp,#2]
00001a  7920              LDRB     r0,[r4,#4]
00001c  f88d0004          STRB     r0,[sp,#4]
;;;263        {
;;;264            .peer_id = p_event->peer_id,
;;;265            .data_id = p_event->data_id,
;;;266        };
;;;267    
;;;268        p_write_buffer_record = write_buffer_record_find(p_event->peer_id, p_event->data_id);
000020  7921              LDRB     r1,[r4,#4]
000022  8860              LDRH     r0,[r4,#2]
000024  f7fffffe          BL       write_buffer_record_find
000028  4605              MOV      r5,r0
;;;269    
;;;270        switch (p_event->evt_id)
00002a  7820              LDRB     r0,[r4,#0]
00002c  280a              CMP      r0,#0xa
00002e  d275              BCS      |L8.284|
000030  e8dff000          TBB      [pc,r0]
000034  05064725          DCB      0x05,0x06,0x47,0x25
000038  264e575e          DCB      0x26,0x4e,0x57,0x5e
00003c  6771              DCB      0x67,0x71
;;;271        {
;;;272            case PDS_EVT_STORED:
;;;273            case PDS_EVT_UPDATED:
00003e  bf00              NOP      
;;;274                if (   (p_write_buffer_record != NULL)
000040  b1a5              CBZ      r5,|L8.108|
;;;275                    //&& (p_write_buffer_record->store_token == p_event->store_token)
;;;276                    && (p_write_buffer_record->store_requested))
000042  7c68              LDRB     r0,[r5,#0x11]
000044  f0000001          AND      r0,r0,#1
000048  b180              CBZ      r0,|L8.108|
;;;277                {
;;;278                    write_buffer_record_release(p_write_buffer_record);
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       write_buffer_record_release
;;;279                    event.evt_id = PDB_EVT_WRITE_BUF_STORED;
000050  2000              MOVS     r0,#0
000052  f88d0000          STRB     r0,[sp,#0]
;;;280                    event.params.write_buf_stored_evt.update = (p_event->evt_id == PDS_EVT_UPDATED);
000056  7820              LDRB     r0,[r4,#0]
000058  2801              CMP      r0,#1
00005a  d100              BNE      |L8.94|
00005c  e000              B        |L8.96|
                  |L8.94|
00005e  2000              MOVS     r0,#0
                  |L8.96|
000060  f88d0008          STRB     r0,[sp,#8]
;;;281                    pdb_evt_send(&event);
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       pdb_evt_send
00006a  e007              B        |L8.124|
                  |L8.108|
;;;282                }
;;;283                else
;;;284                {
;;;285                    event.evt_id = PDB_EVT_RAW_STORED;
00006c  2001              MOVS     r0,#1
00006e  f88d0000          STRB     r0,[sp,#0]
;;;286                    event.params.raw_stored_evt.store_token = p_event->store_token;
000072  68a0              LDR      r0,[r4,#8]
000074  9002              STR      r0,[sp,#8]
;;;287                    pdb_evt_send(&event);
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       pdb_evt_send
                  |L8.124|
;;;288                }
;;;289                break;
00007c  e04f              B        |L8.286|
;;;290            case PDS_EVT_ERROR_STORE:
;;;291            case PDS_EVT_ERROR_UPDATE:
00007e  bf00              NOP      
;;;292                if (   (p_write_buffer_record != NULL)
000080  b1b5              CBZ      r5,|L8.176|
;;;293                    && (p_write_buffer_record->store_token == p_event->store_token)
000082  68a8              LDR      r0,[r5,#8]
000084  68a1              LDR      r1,[r4,#8]
000086  4288              CMP      r0,r1
000088  d112              BNE      |L8.176|
;;;294                    && (p_write_buffer_record->store_requested))
00008a  7c68              LDRB     r0,[r5,#0x11]
00008c  f0000001          AND      r0,r0,#1
000090  b170              CBZ      r0,|L8.176|
;;;295                {
;;;296                    // Retry if internal buffer.
;;;297                    m_n_writes++;
000092  4848              LDR      r0,|L8.436|
000094  6800              LDR      r0,[r0,#0]  ; m_n_writes
000096  1c40              ADDS     r0,r0,#1
000098  4946              LDR      r1,|L8.436|
00009a  6008              STR      r0,[r1,#0]  ; m_n_writes
;;;298                    p_write_buffer_record->store_requested = false;
00009c  7c68              LDRB     r0,[r5,#0x11]
00009e  f0200001          BIC      r0,r0,#1
0000a2  7468              STRB     r0,[r5,#0x11]
;;;299                    p_write_buffer_record->store_busy      = true;
0000a4  7c68              LDRB     r0,[r5,#0x11]
0000a6  f0200004          BIC      r0,r0,#4
0000aa  1d00              ADDS     r0,r0,#4
0000ac  7468              STRB     r0,[r5,#0x11]
0000ae  e007              B        |L8.192|
                  |L8.176|
;;;300                }
;;;301                else
;;;302                {
;;;303                    event.evt_id                              = PDB_EVT_RAW_STORE_FAILED;
0000b0  2002              MOVS     r0,#2
0000b2  f88d0000          STRB     r0,[sp,#0]
;;;304                    event.params.error_raw_store_evt.err_code = p_event->result;
0000b6  68e1              LDR      r1,[r4,#0xc]
0000b8  9103              STR      r1,[sp,#0xc]
;;;305                    pdb_evt_send(&event);
0000ba  4668              MOV      r0,sp
0000bc  f7fffffe          BL       pdb_evt_send
                  |L8.192|
;;;306                }
;;;307                break;
0000c0  e02d              B        |L8.286|
;;;308            case PDS_EVT_CLEARED:
;;;309                event.evt_id = PDB_EVT_CLEARED;
0000c2  2003              MOVS     r0,#3
0000c4  f88d0000          STRB     r0,[sp,#0]
;;;310                pdb_evt_send(&event);
0000c8  4668              MOV      r0,sp
0000ca  f7fffffe          BL       pdb_evt_send
;;;311                break;
0000ce  e026              B        |L8.286|
;;;312            case PDS_EVT_ERROR_CLEAR:
;;;313                event.evt_id = PDB_EVT_CLEAR_FAILED;
0000d0  2004              MOVS     r0,#4
0000d2  f88d0000          STRB     r0,[sp,#0]
;;;314                event.params.clear_failed_evt.err_code = p_event->result;
0000d6  68e0              LDR      r0,[r4,#0xc]
0000d8  9002              STR      r0,[sp,#8]
;;;315                pdb_evt_send(&event);
0000da  4668              MOV      r0,sp
0000dc  f7fffffe          BL       pdb_evt_send
;;;316                break;
0000e0  e01d              B        |L8.286|
;;;317            case PDS_EVT_PEER_ID_CLEAR:
;;;318                event.evt_id = PDB_EVT_PEER_FREED;
0000e2  2005              MOVS     r0,#5
0000e4  f88d0000          STRB     r0,[sp,#0]
;;;319                pdb_evt_send(&event);
0000e8  4668              MOV      r0,sp
0000ea  f7fffffe          BL       pdb_evt_send
;;;320                break;
0000ee  e016              B        |L8.286|
;;;321            case PDS_EVT_ERROR_PEER_ID_CLEAR:
;;;322                event.evt_id = PDB_EVT_PEER_FREE_FAILED;
0000f0  2006              MOVS     r0,#6
0000f2  f88d0000          STRB     r0,[sp,#0]
;;;323                event.params.peer_free_failed_evt.err_code = p_event->result;
0000f6  68e0              LDR      r0,[r4,#0xc]
0000f8  9002              STR      r0,[sp,#8]
;;;324                pdb_evt_send(&event);
0000fa  4668              MOV      r0,sp
0000fc  f7fffffe          BL       pdb_evt_send
;;;325                break;
000100  e00d              B        |L8.286|
;;;326            case PDS_EVT_COMPRESSED:
;;;327                retry_flash_full = true;
000102  f04f0801          MOV      r8,#1
;;;328                event.evt_id = PDB_EVT_COMPRESSED;
000106  2007              MOVS     r0,#7
000108  f88d0000          STRB     r0,[sp,#0]
;;;329                pdb_evt_send(&event);
00010c  4668              MOV      r0,sp
00010e  f7fffffe          BL       pdb_evt_send
;;;330                break;
000112  e004              B        |L8.286|
000114  e002              B        |L8.284|
;;;331            case PDS_EVT_ERROR_UNEXPECTED:
;;;332                event.params.error_unexpected.err_code = p_event->result;
000116  68e0              LDR      r0,[r4,#0xc]
000118  9002              STR      r0,[sp,#8]
;;;333                break;
00011a  e000              B        |L8.286|
                  |L8.284|
;;;334            default:
;;;335                break;
00011c  bf00              NOP      
                  |L8.286|
00011e  bf00              NOP                            ;289
;;;336        }
;;;337    
;;;338        if (m_n_writes > 0)
000120  4824              LDR      r0,|L8.436|
000122  6800              LDR      r0,[r0,#0]  ; m_n_writes
000124  b3b8              CBZ      r0,|L8.406|
;;;339        {
;;;340            for (uint32_t i = 0; i < PM_FLASH_BUFFERS; i++)
000126  2600              MOVS     r6,#0
000128  e03f              B        |L8.426|
                  |L8.298|
;;;341            {
;;;342                if  ((m_write_buffer_records[i].store_busy)
00012a  eb060086          ADD      r0,r6,r6,LSL #2
00012e  4922              LDR      r1,|L8.440|
000130  eb010080          ADD      r0,r1,r0,LSL #2
000134  7c40              LDRB     r0,[r0,#0x11]
000136  f3c00080          UBFX     r0,r0,#2,#1
00013a  b950              CBNZ     r0,|L8.338|
;;;343                  || (m_write_buffer_records[i].store_flash_full && retry_flash_full))
00013c  eb060086          ADD      r0,r6,r6,LSL #2
000140  eb010080          ADD      r0,r1,r0,LSL #2
000144  7c40              LDRB     r0,[r0,#0x11]
000146  f3c00040          UBFX     r0,r0,#1,#1
00014a  b368              CBZ      r0,|L8.424|
00014c  f1b80f00          CMP      r8,#0
000150  d02a              BEQ      |L8.424|
                  |L8.338|
;;;344                {
;;;345                    err_code = pdb_write_buf_store(m_write_buffer_records[i].peer_id,
000152  eb060286          ADD      r2,r6,r6,LSL #2
000156  4b18              LDR      r3,|L8.440|
000158  eb030282          ADD      r2,r3,r2,LSL #2
00015c  7891              LDRB     r1,[r2,#2]
00015e  eb060286          ADD      r2,r6,r6,LSL #2
000162  f8330022          LDRH     r0,[r3,r2,LSL #2]
000166  f7fffffe          BL       pdb_write_buf_store
00016a  4607              MOV      r7,r0
;;;346                                                   m_write_buffer_records[i].data_id);
;;;347                    if (err_code != NRF_SUCCESS)
00016c  b1e7              CBZ      r7,|L8.424|
;;;348                    {
;;;349                        event.peer_id = m_write_buffer_records[i].peer_id;
00016e  eb060086          ADD      r0,r6,r6,LSL #2
000172  4911              LDR      r1,|L8.440|
000174  f8310020          LDRH     r0,[r1,r0,LSL #2]
000178  f8ad0002          STRH     r0,[sp,#2]
;;;350                        event.data_id = m_write_buffer_records[i].data_id;
00017c  eb060086          ADD      r0,r6,r6,LSL #2
000180  eb010080          ADD      r0,r1,r0,LSL #2
000184  7880              LDRB     r0,[r0,#2]
000186  f88d0004          STRB     r0,[sp,#4]
;;;351                        if (err_code == NRF_ERROR_STORAGE_FULL)
00018a  2f86              CMP      r7,#0x86
00018c  d104              BNE      |L8.408|
;;;352                        {
;;;353                            event.evt_id = PDB_EVT_ERROR_NO_MEM;
00018e  2008              MOVS     r0,#8
000190  f88d0000          STRB     r0,[sp,#0]
000194  e004              B        |L8.416|
                  |L8.406|
000196  e00b              B        |L8.432|
                  |L8.408|
;;;354                        }
;;;355                        else
;;;356                        {
;;;357                            event.evt_id                           = PDB_EVT_ERROR_UNEXPECTED;
000198  2009              MOVS     r0,#9
00019a  f88d0000          STRB     r0,[sp,#0]
;;;358                            event.params.error_unexpected.err_code = err_code;
00019e  9702              STR      r7,[sp,#8]
                  |L8.416|
;;;359                        }
;;;360    
;;;361                        pdb_evt_send(&event);
0001a0  4668              MOV      r0,sp
0001a2  f7fffffe          BL       pdb_evt_send
;;;362                        break;
0001a6  e002              B        |L8.430|
                  |L8.424|
0001a8  1c76              ADDS     r6,r6,#1              ;340
                  |L8.426|
0001aa  2e08              CMP      r6,#8                 ;340
0001ac  d3bd              BCC      |L8.298|
                  |L8.430|
0001ae  bf00              NOP      
                  |L8.432|
;;;363                    }
;;;364                }
;;;365            }
;;;366        }
;;;367    }
0001b0  e8bd81ff          POP      {r0-r8,pc}
;;;368    
                          ENDP

                  |L8.436|
                          DCD      m_n_writes
                  |L8.440|
                          DCD      m_write_buffer_records

                          AREA ||i.pdb_peer_allocate||, CODE, READONLY, ALIGN=1

                  pdb_peer_allocate PROC
;;;390    
;;;391    pm_peer_id_t pdb_peer_allocate(void)
000000  b510              PUSH     {r4,lr}
;;;392    {
;;;393        #if 0
;;;394        if (!MODULE_INITIALIZED)
;;;395        {
;;;396            return PM_PEER_ID_INVALID;
;;;397        }
;;;398        #endif
;;;399    
;;;400        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;401        return pds_peer_id_allocate();
000002  f7fffffe          BL       pds_peer_id_allocate
;;;402    }
000006  bd10              POP      {r4,pc}
;;;403    
                          ENDP


                          AREA ||i.pdb_peer_data_load||, CODE, READONLY, ALIGN=1

                  pdb_peer_data_load PROC
;;;758    
;;;759    ret_code_t pdb_peer_data_load(pm_peer_id_t              peer_id,
000000  b5f8              PUSH     {r3-r7,lr}
;;;760                                  pm_peer_data_id_t         data_id,
;;;761                                  pm_peer_data_t    * const p_peer_data)
;;;762    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;763        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;764        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;765    
;;;766        // Provide the buffer length in bytes.
;;;767        uint32_t const data_len_bytes = (p_peer_data->length_words * sizeof(uint32_t));
000008  8820              LDRH     r0,[r4,#0]
00000a  0080              LSLS     r0,r0,#2
00000c  9000              STR      r0,[sp,#0]
;;;768        return pds_peer_data_read(peer_id, data_id, p_peer_data, &data_len_bytes);
00000e  466b              MOV      r3,sp
000010  4622              MOV      r2,r4
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       pds_peer_data_read
;;;769    }
00001a  bdf8              POP      {r3-r7,pc}
;;;770    
                          ENDP


                          AREA ||i.pdb_peer_data_ptr_get||, CODE, READONLY, ALIGN=1

                  pdb_peer_data_ptr_get PROC
;;;450    
;;;451    ret_code_t pdb_peer_data_ptr_get(pm_peer_id_t                 peer_id,
000000  b570              PUSH     {r4-r6,lr}
;;;452                                     pm_peer_data_id_t            data_id,
;;;453                                     pm_peer_data_flash_t * const p_peer_data)
;;;454    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;455        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;456        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;457    
;;;458        // Pass NULL to only retrieve a pointer.
;;;459        return pds_peer_data_read(peer_id, data_id, (pm_peer_data_t*)p_peer_data, NULL);
000008  2300              MOVS     r3,#0
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       pds_peer_data_read
;;;460    }
000014  bd70              POP      {r4-r6,pc}
;;;461    
                          ENDP


                          AREA ||i.pdb_peer_free||, CODE, READONLY, ALIGN=1

                  pdb_peer_free PROC
;;;404    
;;;405    ret_code_t pdb_peer_free(pm_peer_id_t peer_id)
000000  b5f8              PUSH     {r3-r7,lr}
;;;406    {
000002  4607              MOV      r7,r0
;;;407        ret_code_t err_code_in  = NRF_SUCCESS;
000004  2400              MOVS     r4,#0
;;;408        ret_code_t err_code_out = NRF_SUCCESS;
000006  2500              MOVS     r5,#0
;;;409    
;;;410        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;411    
;;;412        int index = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;413        pdb_buffer_record_t * p_record = write_buffer_record_find_next(peer_id, &index);
00000c  4669              MOV      r1,sp
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       write_buffer_record_find_next
000014  4606              MOV      r6,r0
;;;414    
;;;415        while (p_record != NULL)
000016  e010              B        |L12.58|
                  |L12.24|
;;;416        {
;;;417            err_code_in = pdb_write_buf_release(peer_id, p_record->data_id);
000018  78b1              LDRB     r1,[r6,#2]
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       pdb_write_buf_release
000020  4604              MOV      r4,r0
;;;418    
;;;419            if (   (err_code_in != NRF_SUCCESS)
000022  b114              CBZ      r4,|L12.42|
;;;420                && (err_code_in != NRF_ERROR_NOT_FOUND))
000024  2c05              CMP      r4,#5
000026  d000              BEQ      |L12.42|
;;;421            {
;;;422                err_code_out = NRF_ERROR_INTERNAL;
000028  2503              MOVS     r5,#3
                  |L12.42|
;;;423            }
;;;424    
;;;425            index++;
00002a  9800              LDR      r0,[sp,#0]
00002c  1c40              ADDS     r0,r0,#1
00002e  9000              STR      r0,[sp,#0]
;;;426            p_record = write_buffer_record_find_next(peer_id, &index);
000030  4669              MOV      r1,sp
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       write_buffer_record_find_next
000038  4606              MOV      r6,r0
                  |L12.58|
00003a  2e00              CMP      r6,#0                 ;415
00003c  d1ec              BNE      |L12.24|
;;;427        }
;;;428    
;;;429        if (err_code_out == NRF_SUCCESS)
00003e  b94d              CBNZ     r5,|L12.84|
;;;430        {
;;;431            err_code_in = pds_peer_id_free(peer_id);
000040  4638              MOV      r0,r7
000042  f7fffffe          BL       pds_peer_id_free
000046  4604              MOV      r4,r0
;;;432    
;;;433            if (err_code_in == NRF_SUCCESS)
000048  b124              CBZ      r4,|L12.84|
;;;434            {
;;;435                // No action needed.
;;;436            }
;;;437            else if (err_code_in == NRF_ERROR_INVALID_PARAM)
00004a  2c07              CMP      r4,#7
00004c  d101              BNE      |L12.82|
;;;438            {
;;;439                err_code_out = NRF_ERROR_INVALID_PARAM;
00004e  2507              MOVS     r5,#7
000050  e000              B        |L12.84|
                  |L12.82|
;;;440            }
;;;441            else
;;;442            {
;;;443                err_code_out = NRF_ERROR_INTERNAL;
000052  2503              MOVS     r5,#3
                  |L12.84|
;;;444            }
;;;445        }
;;;446    
;;;447        return err_code_out;
000054  4628              MOV      r0,r5
;;;448    }
000056  bdf8              POP      {r3-r7,pc}
;;;449    
                          ENDP


                          AREA ||i.pdb_raw_store||, CODE, READONLY, ALIGN=1

                  pdb_raw_store PROC
;;;771    
;;;772    ret_code_t pdb_raw_store(pm_peer_id_t           peer_id,
000000  b570              PUSH     {r4-r6,lr}
;;;773                             pm_peer_data_const_t * p_peer_data,
;;;774                             pm_store_token_t     * p_store_token)
;;;775    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;776        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;777        return pds_peer_data_store(peer_id, p_peer_data, PDS_PREPARE_TOKEN_INVALID, p_store_token);
000008  4623              MOV      r3,r4
00000a  2200              MOVS     r2,#0
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       pds_peer_data_store
;;;778    }
000014  bd70              POP      {r4-r6,pc}
;;;779    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.pdb_write_buf_get||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_get PROC
;;;501    
;;;502    ret_code_t pdb_write_buf_get(pm_peer_id_t       peer_id,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;503                                 pm_peer_data_id_t  data_id,
;;;504                                 uint32_t           n_bufs,
;;;505                                 pm_peer_data_t   * p_peer_data)
;;;506    {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;507        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;508    
;;;509        VERIFY_PARAM_NOT_NULL(p_peer_data);
00000c  bf00              NOP      
00000e  b916              CBNZ     r6,|L14.22|
000010  200e              MOVS     r0,#0xe
                  |L14.18|
;;;510        VERIFY_DATA_ID_WRITE_BUF(data_id);
;;;511    
;;;512        if (   (n_bufs == 0)
;;;513            || (n_bufs > PM_FLASH_BUFFERS)
;;;514            || !pds_peer_id_is_allocated(peer_id))
;;;515        {
;;;516            return NRF_ERROR_INVALID_PARAM;
;;;517        }
;;;518    
;;;519        pdb_buffer_record_t * write_buffer_record;
;;;520        uint8_t             * p_buffer_memory;
;;;521        bool                  new_record = false;
;;;522    
;;;523        write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;524    
;;;525        if ((write_buffer_record != NULL) && (write_buffer_record->n_bufs < n_bufs))
;;;526        {
;;;527            // @TODO: Copy?
;;;528            // Existing buffer is too small.
;;;529            for (uint8_t i = 0; i < write_buffer_record->n_bufs; i++)
;;;530            {
;;;531                pm_buffer_release(&m_write_buffer, write_buffer_record->buffer_block_id + i);
;;;532            }
;;;533            write_buffer_record_invalidate(write_buffer_record);
;;;534            write_buffer_record = NULL;
;;;535        }
;;;536        else if ((write_buffer_record != NULL) && write_buffer_record->n_bufs > n_bufs)
;;;537        {
;;;538            // Release excess blocks.
;;;539            for (uint8_t i = n_bufs; i < write_buffer_record->n_bufs; i++)
;;;540            {
;;;541                pm_buffer_release(&m_write_buffer, write_buffer_record->buffer_block_id + i);
;;;542            }
;;;543        }
;;;544    
;;;545        if (write_buffer_record == NULL)
;;;546        {
;;;547            write_buffer_record_get(&write_buffer_record, peer_id, data_id);
;;;548            if (write_buffer_record == NULL)
;;;549            {
;;;550                return NRF_ERROR_BUSY;
;;;551            }
;;;552        }
;;;553    
;;;554        if (write_buffer_record->buffer_block_id == PM_BUFFER_INVALID_ID)
;;;555        {
;;;556            write_buffer_record->buffer_block_id = pm_buffer_block_acquire(&m_write_buffer, n_bufs);
;;;557    
;;;558            if (write_buffer_record->buffer_block_id == PM_BUFFER_INVALID_ID)
;;;559            {
;;;560                write_buffer_record_invalidate(write_buffer_record);
;;;561                return NRF_ERROR_BUSY;
;;;562            }
;;;563    
;;;564            new_record = true;
;;;565        }
;;;566    
;;;567        write_buffer_record->n_bufs = n_bufs;
;;;568    
;;;569        p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, write_buffer_record->buffer_block_id);
;;;570    
;;;571        if (p_buffer_memory == NULL)
;;;572        {
;;;573            return NRF_ERROR_INTERNAL;
;;;574        }
;;;575    
;;;576        peer_data_point_to_buffer(p_peer_data, data_id, p_buffer_memory, n_bufs);
;;;577        if (new_record && (data_id == PM_PEER_DATA_ID_GATT_LOCAL))
;;;578        {
;;;579            p_peer_data->p_local_gatt_db->len = PM_LOCAL_DB_LEN(p_peer_data->length_words);
;;;580        }
;;;581    
;;;582        return NRF_SUCCESS;
;;;583    }
000012  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.22|
000016  bf00              NOP                            ;509
000018  bf00              NOP                            ;510
00001a  2d07              CMP      r5,#7                 ;510
00001c  d003              BEQ      |L14.38|
00001e  2d08              CMP      r5,#8                 ;510
000020  d001              BEQ      |L14.38|
000022  2007              MOVS     r0,#7                 ;510
000024  e7f5              B        |L14.18|
                  |L14.38|
000026  bf00              NOP                            ;510
000028  b12c              CBZ      r4,|L14.54|
00002a  2c08              CMP      r4,#8                 ;513
00002c  d803              BHI      |L14.54|
00002e  4648              MOV      r0,r9                 ;514
000030  f7fffffe          BL       pds_peer_id_is_allocated
000034  b908              CBNZ     r0,|L14.58|
                  |L14.54|
000036  2007              MOVS     r0,#7                 ;516
000038  e7eb              B        |L14.18|
                  |L14.58|
00003a  f04f0a00          MOV      r10,#0                ;521
00003e  4629              MOV      r1,r5                 ;523
000040  4648              MOV      r0,r9                 ;523
000042  f7fffffe          BL       write_buffer_record_find
000046  9000              STR      r0,[sp,#0]            ;523
000048  9800              LDR      r0,[sp,#0]            ;525
00004a  b1d0              CBZ      r0,|L14.130|
00004c  9800              LDR      r0,[sp,#0]            ;525
00004e  68c0              LDR      r0,[r0,#0xc]          ;525
000050  42a0              CMP      r0,r4                 ;525
000052  d216              BCS      |L14.130|
000054  46d0              MOV      r8,r10                ;529
000056  e00a              B        |L14.110|
                  |L14.88|
000058  9800              LDR      r0,[sp,#0]            ;531
00005a  7c00              LDRB     r0,[r0,#0x10]         ;531
00005c  4440              ADD      r0,r0,r8              ;531
00005e  b2c1              UXTB     r1,r0                 ;531
000060  4833              LDR      r0,|L14.304|
000062  f7fffffe          BL       pm_buffer_release
000066  f1080001          ADD      r0,r8,#1              ;529
00006a  f00008ff          AND      r8,r0,#0xff           ;529
                  |L14.110|
00006e  9800              LDR      r0,[sp,#0]            ;529
000070  68c0              LDR      r0,[r0,#0xc]          ;529
000072  4540              CMP      r0,r8                 ;529
000074  d8f0              BHI      |L14.88|
000076  9800              LDR      r0,[sp,#0]            ;533
000078  f7fffffe          BL       write_buffer_record_invalidate
00007c  2000              MOVS     r0,#0                 ;534
00007e  9000              STR      r0,[sp,#0]            ;534
000080  e017              B        |L14.178|
                  |L14.130|
000082  9800              LDR      r0,[sp,#0]            ;536
000084  b1a8              CBZ      r0,|L14.178|
000086  9800              LDR      r0,[sp,#0]            ;536
000088  68c0              LDR      r0,[r0,#0xc]          ;536
00008a  42a0              CMP      r0,r4                 ;536
00008c  d911              BLS      |L14.178|
00008e  f00408ff          AND      r8,r4,#0xff           ;539
000092  e00a              B        |L14.170|
                  |L14.148|
000094  9800              LDR      r0,[sp,#0]            ;541
000096  7c00              LDRB     r0,[r0,#0x10]         ;541
000098  4440              ADD      r0,r0,r8              ;541
00009a  b2c1              UXTB     r1,r0                 ;541
00009c  4824              LDR      r0,|L14.304|
00009e  f7fffffe          BL       pm_buffer_release
0000a2  f1080001          ADD      r0,r8,#1              ;539
0000a6  f00008ff          AND      r8,r0,#0xff           ;539
                  |L14.170|
0000aa  9800              LDR      r0,[sp,#0]            ;539
0000ac  68c0              LDR      r0,[r0,#0xc]          ;539
0000ae  4540              CMP      r0,r8                 ;539
0000b0  d8f0              BHI      |L14.148|
                  |L14.178|
0000b2  9800              LDR      r0,[sp,#0]            ;545
0000b4  b940              CBNZ     r0,|L14.200|
0000b6  462a              MOV      r2,r5                 ;547
0000b8  4649              MOV      r1,r9                 ;547
0000ba  4668              MOV      r0,sp                 ;547
0000bc  f7fffffe          BL       write_buffer_record_get
0000c0  9800              LDR      r0,[sp,#0]            ;548
0000c2  b908              CBNZ     r0,|L14.200|
0000c4  2011              MOVS     r0,#0x11              ;550
0000c6  e7a4              B        |L14.18|
                  |L14.200|
0000c8  9800              LDR      r0,[sp,#0]            ;554
0000ca  7c00              LDRB     r0,[r0,#0x10]         ;554
0000cc  28ff              CMP      r0,#0xff              ;554
0000ce  d110              BNE      |L14.242|
0000d0  4621              MOV      r1,r4                 ;556
0000d2  4817              LDR      r0,|L14.304|
0000d4  f7fffffe          BL       pm_buffer_block_acquire
0000d8  9900              LDR      r1,[sp,#0]            ;556
0000da  7408              STRB     r0,[r1,#0x10]         ;556
0000dc  9800              LDR      r0,[sp,#0]            ;558
0000de  7c00              LDRB     r0,[r0,#0x10]         ;558
0000e0  28ff              CMP      r0,#0xff              ;558
0000e2  d104              BNE      |L14.238|
0000e4  9800              LDR      r0,[sp,#0]            ;560
0000e6  f7fffffe          BL       write_buffer_record_invalidate
0000ea  2011              MOVS     r0,#0x11              ;561
0000ec  e791              B        |L14.18|
                  |L14.238|
0000ee  f04f0a01          MOV      r10,#1                ;564
                  |L14.242|
0000f2  9800              LDR      r0,[sp,#0]            ;567
0000f4  60c4              STR      r4,[r0,#0xc]          ;567
0000f6  9800              LDR      r0,[sp,#0]            ;569
0000f8  7c01              LDRB     r1,[r0,#0x10]         ;569
0000fa  480d              LDR      r0,|L14.304|
0000fc  f7fffffe          BL       pm_buffer_ptr_get
000100  4607              MOV      r7,r0                 ;569
000102  b90f              CBNZ     r7,|L14.264|
000104  2003              MOVS     r0,#3                 ;573
000106  e784              B        |L14.18|
                  |L14.264|
000108  b2a3              UXTH     r3,r4                 ;576
00010a  463a              MOV      r2,r7                 ;576
00010c  4629              MOV      r1,r5                 ;576
00010e  4630              MOV      r0,r6                 ;576
000110  f7fffffe          BL       peer_data_point_to_buffer
000114  f1ba0f00          CMP      r10,#0                ;577
000118  d007              BEQ      |L14.298|
00011a  2d08              CMP      r5,#8                 ;577
00011c  d105              BNE      |L14.298|
00011e  8830              LDRH     r0,[r6,#0]            ;579
000120  2106              MOVS     r1,#6                 ;579
000122  ebc10080          RSB      r0,r1,r0,LSL #2       ;579
000126  6871              LDR      r1,[r6,#4]            ;579
000128  8088              STRH     r0,[r1,#4]            ;579
                  |L14.298|
00012a  2000              MOVS     r0,#0                 ;582
00012c  e771              B        |L14.18|
;;;584    
                          ENDP

00012e  0000              DCW      0x0000
                  |L14.304|
                          DCD      m_write_buffer

                          AREA ||i.pdb_write_buf_release||, CODE, READONLY, ALIGN=1

                  pdb_write_buf_release PROC
;;;585    
;;;586    ret_code_t pdb_write_buf_release(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;587    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;588        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;589    
;;;590        ret_code_t            err_code = NRF_SUCCESS;
000008  2500              MOVS     r5,#0
;;;591        pdb_buffer_record_t * p_write_buffer_record;
;;;592        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       write_buffer_record_find
000012  4604              MOV      r4,r0
;;;593    
;;;594        if (p_write_buffer_record == NULL)
000014  b914              CBNZ     r4,|L15.28|
;;;595        {
;;;596            return NRF_ERROR_NOT_FOUND;
000016  2005              MOVS     r0,#5
                  |L15.24|
;;;597        }
;;;598    
;;;599        if (p_write_buffer_record->prepare_token != PDS_PREPARE_TOKEN_INVALID)
;;;600        {
;;;601            err_code = pds_space_reserve_cancel(p_write_buffer_record->prepare_token);
;;;602            if (err_code != NRF_SUCCESS)
;;;603            {
;;;604                err_code = NRF_ERROR_INTERNAL;
;;;605            }
;;;606        }
;;;607    
;;;608        write_buffer_record_release(p_write_buffer_record);
;;;609    
;;;610        return err_code;
;;;611    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L15.28|
00001c  6860              LDR      r0,[r4,#4]            ;599
00001e  b128              CBZ      r0,|L15.44|
000020  6860              LDR      r0,[r4,#4]            ;601
000022  f7fffffe          BL       pds_space_reserve_cancel
000026  4605              MOV      r5,r0                 ;601
000028  b105              CBZ      r5,|L15.44|
00002a  2503              MOVS     r5,#3                 ;604
                  |L15.44|
00002c  4620              MOV      r0,r4                 ;608
00002e  f7fffffe          BL       write_buffer_record_release
000032  4628              MOV      r0,r5                 ;610
000034  e7f0              B        |L15.24|
;;;612    
                          ENDP


                          AREA ||i.pdb_write_buf_store||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_store PROC
;;;653    
;;;654    ret_code_t pdb_write_buf_store(pm_peer_id_t      peer_id,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;655                                   pm_peer_data_id_t data_id)
;;;656    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
;;;657        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;658    
;;;659        VERIFY_DATA_ID_WRITE_BUF(data_id);
000008  bf00              NOP      
00000a  2e07              CMP      r6,#7
00000c  d004              BEQ      |L16.24|
00000e  2e08              CMP      r6,#8
000010  d002              BEQ      |L16.24|
000012  2007              MOVS     r0,#7
                  |L16.20|
;;;660    
;;;661        ret_code_t            err_code = NRF_SUCCESS;
;;;662        pdb_buffer_record_t * p_write_buffer_record;
;;;663        uint8_t             * p_buffer_memory;
;;;664        pm_peer_data_const_t  peer_data = {.data_id = data_id};
;;;665    
;;;666    
;;;667        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;668    
;;;669        if (p_write_buffer_record == NULL)
;;;670        {
;;;671            return NRF_ERROR_NOT_FOUND;
;;;672        }
;;;673    
;;;674        if (p_write_buffer_record->store_requested)
;;;675        {
;;;676            return NRF_SUCCESS;
;;;677        }
;;;678    
;;;679        p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, p_write_buffer_record->buffer_block_id);
;;;680    
;;;681        if (p_buffer_memory == NULL)
;;;682        {
;;;683            return NRF_ERROR_INTERNAL;
;;;684        }
;;;685    
;;;686        peer_data_const_point_to_buffer(&peer_data, data_id, p_buffer_memory, p_write_buffer_record->n_bufs);
;;;687    
;;;688        write_buf_length_words_set(&peer_data);
;;;689    
;;;690        err_code = pds_peer_data_store(peer_id,
;;;691                                       &peer_data,
;;;692                                       p_write_buffer_record->prepare_token,
;;;693                                       &p_write_buffer_record->store_token);
;;;694    
;;;695        if (p_write_buffer_record->store_busy && p_write_buffer_record->store_flash_full)
;;;696        {
;;;697            m_n_writes--;
;;;698        }
;;;699    
;;;700        if (err_code == NRF_SUCCESS)
;;;701        {
;;;702            p_write_buffer_record->store_requested  = true;
;;;703            p_write_buffer_record->store_busy       = false;
;;;704            p_write_buffer_record->store_flash_full = false;
;;;705        }
;;;706        else
;;;707        {
;;;708            if (err_code == NRF_ERROR_BUSY)
;;;709            {
;;;710                m_n_writes++;
;;;711                p_write_buffer_record->store_busy       = true;
;;;712                p_write_buffer_record->store_flash_full = false;
;;;713                err_code = NRF_SUCCESS;
;;;714            }
;;;715            else if (err_code == NRF_ERROR_STORAGE_FULL)
;;;716            {
;;;717                m_n_writes++;
;;;718                p_write_buffer_record->store_busy       = false;
;;;719                p_write_buffer_record->store_flash_full = true;
;;;720            }
;;;721            else if (err_code != NRF_ERROR_INVALID_PARAM)
;;;722            {
;;;723                err_code = NRF_ERROR_INTERNAL;
;;;724            }
;;;725        }
;;;726    
;;;727        return err_code;
;;;728    }
000014  e8bd81fc          POP      {r2-r8,pc}
                  |L16.24|
000018  bf00              NOP                            ;659
00001a  2500              MOVS     r5,#0                 ;661
00001c  2000              MOVS     r0,#0                 ;664
00001e  9000              STR      r0,[sp,#0]            ;664
000020  9001              STR      r0,[sp,#4]            ;664
000022  f88d6002          STRB     r6,[sp,#2]            ;664
000026  4631              MOV      r1,r6                 ;667
000028  4640              MOV      r0,r8                 ;667
00002a  f7fffffe          BL       write_buffer_record_find
00002e  4604              MOV      r4,r0                 ;667
000030  b90c              CBNZ     r4,|L16.54|
000032  2005              MOVS     r0,#5                 ;671
000034  e7ee              B        |L16.20|
                  |L16.54|
000036  7c60              LDRB     r0,[r4,#0x11]         ;674
000038  f0000001          AND      r0,r0,#1              ;674
00003c  b108              CBZ      r0,|L16.66|
00003e  2000              MOVS     r0,#0                 ;676
000040  e7e8              B        |L16.20|
                  |L16.66|
000042  7c21              LDRB     r1,[r4,#0x10]         ;679
000044  482d              LDR      r0,|L16.252|
000046  f7fffffe          BL       pm_buffer_ptr_get
00004a  4607              MOV      r7,r0                 ;679
00004c  b90f              CBNZ     r7,|L16.82|
00004e  2003              MOVS     r0,#3                 ;683
000050  e7e0              B        |L16.20|
                  |L16.82|
000052  463a              MOV      r2,r7                 ;686
000054  4631              MOV      r1,r6                 ;686
000056  4668              MOV      r0,sp                 ;686
000058  68e3              LDR      r3,[r4,#0xc]          ;686
00005a  f7fffffe          BL       peer_data_const_point_to_buffer
00005e  4668              MOV      r0,sp                 ;688
000060  f7fffffe          BL       write_buf_length_words_set
000064  f1040308          ADD      r3,r4,#8              ;690
000068  4669              MOV      r1,sp                 ;690
00006a  4640              MOV      r0,r8                 ;690
00006c  6862              LDR      r2,[r4,#4]            ;690
00006e  f7fffffe          BL       pds_peer_data_store
000072  4605              MOV      r5,r0                 ;690
000074  7c60              LDRB     r0,[r4,#0x11]         ;695
000076  f3c00080          UBFX     r0,r0,#2,#1           ;695
00007a  b140              CBZ      r0,|L16.142|
00007c  7c60              LDRB     r0,[r4,#0x11]         ;695
00007e  f3c00040          UBFX     r0,r0,#1,#1           ;695
000082  b120              CBZ      r0,|L16.142|
000084  481e              LDR      r0,|L16.256|
000086  6800              LDR      r0,[r0,#0]            ;697  ; m_n_writes
000088  1e40              SUBS     r0,r0,#1              ;697
00008a  491d              LDR      r1,|L16.256|
00008c  6008              STR      r0,[r1,#0]            ;697  ; m_n_writes
                  |L16.142|
00008e  b96d              CBNZ     r5,|L16.172|
000090  7c60              LDRB     r0,[r4,#0x11]         ;702
000092  f0200001          BIC      r0,r0,#1              ;702
000096  1c40              ADDS     r0,r0,#1              ;702
000098  7460              STRB     r0,[r4,#0x11]         ;702
00009a  7c60              LDRB     r0,[r4,#0x11]         ;703
00009c  f0200004          BIC      r0,r0,#4              ;703
0000a0  7460              STRB     r0,[r4,#0x11]         ;703
0000a2  7c60              LDRB     r0,[r4,#0x11]         ;704
0000a4  f0200002          BIC      r0,r0,#2              ;704
0000a8  7460              STRB     r0,[r4,#0x11]         ;704
0000aa  e025              B        |L16.248|
                  |L16.172|
0000ac  2d11              CMP      r5,#0x11              ;708
0000ae  d10f              BNE      |L16.208|
0000b0  4813              LDR      r0,|L16.256|
0000b2  6800              LDR      r0,[r0,#0]            ;710  ; m_n_writes
0000b4  1c40              ADDS     r0,r0,#1              ;710
0000b6  4912              LDR      r1,|L16.256|
0000b8  6008              STR      r0,[r1,#0]            ;710  ; m_n_writes
0000ba  7c60              LDRB     r0,[r4,#0x11]         ;711
0000bc  f0200004          BIC      r0,r0,#4              ;711
0000c0  1d00              ADDS     r0,r0,#4              ;711
0000c2  7460              STRB     r0,[r4,#0x11]         ;711
0000c4  7c60              LDRB     r0,[r4,#0x11]         ;712
0000c6  f0200002          BIC      r0,r0,#2              ;712
0000ca  7460              STRB     r0,[r4,#0x11]         ;712
0000cc  2500              MOVS     r5,#0                 ;713
0000ce  e013              B        |L16.248|
                  |L16.208|
0000d0  2d86              CMP      r5,#0x86              ;715
0000d2  d10e              BNE      |L16.242|
0000d4  480a              LDR      r0,|L16.256|
0000d6  6800              LDR      r0,[r0,#0]            ;717  ; m_n_writes
0000d8  1c40              ADDS     r0,r0,#1              ;717
0000da  4909              LDR      r1,|L16.256|
0000dc  6008              STR      r0,[r1,#0]            ;717  ; m_n_writes
0000de  7c60              LDRB     r0,[r4,#0x11]         ;718
0000e0  f0200004          BIC      r0,r0,#4              ;718
0000e4  7460              STRB     r0,[r4,#0x11]         ;718
0000e6  7c60              LDRB     r0,[r4,#0x11]         ;719
0000e8  f0200002          BIC      r0,r0,#2              ;719
0000ec  1c80              ADDS     r0,r0,#2              ;719
0000ee  7460              STRB     r0,[r4,#0x11]         ;719
0000f0  e002              B        |L16.248|
                  |L16.242|
0000f2  2d07              CMP      r5,#7                 ;721
0000f4  d000              BEQ      |L16.248|
0000f6  2503              MOVS     r5,#3                 ;723
                  |L16.248|
0000f8  4628              MOV      r0,r5                 ;727
0000fa  e78b              B        |L16.20|
;;;729    
                          ENDP

                  |L16.252|
                          DCD      m_write_buffer
                  |L16.256|
                          DCD      m_n_writes

                          AREA ||i.pdb_write_buf_store_prepare||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_store_prepare PROC
;;;613    
;;;614    ret_code_t pdb_write_buf_store_prepare(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;615    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
;;;616        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;617    
;;;618        VERIFY_DATA_ID_WRITE_BUF(data_id);
000008  bf00              NOP      
00000a  2d07              CMP      r5,#7
00000c  d004              BEQ      |L17.24|
00000e  2d08              CMP      r5,#8
000010  d002              BEQ      |L17.24|
000012  2007              MOVS     r0,#7
                  |L17.20|
;;;619    
;;;620        ret_code_t            err_code = NRF_SUCCESS;
;;;621        pdb_buffer_record_t * p_write_buffer_record;
;;;622        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;623    
;;;624        if (p_write_buffer_record == NULL)
;;;625        {
;;;626            return NRF_ERROR_NOT_FOUND;
;;;627        }
;;;628    
;;;629        if (p_write_buffer_record->prepare_token == PDS_PREPARE_TOKEN_INVALID)
;;;630        {
;;;631            uint8_t * p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, p_write_buffer_record->buffer_block_id);
;;;632            pm_peer_data_const_t peer_data = {.data_id = data_id};
;;;633    
;;;634            if (p_buffer_memory == NULL)
;;;635            {
;;;636                return NRF_ERROR_INTERNAL;
;;;637            }
;;;638    
;;;639            peer_data_const_point_to_buffer(&peer_data, data_id, p_buffer_memory, p_write_buffer_record->n_bufs);
;;;640    
;;;641            write_buf_length_words_set(&peer_data);
;;;642    
;;;643            err_code = pds_space_reserve(&peer_data, &p_write_buffer_record->prepare_token);
;;;644            if (err_code == NRF_ERROR_INVALID_LENGTH)
;;;645            {
;;;646                return NRF_ERROR_INTERNAL;
;;;647            }
;;;648        }
;;;649    
;;;650        return err_code;
;;;651    }
000014  e8bd81fc          POP      {r2-r8,pc}
                  |L17.24|
000018  bf00              NOP                            ;618
00001a  2600              MOVS     r6,#0                 ;620
00001c  4629              MOV      r1,r5                 ;622
00001e  4640              MOV      r0,r8                 ;622
000020  f7fffffe          BL       write_buffer_record_find
000024  4604              MOV      r4,r0                 ;622
000026  b90c              CBNZ     r4,|L17.44|
000028  2005              MOVS     r0,#5                 ;626
00002a  e7f3              B        |L17.20|
                  |L17.44|
00002c  6860              LDR      r0,[r4,#4]            ;629
00002e  b9f8              CBNZ     r0,|L17.112|
000030  7c21              LDRB     r1,[r4,#0x10]         ;631
000032  4810              LDR      r0,|L17.116|
000034  f7fffffe          BL       pm_buffer_ptr_get
000038  4607              MOV      r7,r0                 ;631
00003a  2000              MOVS     r0,#0                 ;632
00003c  9000              STR      r0,[sp,#0]            ;632
00003e  9001              STR      r0,[sp,#4]            ;632
000040  f88d5002          STRB     r5,[sp,#2]            ;632
000044  b90f              CBNZ     r7,|L17.74|
000046  2003              MOVS     r0,#3                 ;636
000048  e7e4              B        |L17.20|
                  |L17.74|
00004a  463a              MOV      r2,r7                 ;639
00004c  4629              MOV      r1,r5                 ;639
00004e  4668              MOV      r0,sp                 ;639
000050  68e3              LDR      r3,[r4,#0xc]          ;639
000052  f7fffffe          BL       peer_data_const_point_to_buffer
000056  4668              MOV      r0,sp                 ;641
000058  f7fffffe          BL       write_buf_length_words_set
00005c  1d21              ADDS     r1,r4,#4              ;643
00005e  4668              MOV      r0,sp                 ;643
000060  f7fffffe          BL       pds_space_reserve
000064  4606              MOV      r6,r0                 ;643
000066  2e09              CMP      r6,#9                 ;644
000068  d101              BNE      |L17.110|
00006a  2003              MOVS     r0,#3                 ;646
00006c  e7d2              B        |L17.20|
                  |L17.110|
00006e  bf00              NOP                            ;648
                  |L17.112|
000070  4630              MOV      r0,r6                 ;650
000072  e7cf              B        |L17.20|
;;;652    
                          ENDP

                  |L17.116|
                          DCD      m_write_buffer

                          AREA ||i.peer_data_const_point_to_buffer||, CODE, READONLY, ALIGN=1

                  peer_data_const_point_to_buffer PROC
;;;472    
;;;473    static void peer_data_const_point_to_buffer(pm_peer_data_const_t * p_peer_data, pm_peer_data_id_t data_id,  uint8_t * p_buffer_memory, uint32_t n_bufs)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;474    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
;;;475        peer_data_point_to_buffer((pm_peer_data_t*)p_peer_data, data_id, p_buffer_memory, n_bufs);
00000c  b2a3              UXTH     r3,r4
00000e  463a              MOV      r2,r7
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       peer_data_point_to_buffer
;;;476    }
000018  e8bd81f0          POP      {r4-r8,pc}
;;;477    
                          ENDP


                          AREA ||i.peer_data_point_to_buffer||, CODE, READONLY, ALIGN=1

                  peer_data_point_to_buffer PROC
;;;462    
;;;463    static void peer_data_point_to_buffer(pm_peer_data_t * p_peer_data, pm_peer_data_id_t data_id, uint8_t * p_buffer_memory, uint16_t n_bufs)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
;;;465        uint16_t n_bytes = n_bufs * PDB_WRITE_BUF_SIZE;
000002  eb030583          ADD      r5,r3,r3,LSL #2
000006  f64f76ff          MOV      r6,#0xffff
00000a  ea061405          AND      r4,r6,r5,LSL #4
;;;466        p_peer_data->data_id    = data_id;
00000e  7081              STRB     r1,[r0,#2]
;;;467    
;;;468        p_peer_data->p_all_data   = (pm_peer_data_bonding_t *)p_buffer_memory;
000010  6042              STR      r2,[r0,#4]
;;;469        p_peer_data->length_words = BYTES_TO_WORDS(n_bytes);
000012  1ce5              ADDS     r5,r4,#3
000014  10ad              ASRS     r5,r5,#2
000016  8005              STRH     r5,[r0,#0]
;;;470    }
000018  bd70              POP      {r4-r6,pc}
;;;471    
                          ENDP


                          AREA ||i.write_buf_length_words_set||, CODE, READONLY, ALIGN=1

                  write_buf_length_words_set PROC
;;;478    
;;;479    static void write_buf_length_words_set(pm_peer_data_const_t * p_peer_data)
000000  7881              LDRB     r1,[r0,#2]
;;;480    {
;;;481        switch (p_peer_data->data_id)
000002  2901              CMP      r1,#1
000004  d009              BEQ      |L20.26|
000006  2906              CMP      r1,#6
000008  d00a              BEQ      |L20.32|
00000a  2907              CMP      r1,#7
00000c  d002              BEQ      |L20.20|
00000e  2908              CMP      r1,#8
000010  d10f              BNE      |L20.50|
000012  e008              B        |L20.38|
                  |L20.20|
;;;482        {
;;;483            case PM_PEER_DATA_ID_BONDING:
;;;484                p_peer_data->length_words = PM_BONDING_DATA_N_WORDS();
000014  2114              MOVS     r1,#0x14
000016  8001              STRH     r1,[r0,#0]
;;;485                break;
000018  e00c              B        |L20.52|
                  |L20.26|
;;;486            case PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING:
;;;487                p_peer_data->length_words = PM_SC_STATE_N_WORDS();
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;488                break;
00001e  e009              B        |L20.52|
                  |L20.32|
;;;489            case PM_PEER_DATA_ID_PEER_RANK:
;;;490                p_peer_data->length_words = PM_USAGE_INDEX_N_WORDS();
000020  2101              MOVS     r1,#1
000022  8001              STRH     r1,[r0,#0]
;;;491                break;
000024  e006              B        |L20.52|
                  |L20.38|
;;;492            case PM_PEER_DATA_ID_GATT_LOCAL:
;;;493                p_peer_data->length_words = PM_LOCAL_DB_N_WORDS(p_peer_data->p_local_gatt_db->len);
000026  6841              LDR      r1,[r0,#4]
000028  8889              LDRH     r1,[r1,#4]
00002a  3109              ADDS     r1,r1,#9
00002c  0889              LSRS     r1,r1,#2
00002e  8001              STRH     r1,[r0,#0]
;;;494                break;
000030  e000              B        |L20.52|
                  |L20.50|
;;;495            default:
;;;496                // No action needed.
;;;497                break;
000032  bf00              NOP      
                  |L20.52|
000034  bf00              NOP                            ;485
;;;498        }
;;;499    }
000036  4770              BX       lr
;;;500    
                          ENDP


                          AREA ||i.write_buffer_record_find||, CODE, READONLY, ALIGN=1

                  write_buffer_record_find PROC
;;;157     */
;;;158    static pdb_buffer_record_t * write_buffer_record_find(pm_peer_id_t      peer_id,
000000  b5f8              PUSH     {r3-r7,lr}
;;;159                                                          pm_peer_data_id_t data_id)
;;;160    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;161        int index = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;162        pdb_buffer_record_t * p_record = write_buffer_record_find_next(peer_id, &index);
00000a  4669              MOV      r1,sp
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       write_buffer_record_find_next
000012  4604              MOV      r4,r0
;;;163    
;;;164        while ((p_record != NULL) && (p_record->data_id != data_id))
000014  e007              B        |L21.38|
                  |L21.22|
;;;165        {
;;;166            index++;
000016  9800              LDR      r0,[sp,#0]
000018  1c40              ADDS     r0,r0,#1
00001a  9000              STR      r0,[sp,#0]
;;;167            p_record = write_buffer_record_find_next(peer_id, &index);
00001c  4669              MOV      r1,sp
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       write_buffer_record_find_next
000024  4604              MOV      r4,r0
                  |L21.38|
000026  b114              CBZ      r4,|L21.46|
000028  78a0              LDRB     r0,[r4,#2]            ;164
00002a  42a8              CMP      r0,r5                 ;164
00002c  d1f3              BNE      |L21.22|
                  |L21.46|
;;;168        }
;;;169    
;;;170        return p_record;
00002e  4620              MOV      r0,r4
;;;171    }
000030  bdf8              POP      {r3-r7,pc}
;;;172    
                          ENDP


                          AREA ||i.write_buffer_record_find_next||, CODE, READONLY, ALIGN=2

                  write_buffer_record_find_next PROC
;;;137     */
;;;138    static pdb_buffer_record_t * write_buffer_record_find_next(pm_peer_id_t peer_id, int * p_index)
000000  b510              PUSH     {r4,lr}
;;;139    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;140        for (uint32_t i = *p_index; i < PM_FLASH_BUFFERS; i++)
000006  6819              LDR      r1,[r3,#0]
000008  e00c              B        |L22.36|
                  |L22.10|
;;;141        {
;;;142            if ((m_write_buffer_records[i].peer_id == peer_id))
00000a  eb010081          ADD      r0,r1,r1,LSL #2
00000e  4c07              LDR      r4,|L22.44|
000010  f8340020          LDRH     r0,[r4,r0,LSL #2]
000014  4290              CMP      r0,r2
000016  d104              BNE      |L22.34|
;;;143            {
;;;144                return &m_write_buffer_records[i];
000018  eb010081          ADD      r0,r1,r1,LSL #2
00001c  eb040080          ADD      r0,r4,r0,LSL #2
                  |L22.32|
;;;145            }
;;;146        }
;;;147        return NULL;
;;;148    }
000020  bd10              POP      {r4,pc}
                  |L22.34|
000022  1c49              ADDS     r1,r1,#1              ;140
                  |L22.36|
000024  2908              CMP      r1,#8                 ;140
000026  d3f0              BCC      |L22.10|
000028  2000              MOVS     r0,#0                 ;147
00002a  e7f9              B        |L22.32|
;;;149    
                          ENDP

                  |L22.44|
                          DCD      m_write_buffer_records

                          AREA ||i.write_buffer_record_find_unused||, CODE, READONLY, ALIGN=1

                  write_buffer_record_find_unused PROC
;;;177     */
;;;178    static pdb_buffer_record_t * write_buffer_record_find_unused(void)
000000  b510              PUSH     {r4,lr}
;;;179    {
;;;180        return write_buffer_record_find(PM_PEER_ID_INVALID, PM_PEER_DATA_ID_INVALID);
000002  21ff              MOVS     r1,#0xff
000004  f64f70ff          MOV      r0,#0xffff
000008  f7fffffe          BL       write_buffer_record_find
;;;181    }
00000c  bd10              POP      {r4,pc}
;;;182    
                          ENDP


                          AREA ||i.write_buffer_record_get||, CODE, READONLY, ALIGN=1

                  write_buffer_record_get PROC
;;;208     */
;;;209    static void write_buffer_record_get(pdb_buffer_record_t ** pp_write_buffer_record, pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b570              PUSH     {r4-r6,lr}
;;;210    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;211        if (pp_write_buffer_record == NULL)
000008  b904              CBNZ     r4,|L24.12|
                  |L24.10|
;;;212        {
;;;213            return;
;;;214        }
;;;215        *pp_write_buffer_record = write_buffer_record_find_unused();
;;;216        if (*pp_write_buffer_record == NULL)
;;;217        {
;;;218            // This also means the buffer is full.
;;;219            return;
;;;220        }
;;;221        (*pp_write_buffer_record)->peer_id = peer_id;
;;;222        (*pp_write_buffer_record)->data_id = data_id;
;;;223    }
00000a  bd70              POP      {r4-r6,pc}
                  |L24.12|
00000c  f7fffffe          BL       write_buffer_record_find_unused
000010  6020              STR      r0,[r4,#0]            ;215
000012  6820              LDR      r0,[r4,#0]            ;216
000014  b900              CBNZ     r0,|L24.24|
000016  e7f8              B        |L24.10|
                  |L24.24|
000018  6820              LDR      r0,[r4,#0]            ;221
00001a  8005              STRH     r5,[r0,#0]            ;221
00001c  6820              LDR      r0,[r4,#0]            ;222
00001e  7086              STRB     r6,[r0,#2]            ;222
000020  bf00              NOP      
000022  e7f2              B        |L24.10|
;;;224    
                          ENDP


                          AREA ||i.write_buffer_record_invalidate||, CODE, READONLY, ALIGN=1

                  write_buffer_record_invalidate PROC
;;;116     */
;;;117    static void write_buffer_record_invalidate(pdb_buffer_record_t * p_record)
000000  f64f71ff          MOV      r1,#0xffff
;;;118    {
;;;119        p_record->peer_id          = PM_PEER_ID_INVALID;
000004  8001              STRH     r1,[r0,#0]
;;;120        p_record->data_id          = PM_PEER_DATA_ID_INVALID;
000006  21ff              MOVS     r1,#0xff
000008  7081              STRB     r1,[r0,#2]
;;;121        p_record->buffer_block_id  = PM_BUFFER_INVALID_ID;
00000a  7401              STRB     r1,[r0,#0x10]
;;;122        p_record->store_busy       = false;
00000c  7c41              LDRB     r1,[r0,#0x11]
00000e  f0210104          BIC      r1,r1,#4
000012  7441              STRB     r1,[r0,#0x11]
;;;123        p_record->store_flash_full = false;
000014  7c41              LDRB     r1,[r0,#0x11]
000016  f0210102          BIC      r1,r1,#2
00001a  7441              STRB     r1,[r0,#0x11]
;;;124        p_record->store_requested  = false;
00001c  7c41              LDRB     r1,[r0,#0x11]
00001e  f0210101          BIC      r1,r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;125        p_record->n_bufs           = 0;
000024  2100              MOVS     r1,#0
000026  60c1              STR      r1,[r0,#0xc]
;;;126        p_record->prepare_token    = PDS_PREPARE_TOKEN_INVALID;
000028  6041              STR      r1,[r0,#4]
;;;127        p_record->store_token      = PM_STORE_TOKEN_INVALID;
00002a  6081              STR      r1,[r0,#8]
;;;128    }
00002c  4770              BX       lr
;;;129    
                          ENDP


                          AREA ||i.write_buffer_record_release||, CODE, READONLY, ALIGN=2

                  write_buffer_record_release PROC
;;;191     */
;;;192    static void write_buffer_record_release(pdb_buffer_record_t * p_write_buffer_record)
000000  b570              PUSH     {r4-r6,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194        for (uint32_t i = 0; i < p_write_buffer_record->n_bufs; i++)
000004  2500              MOVS     r5,#0
000006  e006              B        |L26.22|
                  |L26.8|
;;;195        {
;;;196            pm_buffer_release(&m_write_buffer, p_write_buffer_record->buffer_block_id + i);
000008  7c20              LDRB     r0,[r4,#0x10]
00000a  4428              ADD      r0,r0,r5
00000c  b2c1              UXTB     r1,r0
00000e  4805              LDR      r0,|L26.36|
000010  f7fffffe          BL       pm_buffer_release
000014  1c6d              ADDS     r5,r5,#1              ;194
                  |L26.22|
000016  68e0              LDR      r0,[r4,#0xc]          ;194
000018  42a8              CMP      r0,r5                 ;194
00001a  d8f5              BHI      |L26.8|
;;;197        }
;;;198    
;;;199        write_buffer_record_invalidate(p_write_buffer_record);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       write_buffer_record_invalidate
;;;200    }
000022  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP

                  |L26.36|
                          DCD      m_write_buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_write_buffer
                          %        16
                  m_write_buffer_records
                          %        160
                  buffer_memory
                          %        640

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pm_pdb_evt_handler
                          DCD      im_pdb_evt_handler
                          DCD      sm_pdb_evt_handler
                          DCD      smd_pdb_evt_handler
                          DCD      gscm_pdb_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  m_n_writes
                          DCD      0x00000000
                  mutex_memory
000008  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\peer_database.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_peer_database_c_80556694____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_peer_database_c_80556694____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_peer_database_c_80556694____REVSH|
#line 402
|__asm___15_peer_database_c_80556694____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_peer_database_c_80556694____RRX|
#line 587
|__asm___15_peer_database_c_80556694____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
