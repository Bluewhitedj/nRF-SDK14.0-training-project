; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\peer_data_storage.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\peer_data_storage.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\peer_data_storage.crf ..\..\..\..\..\..\components\ble\peer_manager\peer_data_storage.c]
                          THUMB

                          AREA ||i.fds_evt_handler||, CODE, READONLY, ALIGN=2

                  fds_evt_handler PROC
;;;249    
;;;250    static void fds_evt_handler(fds_evt_t const * const p_fds_evt)
000000  b51f              PUSH     {r0-r4,lr}
;;;251    {
000002  4604              MOV      r4,r0
;;;252        pds_evt_t pds_evt;
;;;253    
;;;254        pds_evt.result = (p_fds_evt->result == FDS_SUCCESS);
000004  6860              LDR      r0,[r4,#4]
000006  b908              CBNZ     r0,|L1.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L1.14|
                  |L1.12|
00000c  2000              MOVS     r0,#0
                  |L1.14|
00000e  9003              STR      r0,[sp,#0xc]
;;;255    
;;;256        switch (p_fds_evt->id)
000010  7820              LDRB     r0,[r4,#0]
000012  2806              CMP      r0,#6
000014  d27b              BCS      |L1.270|
000016  e8dff000          TBB      [pc,r0]
00001a  8203              DCB      0x82,0x03
00001c  04304f7b          DCB      0x04,0x30,0x4f,0x7b
;;;257        {
;;;258            case FDS_EVT_WRITE:
;;;259            case FDS_EVT_UPDATE:
000020  bf00              NOP      
;;;260                if (   file_id_within_pm_range(p_fds_evt->write.file_id)
000022  89a0              LDRH     r0,[r4,#0xc]
000024  f7fffffe          BL       file_id_within_pm_range
000028  b918              CBNZ     r0,|L1.50|
;;;261                    || record_key_within_pm_range(p_fds_evt->write.record_key))
00002a  89e0              LDRH     r0,[r4,#0xe]
00002c  f7fffffe          BL       record_key_within_pm_range
000030  b310              CBZ      r0,|L1.120|
                  |L1.50|
;;;262                {
;;;263                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->write.file_id);
000032  89a0              LDRH     r0,[r4,#0xc]
000034  f7fffffe          BL       file_id_to_peer_id
000038  f8ad0002          STRH     r0,[sp,#2]
;;;264                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->write.record_key);
00003c  89e0              LDRH     r0,[r4,#0xe]
00003e  f7fffffe          BL       record_key_to_peer_data_id
000042  f88d0004          STRB     r0,[sp,#4]
;;;265    
;;;266                    if (p_fds_evt->id == FDS_EVT_WRITE)
000046  7820              LDRB     r0,[r4,#0]
000048  2801              CMP      r0,#1
00004a  d107              BNE      |L1.92|
;;;267                    {
;;;268                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_STORED :
00004c  6860              LDR      r0,[r4,#4]
00004e  b908              CBNZ     r0,|L1.84|
000050  2000              MOVS     r0,#0
000052  e000              B        |L1.86|
                  |L1.84|
;;;269                                                                              PDS_EVT_ERROR_STORE;
000054  2003              MOVS     r0,#3
                  |L1.86|
000056  f88d0000          STRB     r0,[sp,#0]
00005a  e006              B        |L1.106|
                  |L1.92|
;;;270                    }
;;;271                    else
;;;272                    {
;;;273                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_UPDATED :
00005c  6860              LDR      r0,[r4,#4]
00005e  b908              CBNZ     r0,|L1.100|
000060  2001              MOVS     r0,#1
000062  e000              B        |L1.102|
                  |L1.100|
;;;274                                                                              PDS_EVT_ERROR_UPDATE;
000064  2004              MOVS     r0,#4
                  |L1.102|
000066  f88d0000          STRB     r0,[sp,#0]
                  |L1.106|
;;;275                    }
;;;276    
;;;277                    pds_evt.result      = p_fds_evt->result;
00006a  6860              LDR      r0,[r4,#4]
00006c  9003              STR      r0,[sp,#0xc]
;;;278                    pds_evt.store_token = p_fds_evt->write.record_id;
00006e  68a0              LDR      r0,[r4,#8]
000070  9002              STR      r0,[sp,#8]
;;;279    
;;;280                    pds_evt_send(&pds_evt);
000072  4668              MOV      r0,sp
000074  f7fffffe          BL       pds_evt_send
                  |L1.120|
;;;281                }
;;;282                break;
000078  e052              B        |L1.288|
;;;283    
;;;284            case FDS_EVT_DEL_RECORD:
;;;285                if (   file_id_within_pm_range(p_fds_evt->del.file_id)
00007a  89a0              LDRH     r0,[r4,#0xc]
00007c  f7fffffe          BL       file_id_within_pm_range
000080  b918              CBNZ     r0,|L1.138|
;;;286                    || record_key_within_pm_range(p_fds_evt->del.record_key))
000082  89e0              LDRH     r0,[r4,#0xe]
000084  f7fffffe          BL       record_key_within_pm_range
000088  b1a8              CBZ      r0,|L1.182|
                  |L1.138|
;;;287                {
;;;288                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
00008a  89a0              LDRH     r0,[r4,#0xc]
00008c  f7fffffe          BL       file_id_to_peer_id
000090  f8ad0002          STRH     r0,[sp,#2]
;;;289                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
000094  89e0              LDRH     r0,[r4,#0xe]
000096  f7fffffe          BL       record_key_to_peer_data_id
00009a  f88d0004          STRB     r0,[sp,#4]
;;;290    
;;;291                    pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_CLEARED :
00009e  6860              LDR      r0,[r4,#4]
0000a0  b908              CBNZ     r0,|L1.166|
0000a2  2002              MOVS     r0,#2
0000a4  e000              B        |L1.168|
                  |L1.166|
;;;292                                                                          PDS_EVT_ERROR_CLEAR;
0000a6  2005              MOVS     r0,#5
                  |L1.168|
0000a8  f88d0000          STRB     r0,[sp,#0]
;;;293    
;;;294                    pds_evt.store_token = p_fds_evt->del.record_id;
0000ac  68a0              LDR      r0,[r4,#8]
0000ae  9002              STR      r0,[sp,#8]
;;;295    
;;;296                    pds_evt_send(&pds_evt);
0000b0  4668              MOV      r0,sp
0000b2  f7fffffe          BL       pds_evt_send
                  |L1.182|
;;;297                }
;;;298                break;
0000b6  e033              B        |L1.288|
;;;299    
;;;300            case FDS_EVT_DEL_FILE:
;;;301                {
;;;302                    if (    file_id_within_pm_range(p_fds_evt->del.file_id)
0000b8  89a0              LDRH     r0,[r4,#0xc]
0000ba  f7fffffe          BL       file_id_within_pm_range
0000be  b328              CBZ      r0,|L1.268|
;;;303                        && (p_fds_evt->del.record_key == FDS_RECORD_KEY_DIRTY))
0000c0  89e0              LDRH     r0,[r4,#0xe]
0000c2  bb18              CBNZ     r0,|L1.268|
;;;304                    {
;;;305                        pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
0000c4  89a0              LDRH     r0,[r4,#0xc]
0000c6  f7fffffe          BL       file_id_to_peer_id
0000ca  f8ad0002          STRH     r0,[sp,#2]
;;;306                        pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
0000ce  89e0              LDRH     r0,[r4,#0xe]
0000d0  f7fffffe          BL       record_key_to_peer_data_id
0000d4  f88d0004          STRB     r0,[sp,#4]
;;;307    
;;;308                        pds_evt.data_id = PM_PEER_DATA_ID_INVALID;
0000d8  20ff              MOVS     r0,#0xff
0000da  f88d0004          STRB     r0,[sp,#4]
;;;309                        if (p_fds_evt->result == FDS_SUCCESS)
0000de  6860              LDR      r0,[r4,#4]
0000e0  b938              CBNZ     r0,|L1.242|
;;;310                        {
;;;311                            pds_evt.evt_id = PDS_EVT_PEER_ID_CLEAR;
0000e2  2006              MOVS     r0,#6
0000e4  f88d0000          STRB     r0,[sp,#0]
;;;312                            peer_id_free(pds_evt.peer_id);
0000e8  f8bd0002          LDRH     r0,[sp,#2]
0000ec  f7fffffe          BL       peer_id_free
0000f0  e002              B        |L1.248|
                  |L1.242|
;;;313                        }
;;;314                        else
;;;315                        {
;;;316                            pds_evt.evt_id = PDS_EVT_ERROR_PEER_ID_CLEAR;
0000f2  2007              MOVS     r0,#7
0000f4  f88d0000          STRB     r0,[sp,#0]
                  |L1.248|
;;;317                        }
;;;318    
;;;319                        m_peer_delete_queued  = false;
0000f8  2000              MOVS     r0,#0
0000fa  490e              LDR      r1,|L1.308|
0000fc  7008              STRB     r0,[r1,#0]
;;;320                        m_peer_delete_ongoing = false;
0000fe  490e              LDR      r1,|L1.312|
000100  7008              STRB     r0,[r1,#0]
;;;321    
;;;322                        peer_data_delete();
000102  f7fffffe          BL       peer_data_delete
;;;323    
;;;324                        pds_evt_send(&pds_evt);
000106  4668              MOV      r0,sp
000108  f7fffffe          BL       pds_evt_send
                  |L1.268|
;;;325                    }
;;;326                }
;;;327                break;
00010c  e008              B        |L1.288|
                  |L1.270|
00010e  e006              B        |L1.286|
;;;328    
;;;329            case FDS_EVT_GC:
;;;330                pds_evt.evt_id = PDS_EVT_COMPRESSED;
000110  2008              MOVS     r0,#8
000112  f88d0000          STRB     r0,[sp,#0]
;;;331                pds_evt_send(&pds_evt);
000116  4668              MOV      r0,sp
000118  f7fffffe          BL       pds_evt_send
;;;332                break;
00011c  e000              B        |L1.288|
                  |L1.286|
;;;333    
;;;334            default:
;;;335                break;
00011e  bf00              NOP      
                  |L1.288|
000120  bf00              NOP                            ;282
;;;336        }
;;;337    
;;;338        if (m_peer_delete_queued)
000122  4804              LDR      r0,|L1.308|
000124  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_queued
000126  b120              CBZ      r0,|L1.306|
;;;339        {
;;;340            m_peer_delete_queued  = false;
000128  2000              MOVS     r0,#0
00012a  4902              LDR      r1,|L1.308|
00012c  7008              STRB     r0,[r1,#0]
;;;341            peer_data_delete();
00012e  f7fffffe          BL       peer_data_delete
                  |L1.306|
;;;342        }
;;;343    }
000132  bd1f              POP      {r0-r4,pc}
;;;344    
                          ENDP

                  |L1.308|
                          DCD      m_peer_delete_queued
                  |L1.312|
                          DCD      m_peer_delete_ongoing

                          AREA ||i.file_id_to_peer_id||, CODE, READONLY, ALIGN=1

                  file_id_to_peer_id PROC
;;;100    // Function to convert peer data id to type id.
;;;101    static pm_peer_id_t file_id_to_peer_id(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;102    {
;;;103        return (pm_peer_id_t)(file_id + FILE_ID_TO_PEER_ID);
000002  f5a14040          SUB      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;104    }
000008  4770              BX       lr
;;;105    
                          ENDP


                          AREA ||i.file_id_within_pm_range||, CODE, READONLY, ALIGN=1

                  file_id_within_pm_range PROC
;;;121    // Function for checking whether a file ID is relevant for the Peer Manager.
;;;122    static bool file_id_within_pm_range(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;123    {
;;;124        return ((PDS_FIRST_RESERVED_FILE_ID <= file_id)
000002  f5b14f40          CMP      r1,#0xc000
000006  db05              BLT      |L3.20|
;;;125             && (file_id <= PDS_LAST_RESERVED_FILE_ID));
000008  f64f70fe          MOV      r0,#0xfffe
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L3.20|
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;126    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;125
000016  e7fc              B        |L3.18|
;;;127    
                          ENDP


                          AREA ||i.pds_evt_send||, CODE, READONLY, ALIGN=2

                  pds_evt_send PROC
;;;83     // Function for dispatching events to all registered event handlers.
;;;84     static void pds_evt_send(pds_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;85     {
000002  4605              MOV      r5,r0
;;;86         for (uint32_t i = 0; i < PDS_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L4.20|
                  |L4.8|
;;;87         {
;;;88             m_evt_handlers[i](p_event);
000008  4804              LDR      r0,|L4.28|
00000a  f8501024          LDR      r1,[r0,r4,LSL #2]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;86
                  |L4.20|
000014  2c00              CMP      r4,#0                 ;86
000016  d0f7              BEQ      |L4.8|
;;;89         }
;;;90     }
000018  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      m_evt_handlers

                          AREA ||i.pds_init||, CODE, READONLY, ALIGN=2

                  pds_init PROC
;;;345    
;;;346    ret_code_t pds_init()
000000  b510              PUSH     {r4,lr}
;;;347    {
;;;348        ret_code_t ret;
;;;349    
;;;350        // Check for re-initialization if debugging.
;;;351        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;352    
;;;353        ret = fds_register(fds_evt_handler);
000002  480b              LDR      r0,|L5.48|
000004  f7fffffe          BL       fds_register
000008  4604              MOV      r4,r0
;;;354        if (ret != NRF_SUCCESS)
00000a  b10c              CBZ      r4,|L5.16|
;;;355        {
;;;356            return NRF_ERROR_INTERNAL;
00000c  2003              MOVS     r0,#3
                  |L5.14|
;;;357        }
;;;358    
;;;359        ret = fds_init();
;;;360        if (ret != NRF_SUCCESS)
;;;361        {
;;;362            return NRF_ERROR_STORAGE_FULL;
;;;363        }
;;;364    
;;;365        peer_id_init();
;;;366        peer_ids_load();
;;;367    
;;;368        m_module_initialized = true;
;;;369    
;;;370        return NRF_SUCCESS;
;;;371    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  f7fffffe          BL       fds_init
000014  4604              MOV      r4,r0                 ;359
000016  b10c              CBZ      r4,|L5.28|
000018  2086              MOVS     r0,#0x86              ;362
00001a  e7f8              B        |L5.14|
                  |L5.28|
00001c  f7fffffe          BL       peer_id_init
000020  f7fffffe          BL       peer_ids_load
000024  2001              MOVS     r0,#1                 ;368
000026  4903              LDR      r1,|L5.52|
000028  7008              STRB     r0,[r1,#0]            ;368
00002a  2000              MOVS     r0,#0                 ;370
00002c  e7ef              B        |L5.14|
;;;372    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      fds_evt_handler
                  |L5.52|
                          DCD      m_module_initialized

                          AREA ||i.pds_next_deleted_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_deleted_peer_id_get PROC
;;;673    
;;;674    pm_peer_id_t pds_next_deleted_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;675    {
000002  4604              MOV      r4,r0
;;;676        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;677        return peer_id_get_next_deleted(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_deleted
;;;678    }
00000a  bd10              POP      {r4,pc}
;;;679    
                          ENDP


                          AREA ||i.pds_next_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_peer_id_get PROC
;;;666    
;;;667    pm_peer_id_t pds_next_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;668    {
000002  4604              MOV      r4,r0
;;;669        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;670        return peer_id_get_next_used(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_used
;;;671    }
00000a  bd10              POP      {r4,pc}
;;;672    
                          ENDP


                          AREA ||i.pds_peer_count_get||, CODE, READONLY, ALIGN=1

                  pds_peer_count_get PROC
;;;680    
;;;681    uint32_t pds_peer_count_get(void)
000000  b510              PUSH     {r4,lr}
;;;682    {
;;;683        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;684        return peer_id_n_ids();
000002  f7fffffe          BL       peer_id_n_ids
;;;685    }
000006  bd10              POP      {r4,pc}
;;;686    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.pds_peer_data_delete||, CODE, READONLY, ALIGN=1

                  pds_peer_data_delete PROC
;;;607    // @note emdi: unused..
;;;608    ret_code_t pds_peer_data_delete(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b5fe              PUSH     {r1-r7,lr}
;;;609    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;610        ret_code_t        ret;
;;;611        fds_record_desc_t record_desc;
;;;612    
;;;613        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;614    
;;;615        VERIFY_PEER_ID_IN_RANGE(peer_id);
000006  bf00              NOP      
000008  2dff              CMP      r5,#0xff
00000a  dd01              BLE      |L9.16|
00000c  2007              MOVS     r0,#7
                  |L9.14|
;;;616        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;617    
;;;618        ret = peer_data_find(peer_id, data_id, &record_desc);
;;;619    
;;;620        if (ret != NRF_SUCCESS)
;;;621        {
;;;622            return NRF_ERROR_NOT_FOUND;
;;;623        }
;;;624    
;;;625        ret = fds_record_delete(&record_desc);
;;;626    
;;;627        switch (ret)
;;;628        {
;;;629            case FDS_SUCCESS:
;;;630                return NRF_SUCCESS;
;;;631    
;;;632            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;633                return NRF_ERROR_BUSY;
;;;634    
;;;635            default:
;;;636                return NRF_ERROR_INTERNAL;
;;;637        }
;;;638    }
00000e  bdfe              POP      {r1-r7,pc}
                  |L9.16|
000010  bf00              NOP                            ;615
000012  bf00              NOP                            ;616
000014  4630              MOV      r0,r6                 ;616
000016  f7fffffe          BL       peer_data_id_is_valid
00001a  b908              CBNZ     r0,|L9.32|
00001c  2007              MOVS     r0,#7                 ;616
00001e  e7f6              B        |L9.14|
                  |L9.32|
000020  bf00              NOP                            ;616
000022  466a              MOV      r2,sp                 ;618
000024  4631              MOV      r1,r6                 ;618
000026  4628              MOV      r0,r5                 ;618
000028  f7fffffe          BL       peer_data_find
00002c  4604              MOV      r4,r0                 ;618
00002e  b10c              CBZ      r4,|L9.52|
000030  2005              MOVS     r0,#5                 ;622
000032  e7ec              B        |L9.14|
                  |L9.52|
000034  4668              MOV      r0,sp                 ;625
000036  f7fffffe          BL       fds_record_delete
00003a  4604              MOV      r4,r0                 ;625
00003c  b114              CBZ      r4,|L9.68|
00003e  2c08              CMP      r4,#8                 ;627
000040  d104              BNE      |L9.76|
000042  e001              B        |L9.72|
                  |L9.68|
000044  2000              MOVS     r0,#0                 ;630
000046  e7e2              B        |L9.14|
                  |L9.72|
000048  2011              MOVS     r0,#0x11              ;633
00004a  e7e0              B        |L9.14|
                  |L9.76|
00004c  2003              MOVS     r0,#3                 ;636
00004e  e7de              B        |L9.14|
;;;639    
                          ENDP


                          AREA ||i.pds_peer_data_iterate||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate PROC
;;;444    
;;;445    bool pds_peer_data_iterate(pm_peer_data_id_t            data_id,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;446                               pm_peer_id_t         * const p_peer_id,
;;;447                               pm_peer_data_flash_t * const p_data)
;;;448    {
000004  b086              SUB      sp,sp,#0x18
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
;;;449        ret_code_t         ret;
;;;450        uint16_t           rec_key;
;;;451        fds_record_desc_t  rec_desc;
;;;452        fds_flash_record_t rec_flash;
;;;453    
;;;454        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;455        NRF_PM_DEBUG_CHECK(p_peer_id != NULL);
;;;456        NRF_PM_DEBUG_CHECK(p_data    != NULL);
;;;457    
;;;458        // @note emdi: should we check the data_id ?
;;;459        rec_key = peer_data_id_to_record_key(data_id);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       peer_data_id_to_record_key
000012  4680              MOV      r8,r0
;;;460    
;;;461        if (fds_record_find_by_key(rec_key, &rec_desc, &m_fds_ftok) != NRF_SUCCESS)
000014  4a10              LDR      r2,|L10.88|
000016  a903              ADD      r1,sp,#0xc
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       fds_record_find_by_key
00001e  b118              CBZ      r0,|L10.40|
;;;462        {
;;;463            return false;
000020  2000              MOVS     r0,#0
                  |L10.34|
;;;464        }
;;;465    
;;;466        ret = fds_record_open(&rec_desc, &rec_flash);
;;;467    
;;;468        if (ret != NRF_SUCCESS)
;;;469        {
;;;470            // It can only happen if the record was deleted after the call to fds_record_find_by_key(),
;;;471            // before we could open it, or if CRC support was enabled in Flash Data Storage at compile
;;;472            // time and the CRC check failed.
;;;473            return false;
;;;474        }
;;;475    
;;;476        p_data->data_id      = data_id;
;;;477        p_data->length_words = rec_flash.p_header->length_words;
;;;478        p_data->p_all_data   = rec_flash.p_data;
;;;479    
;;;480        *p_peer_id           = file_id_to_peer_id(rec_flash.p_header->file_id);
;;;481    
;;;482        (void)fds_record_close(&rec_desc);
;;;483    
;;;484        return true;
;;;485    }
000022  b006              ADD      sp,sp,#0x18
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L10.40|
000028  a901              ADD      r1,sp,#4              ;466
00002a  a803              ADD      r0,sp,#0xc            ;466
00002c  f7fffffe          BL       fds_record_open
000030  4605              MOV      r5,r0                 ;466
000032  b10d              CBZ      r5,|L10.56|
000034  2000              MOVS     r0,#0                 ;473
000036  e7f4              B        |L10.34|
                  |L10.56|
000038  70a6              STRB     r6,[r4,#2]            ;476
00003a  9801              LDR      r0,[sp,#4]            ;477
00003c  8840              LDRH     r0,[r0,#2]            ;477
00003e  8020              STRH     r0,[r4,#0]            ;477
000040  9802              LDR      r0,[sp,#8]            ;478
000042  6060              STR      r0,[r4,#4]            ;478
000044  9901              LDR      r1,[sp,#4]            ;480
000046  8888              LDRH     r0,[r1,#4]            ;480
000048  f7fffffe          BL       file_id_to_peer_id
00004c  8038              STRH     r0,[r7,#0]            ;480
00004e  a803              ADD      r0,sp,#0xc            ;482
000050  f7fffffe          BL       fds_record_close
000054  2001              MOVS     r0,#1                 ;484
000056  e7e4              B        |L10.34|
;;;486    
                          ENDP

                  |L10.88|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_iterate_prepare||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate_prepare PROC
;;;438    
;;;439    void pds_peer_data_iterate_prepare(void)
000000  4802              LDR      r0,|L11.12|
;;;440    {
;;;441        memset(&m_fds_ftok, 0x00, sizeof(fds_find_token_t));
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; m_fds_ftok
000006  6041              STR      r1,[r0,#4]  ; m_fds_ftok
;;;442    }
000008  4770              BX       lr
;;;443    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_read||, CODE, READONLY, ALIGN=1

                  pds_peer_data_read PROC
;;;373    
;;;374    ret_code_t pds_peer_data_read(pm_peer_id_t                    peer_id,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;375                                  pm_peer_data_id_t               data_id,
;;;376                                  pm_peer_data_t          * const p_data,
;;;377                                  uint32_t          const * const p_buf_len)
;;;378    {
000004  b085              SUB      sp,sp,#0x14
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
;;;379        ret_code_t         ret;
;;;380        fds_record_desc_t  rec_desc;
;;;381        fds_flash_record_t rec_flash;
;;;382    
;;;383        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;384        NRF_PM_DEBUG_CHECK(p_data != NULL);
;;;385    
;;;386        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000e  bf00              NOP      
000010  f1b80fff          CMP      r8,#0xff
000014  dd03              BLE      |L12.30|
000016  2007              MOVS     r0,#7
                  |L12.24|
;;;387        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;388    
;;;389        ret = peer_data_find(peer_id, data_id, &rec_desc);
;;;390    
;;;391        if (ret != NRF_SUCCESS)
;;;392        {
;;;393            return NRF_ERROR_NOT_FOUND;
;;;394        }
;;;395    
;;;396        // Shouldn't fail, unless the record was deleted in the meanwhile or the CRC check has failed.
;;;397        ret = fds_record_open(&rec_desc, &rec_flash);
;;;398    
;;;399        if (ret != NRF_SUCCESS)
;;;400        {
;;;401            return NRF_ERROR_NOT_FOUND;
;;;402        }
;;;403    
;;;404        // @note emdi: could this actually be set by the caller and used instead
;;;405        // of an additional parameter (data_id) ?
;;;406        p_data->data_id      = data_id;
;;;407        p_data->length_words = rec_flash.p_header->length_words;
;;;408    
;;;409        // If p_buf_len is NULL, provide a pointer to data in flash, otherwise,
;;;410        // check that the buffer is large enough and copy the data in flash into the buffer.
;;;411        if (p_buf_len != NULL)
;;;412        {
;;;413            uint32_t const data_len_bytes = (p_data->length_words * sizeof(uint32_t));
;;;414    
;;;415            if ((*p_buf_len) <= data_len_bytes)
;;;416            {
;;;417                memcpy(p_data->p_all_data, rec_flash.p_data, data_len_bytes);
;;;418            }
;;;419            else
;;;420            {
;;;421                return NRF_ERROR_NO_MEM;
;;;422            }
;;;423        }
;;;424        else
;;;425        {
;;;426            // The cast is necessary because if no buffer is provided, we just copy the pointer,
;;;427            // but it that case it should be considered a pointer to const data by the caller,
;;;428            // since it is a pointer to data in flash.
;;;429            p_data->p_all_data = (void*)rec_flash.p_data;
;;;430        }
;;;431    
;;;432        // Shouldn't fail unless the record was already closed, in which case it can be ignored.
;;;433        (void)fds_record_close(&rec_desc);
;;;434    
;;;435        return NRF_SUCCESS;
;;;436    }
000018  b005              ADD      sp,sp,#0x14
00001a  e8bd83f0          POP      {r4-r9,pc}
                  |L12.30|
00001e  bf00              NOP                            ;386
000020  bf00              NOP                            ;387
000022  4630              MOV      r0,r6                 ;387
000024  f7fffffe          BL       peer_data_id_is_valid
000028  b908              CBNZ     r0,|L12.46|
00002a  2007              MOVS     r0,#7                 ;387
00002c  e7f4              B        |L12.24|
                  |L12.46|
00002e  bf00              NOP                            ;387
000030  aa02              ADD      r2,sp,#8              ;389
000032  4631              MOV      r1,r6                 ;389
000034  4640              MOV      r0,r8                 ;389
000036  f7fffffe          BL       peer_data_find
00003a  4605              MOV      r5,r0                 ;389
00003c  b10d              CBZ      r5,|L12.66|
00003e  2005              MOVS     r0,#5                 ;393
000040  e7ea              B        |L12.24|
                  |L12.66|
000042  4669              MOV      r1,sp                 ;397
000044  a802              ADD      r0,sp,#8              ;397
000046  f7fffffe          BL       fds_record_open
00004a  4605              MOV      r5,r0                 ;397
00004c  b10d              CBZ      r5,|L12.82|
00004e  2005              MOVS     r0,#5                 ;401
000050  e7e2              B        |L12.24|
                  |L12.82|
000052  70a6              STRB     r6,[r4,#2]            ;406
000054  9800              LDR      r0,[sp,#0]            ;407
000056  8840              LDRH     r0,[r0,#2]            ;407
000058  8020              STRH     r0,[r4,#0]            ;407
00005a  b177              CBZ      r7,|L12.122|
00005c  8820              LDRH     r0,[r4,#0]            ;413
00005e  ea4f0980          LSL      r9,r0,#2              ;413
000062  6838              LDR      r0,[r7,#0]            ;415
000064  4548              CMP      r0,r9                 ;415
000066  d805              BHI      |L12.116|
000068  9901              LDR      r1,[sp,#4]            ;417
00006a  464a              MOV      r2,r9                 ;417
00006c  6860              LDR      r0,[r4,#4]            ;417
00006e  f7fffffe          BL       __aeabi_memcpy
000072  e001              B        |L12.120|
                  |L12.116|
000074  2004              MOVS     r0,#4                 ;421
000076  e7cf              B        |L12.24|
                  |L12.120|
000078  e001              B        |L12.126|
                  |L12.122|
00007a  9801              LDR      r0,[sp,#4]            ;429
00007c  6060              STR      r0,[r4,#4]            ;429
                  |L12.126|
00007e  a802              ADD      r0,sp,#8              ;433
000080  f7fffffe          BL       fds_record_close
000084  2000              MOVS     r0,#0                 ;435
000086  e7c7              B        |L12.24|
;;;437    
                          ENDP


                          AREA ||i.pds_peer_data_store||, CODE, READONLY, ALIGN=1

                  pds_peer_data_store PROC
;;;535    
;;;536    ret_code_t pds_peer_data_store(pm_peer_id_t                 peer_id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;537                                   pm_peer_data_const_t const * p_peer_data,
;;;538                                   pm_prepare_token_t           prepare_token,
;;;539                                   pm_store_token_t           * p_store_token)
;;;540    {
000002  b087              SUB      sp,sp,#0x1c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  461e              MOV      r6,r3
;;;541        ret_code_t         ret;
;;;542        fds_record_t       rec;
;;;543        fds_record_desc_t  rec_desc;
;;;544    
;;;545        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;546        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;547    
;;;548        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000a  bf00              NOP      
00000c  2fff              CMP      r7,#0xff
00000e  dd02              BLE      |L13.22|
000010  2007              MOVS     r0,#7
                  |L13.18|
;;;549        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
;;;550    
;;;551        // Prepare the record to be stored in flash.
;;;552        rec.file_id           = peer_id_to_file_id(peer_id);
;;;553        rec.key               = peer_data_id_to_record_key(p_peer_data->data_id);
;;;554        rec.data.p_data       = (void*)p_peer_data->p_all_data;
;;;555        rec.data.length_words = p_peer_data->length_words;
;;;556    
;;;557        ret = peer_data_find(peer_id, p_peer_data->data_id, &rec_desc);
;;;558    
;;;559        if (ret == NRF_ERROR_NOT_FOUND)
;;;560        {
;;;561            // No previous data exists in flash.
;;;562            if (prepare_token == PDS_PREPARE_TOKEN_INVALID)
;;;563            {
;;;564                // No space was previously reserved.
;;;565                ret = fds_record_write(&rec_desc, &rec);
;;;566            }
;;;567            else
;;;568            {
;;;569                // Space for this record was previously reserved.
;;;570                ret = fds_record_write_reserved(&rec_desc, &rec, (fds_reserve_token_t*)&prepare_token);
;;;571            }
;;;572        }
;;;573        else // NRF_SUCCESS
;;;574        {
;;;575            if (prepare_token != PDS_PREPARE_TOKEN_INVALID)
;;;576            {
;;;577                (void)fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
;;;578            }
;;;579    
;;;580            // Update existing record.
;;;581            ret = fds_record_update(&rec_desc, &rec);
;;;582        }
;;;583    
;;;584        switch (ret)
;;;585        {
;;;586            case FDS_SUCCESS:
;;;587                if (p_store_token != NULL)
;;;588                {
;;;589                    // Update the store token.
;;;590                    (void)fds_record_id_from_desc(&rec_desc, (uint32_t*)p_store_token);
;;;591                }
;;;592                return NRF_SUCCESS;
;;;593    
;;;594            case FDS_ERR_BUSY:
;;;595            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;596                return NRF_ERROR_BUSY;
;;;597    
;;;598            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;599                return NRF_ERROR_STORAGE_FULL;
;;;600    
;;;601            default:
;;;602                return NRF_ERROR_INTERNAL;
;;;603        }
;;;604    }
000012  b00b              ADD      sp,sp,#0x2c
000014  bdf0              POP      {r4-r7,pc}
                  |L13.22|
000016  bf00              NOP                            ;548
000018  bf00              NOP                            ;549
00001a  78a0              LDRB     r0,[r4,#2]            ;549
00001c  f7fffffe          BL       peer_data_id_is_valid
000020  b908              CBNZ     r0,|L13.38|
000022  2007              MOVS     r0,#7                 ;549
000024  e7f5              B        |L13.18|
                  |L13.38|
000026  bf00              NOP                            ;549
000028  4638              MOV      r0,r7                 ;552
00002a  f7fffffe          BL       peer_id_to_file_id
00002e  f8ad0010          STRH     r0,[sp,#0x10]         ;552
000032  78a0              LDRB     r0,[r4,#2]            ;553
000034  f7fffffe          BL       peer_data_id_to_record_key
000038  f8ad0012          STRH     r0,[sp,#0x12]         ;553
00003c  6860              LDR      r0,[r4,#4]            ;554
00003e  9005              STR      r0,[sp,#0x14]         ;554
000040  8821              LDRH     r1,[r4,#0]            ;555
000042  9106              STR      r1,[sp,#0x18]         ;555
000044  78a1              LDRB     r1,[r4,#2]            ;557
000046  aa01              ADD      r2,sp,#4              ;557
000048  4638              MOV      r0,r7                 ;557
00004a  f7fffffe          BL       peer_data_find
00004e  4605              MOV      r5,r0                 ;557
000050  2d05              CMP      r5,#5                 ;559
000052  d10e              BNE      |L13.114|
000054  9809              LDR      r0,[sp,#0x24]         ;562
000056  b928              CBNZ     r0,|L13.100|
000058  a904              ADD      r1,sp,#0x10           ;565
00005a  a801              ADD      r0,sp,#4              ;565
00005c  f7fffffe          BL       fds_record_write
000060  4605              MOV      r5,r0                 ;565
000062  e010              B        |L13.134|
                  |L13.100|
000064  aa09              ADD      r2,sp,#0x24           ;570
000066  a904              ADD      r1,sp,#0x10           ;570
000068  a801              ADD      r0,sp,#4              ;570
00006a  f7fffffe          BL       fds_record_write_reserved
00006e  4605              MOV      r5,r0                 ;570
000070  e009              B        |L13.134|
                  |L13.114|
000072  9809              LDR      r0,[sp,#0x24]         ;575
000074  b110              CBZ      r0,|L13.124|
000076  a809              ADD      r0,sp,#0x24           ;577
000078  f7fffffe          BL       fds_reserve_cancel
                  |L13.124|
00007c  a904              ADD      r1,sp,#0x10           ;581
00007e  a801              ADD      r0,sp,#4              ;581
000080  f7fffffe          BL       fds_record_update
000084  4605              MOV      r5,r0                 ;581
                  |L13.134|
000086  b135              CBZ      r5,|L13.150|
000088  2d07              CMP      r5,#7                 ;584
00008a  d00e              BEQ      |L13.170|
00008c  2d08              CMP      r5,#8                 ;584
00008e  d00a              BEQ      |L13.166|
000090  2d0e              CMP      r5,#0xe               ;584
000092  d10c              BNE      |L13.174|
000094  e006              B        |L13.164|
                  |L13.150|
000096  b11e              CBZ      r6,|L13.160|
000098  4631              MOV      r1,r6                 ;590
00009a  a801              ADD      r0,sp,#4              ;590
00009c  f7fffffe          BL       fds_record_id_from_desc
                  |L13.160|
0000a0  2000              MOVS     r0,#0                 ;592
0000a2  e7b6              B        |L13.18|
                  |L13.164|
0000a4  bf00              NOP                            ;595
                  |L13.166|
0000a6  2011              MOVS     r0,#0x11              ;596
0000a8  e7b3              B        |L13.18|
                  |L13.170|
0000aa  2086              MOVS     r0,#0x86              ;599
0000ac  e7b1              B        |L13.18|
                  |L13.174|
0000ae  2003              MOVS     r0,#3                 ;602
0000b0  e7af              B        |L13.18|
;;;605    
                          ENDP


                          AREA ||i.pds_peer_id_allocate||, CODE, READONLY, ALIGN=1

                  pds_peer_id_allocate PROC
;;;640    
;;;641    pm_peer_id_t pds_peer_id_allocate(void)
000000  b510              PUSH     {r4,lr}
;;;642    {
;;;643        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;644        return peer_id_allocate(PM_PEER_ID_INVALID);
000002  f64f70ff          MOV      r0,#0xffff
000006  f7fffffe          BL       peer_id_allocate
;;;645    }
00000a  bd10              POP      {r4,pc}
;;;646    
                          ENDP


                          AREA ||i.pds_peer_id_free||, CODE, READONLY, ALIGN=1

                  pds_peer_id_free PROC
;;;647    
;;;648    ret_code_t pds_peer_id_free(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;649    {
000002  4604              MOV      r4,r0
;;;650        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;651        VERIFY_PEER_ID_IN_RANGE(peer_id);
000004  bf00              NOP      
000006  2cff              CMP      r4,#0xff
000008  dd01              BLE      |L15.14|
00000a  2007              MOVS     r0,#7
                  |L15.12|
;;;652    
;;;653        (void)peer_id_delete(peer_id);
;;;654        peer_data_delete();
;;;655    
;;;656        return NRF_SUCCESS;
;;;657    }
00000c  bd10              POP      {r4,pc}
                  |L15.14|
00000e  bf00              NOP                            ;651
000010  4620              MOV      r0,r4                 ;653
000012  f7fffffe          BL       peer_id_delete
000016  f7fffffe          BL       peer_data_delete
00001a  2000              MOVS     r0,#0                 ;656
00001c  e7f6              B        |L15.12|
;;;658    
                          ENDP


                          AREA ||i.pds_peer_id_is_allocated||, CODE, READONLY, ALIGN=1

                  pds_peer_id_is_allocated PROC
;;;659    
;;;660    bool pds_peer_id_is_allocated(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;661    {
000002  4604              MOV      r4,r0
;;;662        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;663        return peer_id_is_allocated(peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_is_allocated
;;;664    }
00000a  bd10              POP      {r4,pc}
;;;665    
                          ENDP


                          AREA ||i.pds_space_reserve||, CODE, READONLY, ALIGN=1

                  pds_space_reserve PROC
;;;487    
;;;488    ret_code_t pds_space_reserve(pm_peer_data_const_t const * p_peer_data,
000000  b570              PUSH     {r4-r6,lr}
;;;489                                 pm_prepare_token_t         * p_prepare_token)
;;;490    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;491        ret_code_t ret;
;;;492    
;;;493        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;494        NRF_PM_DEBUG_CHECK(p_peer_data     != NULL);
;;;495        NRF_PM_DEBUG_CHECK(p_prepare_token != NULL);
;;;496    
;;;497        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
000006  bf00              NOP      
000008  78a0              LDRB     r0,[r4,#2]
00000a  f7fffffe          BL       peer_data_id_is_valid
00000e  b908              CBNZ     r0,|L17.20|
000010  2007              MOVS     r0,#7
                  |L17.18|
;;;498    
;;;499        ret = fds_reserve((fds_reserve_token_t*)p_prepare_token, p_peer_data->length_words);
;;;500    
;;;501        switch (ret)
;;;502        {
;;;503            case FDS_SUCCESS:
;;;504                return NRF_SUCCESS;
;;;505    
;;;506            case FDS_ERR_RECORD_TOO_LARGE:
;;;507                return NRF_ERROR_INVALID_LENGTH;
;;;508    
;;;509            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;510                return NRF_ERROR_STORAGE_FULL;
;;;511    
;;;512            default:
;;;513                return NRF_ERROR_INTERNAL;
;;;514        }
;;;515    }
000012  bd70              POP      {r4-r6,pc}
                  |L17.20|
000014  bf00              NOP                            ;497
000016  8821              LDRH     r1,[r4,#0]            ;499
000018  4630              MOV      r0,r6                 ;499
00001a  f7fffffe          BL       fds_reserve
00001e  4605              MOV      r5,r0                 ;499
000020  b125              CBZ      r5,|L17.44|
000022  2d07              CMP      r5,#7                 ;501
000024  d006              BEQ      |L17.52|
000026  2d09              CMP      r5,#9                 ;501
000028  d106              BNE      |L17.56|
00002a  e001              B        |L17.48|
                  |L17.44|
00002c  2000              MOVS     r0,#0                 ;504
00002e  e7f0              B        |L17.18|
                  |L17.48|
000030  2009              MOVS     r0,#9                 ;507
000032  e7ee              B        |L17.18|
                  |L17.52|
000034  2086              MOVS     r0,#0x86              ;510
000036  e7ec              B        |L17.18|
                  |L17.56|
000038  2003              MOVS     r0,#3                 ;513
00003a  e7ea              B        |L17.18|
;;;516    
                          ENDP


                          AREA ||i.pds_space_reserve_cancel||, CODE, READONLY, ALIGN=1

                  pds_space_reserve_cancel PROC
;;;517    
;;;518    ret_code_t pds_space_reserve_cancel(pm_prepare_token_t prepare_token)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;519    {
;;;520        ret_code_t ret;
;;;521    
;;;522        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;523        NRF_PM_DEBUG_CHECK(prepare_token != PDS_PREPARE_TOKEN_INVALID);
;;;524    
;;;525        ret = fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       fds_reserve_cancel
000008  4604              MOV      r4,r0
;;;526    
;;;527        if (ret != FDS_SUCCESS)
00000a  b10c              CBZ      r4,|L18.16|
;;;528        {
;;;529            return NRF_ERROR_INTERNAL;
00000c  2003              MOVS     r0,#3
                  |L18.14|
;;;530        }
;;;531    
;;;532        return NRF_SUCCESS;
;;;533    }
00000e  bd38              POP      {r3-r5,pc}
                  |L18.16|
000010  2000              MOVS     r0,#0                 ;532
000012  e7fc              B        |L18.14|
;;;534    
                          ENDP


                          AREA ||i.peer_data_delete||, CODE, READONLY, ALIGN=2

                  peer_data_delete PROC
;;;149    // These operations will be sent to FDS one at a time.
;;;150    static void peer_data_delete()
000000  b5f0              PUSH     {r4-r7,lr}
;;;151    {
000002  b089              SUB      sp,sp,#0x24
;;;152        ret_code_t        ret;
;;;153        pm_peer_id_t      peer_id;
;;;154        uint16_t          file_id;
;;;155        fds_record_desc_t desc;
;;;156        fds_find_token_t  ftok;
;;;157    
;;;158        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9004              STR      r0,[sp,#0x10]
000008  9005              STR      r0,[sp,#0x14]
;;;159        peer_id = peer_id_get_next_deleted(PM_PEER_ID_INVALID);
00000a  f64f70ff          MOV      r0,#0xffff
00000e  f7fffffe          BL       peer_id_get_next_deleted
000012  4605              MOV      r5,r0
;;;160    
;;;161        while (    (peer_id != PM_PEER_ID_INVALID)
000014  e006              B        |L19.36|
                  |L19.22|
;;;162                && (fds_record_find_in_file(peer_id_to_file_id(peer_id), &desc, &ftok)
;;;163                == FDS_ERR_NOT_FOUND))
;;;164        {
;;;165            peer_id_free(peer_id);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       peer_id_free
;;;166            peer_id = peer_id_get_next_deleted(peer_id);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       peer_id_get_next_deleted
000022  4605              MOV      r5,r0
                  |L19.36|
000024  f64f70ff          MOV      r0,#0xffff            ;161
000028  4285              CMP      r5,r0                 ;161
00002a  d009              BEQ      |L19.64|
00002c  4628              MOV      r0,r5                 ;162
00002e  f7fffffe          BL       peer_id_to_file_id
000032  4607              MOV      r7,r0                 ;162
000034  aa04              ADD      r2,sp,#0x10           ;162
000036  a906              ADD      r1,sp,#0x18           ;162
000038  f7fffffe          BL       fds_record_find_in_file
00003c  280a              CMP      r0,#0xa               ;162
00003e  d0ea              BEQ      |L19.22|
                  |L19.64|
;;;167        }
;;;168    
;;;169        if (!m_peer_delete_ongoing && (peer_id != PM_PEER_ID_INVALID))
000040  4816              LDR      r0,|L19.156|
000042  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_ongoing
000044  bb38              CBNZ     r0,|L19.150|
000046  f64f70ff          MOV      r0,#0xffff
00004a  4285              CMP      r5,r0
00004c  d023              BEQ      |L19.150|
;;;170        {
;;;171            m_peer_delete_ongoing = true;
00004e  2001              MOVS     r0,#1
000050  4912              LDR      r1,|L19.156|
000052  7008              STRB     r0,[r1,#0]
;;;172    
;;;173            file_id = peer_id_to_file_id(peer_id);
000054  4628              MOV      r0,r5
000056  f7fffffe          BL       peer_id_to_file_id
00005a  4606              MOV      r6,r0
;;;174            ret     = fds_file_delete(file_id);
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       fds_file_delete
000062  4604              MOV      r4,r0
;;;175    
;;;176            if (ret == FDS_ERR_NO_SPACE_IN_QUEUES)
000064  2c08              CMP      r4,#8
000066  d103              BNE      |L19.112|
;;;177            {
;;;178                m_peer_delete_queued = true;
000068  2001              MOVS     r0,#1
00006a  490d              LDR      r1,|L19.160|
00006c  7008              STRB     r0,[r1,#0]
00006e  e012              B        |L19.150|
                  |L19.112|
;;;179            }
;;;180            else if (ret != NRF_SUCCESS)
000070  b18c              CBZ      r4,|L19.150|
;;;181            {
;;;182                m_peer_delete_ongoing = false;
000072  2000              MOVS     r0,#0
000074  4909              LDR      r1,|L19.156|
000076  7008              STRB     r0,[r1,#0]
;;;183    
;;;184                pds_evt_t pds_evt;
;;;185    
;;;186                pds_evt.evt_id      = PDS_EVT_ERROR_UNEXPECTED;
000078  2009              MOVS     r0,#9
00007a  f88d0000          STRB     r0,[sp,#0]
;;;187                pds_evt.peer_id     = peer_id;
00007e  f8ad5002          STRH     r5,[sp,#2]
;;;188                pds_evt.data_id     = PM_PEER_DATA_ID_INVALID;
000082  20ff              MOVS     r0,#0xff
000084  f88d0004          STRB     r0,[sp,#4]
;;;189                pds_evt.store_token = PM_STORE_TOKEN_INVALID;
000088  2000              MOVS     r0,#0
00008a  9002              STR      r0,[sp,#8]
;;;190                pds_evt.result      = ret;
00008c  9403              STR      r4,[sp,#0xc]
;;;191    
;;;192                pds_evt_send(&pds_evt);
00008e  4668              MOV      r0,sp
000090  f7fffffe          BL       pds_evt_send
;;;193            }
000094  bf00              NOP      
                  |L19.150|
;;;194        }
;;;195    }
000096  b009              ADD      sp,sp,#0x24
000098  bdf0              POP      {r4-r7,pc}
;;;196    
                          ENDP

00009a  0000              DCW      0x0000
                  |L19.156|
                          DCD      m_peer_delete_ongoing
                  |L19.160|
                          DCD      m_peer_delete_queued

                          AREA ||i.peer_data_find||, CODE, READONLY, ALIGN=1

                  peer_data_find PROC
;;;197    
;;;198    static ret_code_t peer_data_find(pm_peer_id_t              peer_id,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;199                                     pm_peer_data_id_t         data_id,
;;;200                                     fds_record_desc_t * const p_desc)
;;;201    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;202        ret_code_t       ret;
;;;203        fds_find_token_t ftok;
;;;204    
;;;205        NRF_PM_DEBUG_CHECK(peer_id < PM_PEER_ID_N_AVAILABLE_IDS);
;;;206        NRF_PM_DEBUG_CHECK(peer_data_id_is_valid(data_id));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       peer_data_id_is_valid
;;;207        NRF_PM_DEBUG_CHECK(p_desc != NULL);
;;;208    
;;;209        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
000014  9001              STR      r0,[sp,#4]
;;;210    
;;;211        uint16_t file_id    = peer_id_to_file_id(peer_id);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       peer_id_to_file_id
00001c  4680              MOV      r8,r0
;;;212        uint16_t record_key = peer_data_id_to_record_key(data_id);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       peer_data_id_to_record_key
000024  4681              MOV      r9,r0
;;;213    
;;;214        ret = fds_record_find(file_id, record_key, p_desc, &ftok);
000026  466b              MOV      r3,sp
000028  4632              MOV      r2,r6
00002a  4649              MOV      r1,r9
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       fds_record_find
000032  4607              MOV      r7,r0
;;;215    
;;;216        if (ret != FDS_SUCCESS)
000034  b117              CBZ      r7,|L20.60|
;;;217        {
;;;218            return NRF_ERROR_NOT_FOUND;
000036  2005              MOVS     r0,#5
                  |L20.56|
;;;219        }
;;;220    
;;;221        return NRF_SUCCESS;
;;;222    }
000038  e8bd87fc          POP      {r2-r10,pc}
                  |L20.60|
00003c  2000              MOVS     r0,#0                 ;221
00003e  e7fb              B        |L20.56|
;;;223    
                          ENDP


                          AREA ||i.peer_data_id_is_valid||, CODE, READONLY, ALIGN=1

                  peer_data_id_is_valid PROC
;;;136    
;;;137    static bool peer_data_id_is_valid(pm_peer_data_id_t data_id)
000000  4601              MOV      r1,r0
;;;138    {
;;;139        return ((data_id == PM_PEER_DATA_ID_BONDING)                 ||
000002  2907              CMP      r1,#7
000004  d009              BEQ      |L21.26|
;;;140                (data_id == PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING) ||
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L21.26|
;;;141                (data_id == PM_PEER_DATA_ID_GATT_LOCAL)              ||
00000a  2908              CMP      r1,#8
00000c  d005              BEQ      |L21.26|
;;;142                (data_id == PM_PEER_DATA_ID_GATT_REMOTE)             ||
00000e  2905              CMP      r1,#5
000010  d003              BEQ      |L21.26|
;;;143                (data_id == PM_PEER_DATA_ID_PEER_RANK)               ||
000012  2906              CMP      r1,#6
000014  d001              BEQ      |L21.26|
;;;144                (data_id == PM_PEER_DATA_ID_APPLICATION));
000016  2904              CMP      r1,#4
000018  d101              BNE      |L21.30|
                  |L21.26|
00001a  2001              MOVS     r0,#1
                  |L21.28|
;;;145    }
00001c  4770              BX       lr
                  |L21.30|
00001e  2000              MOVS     r0,#0                 ;144
000020  e7fc              B        |L21.28|
;;;146    
                          ENDP


                          AREA ||i.peer_data_id_to_record_key||, CODE, READONLY, ALIGN=1

                  peer_data_id_to_record_key PROC
;;;107    // Function to convert peer data IDs to record keys.
;;;108    static uint16_t peer_data_id_to_record_key(pm_peer_data_id_t peer_data_id)
000000  4601              MOV      r1,r0
;;;109    {
;;;110        return (uint16_t)(peer_data_id + DATA_ID_TO_RECORD_KEY);
000002  f5014040          ADD      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;111    }
000008  4770              BX       lr
;;;112    
                          ENDP


                          AREA ||i.peer_id_to_file_id||, CODE, READONLY, ALIGN=1

                  peer_id_to_file_id PROC
;;;93     // Function to convert peer IDs to file IDs.
;;;94     static uint16_t peer_id_to_file_id(pm_peer_id_t peer_id)
000000  4601              MOV      r1,r0
;;;95     {
;;;96         return (uint16_t)(peer_id + PEER_ID_TO_FILE_ID);
000002  f5014040          ADD      r0,r1,#0xc000
000006  b280              UXTH     r0,r0
;;;97     }
000008  4770              BX       lr
;;;98     
                          ENDP


                          AREA ||i.peer_ids_load||, CODE, READONLY, ALIGN=1

                  peer_ids_load PROC
;;;224    
;;;225    static void peer_ids_load()
000000  b530              PUSH     {r4,r5,lr}
;;;226    {
000002  b087              SUB      sp,sp,#0x1c
;;;227        fds_record_desc_t  record_desc;
;;;228        fds_flash_record_t record;
;;;229        fds_find_token_t   ftok;
;;;230    
;;;231        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
;;;232    
;;;233        uint16_t const record_key = peer_data_id_to_record_key(PM_PEER_DATA_ID_BONDING);
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       peer_data_id_to_record_key
000010  4604              MOV      r4,r0
;;;234    
;;;235        while (fds_record_find_by_key(record_key, &record_desc, &ftok) == FDS_SUCCESS)
000012  e00f              B        |L24.52|
                  |L24.20|
;;;236        {
;;;237            pm_peer_id_t peer_id;
;;;238    
;;;239            // It is safe to ignore the return value since the descriptor was
;;;240            // just obtained and also 'record' is different from NULL.
;;;241            (void)fds_record_open(&record_desc, &record);
000014  a902              ADD      r1,sp,#8
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       fds_record_open
;;;242            peer_id = file_id_to_peer_id(record.p_header->file_id);
00001c  9902              LDR      r1,[sp,#8]
00001e  8888              LDRH     r0,[r1,#4]
000020  f7fffffe          BL       file_id_to_peer_id
000024  4605              MOV      r5,r0
;;;243            (void)fds_record_close(&record_desc);
000026  a804              ADD      r0,sp,#0x10
000028  f7fffffe          BL       fds_record_close
;;;244    
;;;245            (void)peer_id_allocate(peer_id);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       peer_id_allocate
;;;246        }
000032  bf00              NOP      
                  |L24.52|
000034  466a              MOV      r2,sp                 ;235
000036  a904              ADD      r1,sp,#0x10           ;235
000038  4620              MOV      r0,r4                 ;235
00003a  f7fffffe          BL       fds_record_find_by_key
00003e  2800              CMP      r0,#0                 ;235
000040  d0e8              BEQ      |L24.20|
;;;247    }
000042  b007              ADD      sp,sp,#0x1c
000044  bd30              POP      {r4,r5,pc}
;;;248    
                          ENDP


                          AREA ||i.record_key_to_peer_data_id||, CODE, READONLY, ALIGN=1

                  record_key_to_peer_data_id PROC
;;;114    // Function to convert record keys to peer data IDs.
;;;115    static pm_peer_data_id_t record_key_to_peer_data_id(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;116    {
;;;117        return (pm_peer_data_id_t)(record_key + RECORD_KEY_TO_DATA_ID);
000002  b2c8              UXTB     r0,r1
;;;118    }
000004  4770              BX       lr
;;;119    
                          ENDP


                          AREA ||i.record_key_within_pm_range||, CODE, READONLY, ALIGN=1

                  record_key_within_pm_range PROC
;;;129    // Function for checking whether a record key is relevant for the Peer Manager.
;;;130    static bool record_key_within_pm_range(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;131    {
;;;132        return ((PDS_FIRST_RESERVED_RECORD_KEY <= record_key)
000002  f5b14f40          CMP      r1,#0xc000
000006  db05              BLT      |L26.20|
;;;133             && (record_key <= PDS_LAST_RESERVED_RECORD_KEY));
000008  f64f70fe          MOV      r0,#0xfffe
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L26.20|
000010  2001              MOVS     r0,#1
                  |L26.18|
;;;134    }
000012  4770              BX       lr
                  |L26.20|
000014  2000              MOVS     r0,#0                 ;133
000016  e7fc              B        |L26.18|
;;;135    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pdb_pds_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00                DCB      0x00
                  m_peer_delete_queued
000001  00                DCB      0x00
                  m_peer_delete_ongoing
000002  0000              DCB      0x00,0x00
                  m_fds_ftok
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\peer_data_storage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_peer_data_storage_c_pds_init____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REVSH|
#line 402
|__asm___19_peer_data_storage_c_pds_init____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____RRX|
#line 587
|__asm___19_peer_data_storage_c_pds_init____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
