; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_sdh.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_sdh.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_sdh.crf ..\..\..\..\..\..\components\softdevice\common\nrf_sdh.c]
                          THUMB

                          AREA ||i.SWI2_EGU2_IRQHandler||, CODE, READONLY, ALIGN=1

                  SWI2_EGU2_IRQHandler PROC
;;;352    
;;;353    void SD_EVT_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355        nrf_sdh_evts_poll();
000002  f7fffffe          BL       nrf_sdh_evts_poll
;;;356    }
000006  bd10              POP      {r4,pc}
;;;357    
                          ENDP


                          AREA ||i.__sd_nvic_app_accessible_irq||, CODE, READONLY, ALIGN=2

                  __sd_nvic_app_accessible_irq PROC
;;;288    
;;;289    __STATIC_INLINE uint32_t __sd_nvic_app_accessible_irq(IRQn_Type IRQn)
000000  4601              MOV      r1,r0
;;;290    {
;;;291      if (IRQn < 32)
000002  2920              CMP      r1,#0x20
000004  da08              BGE      |L2.24|
;;;292      {
;;;293        return ((1UL<<IRQn) & __NRF_NVIC_APP_IRQS_0) != 0;
000006  2001              MOVS     r0,#1
000008  4088              LSLS     r0,r0,r1
00000a  4a0a              LDR      r2,|L2.52|
00000c  4010              ANDS     r0,r0,r2
00000e  b108              CBZ      r0,|L2.20|
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;294      }
;;;295      else if (IRQn < 64)
;;;296      {
;;;297        return ((1UL<<(IRQn-32)) & __NRF_NVIC_APP_IRQS_1) != 0;
;;;298      }
;;;299      else
;;;300      {
;;;301        return 1;
;;;302      }
;;;303    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;293
000016  e7fc              B        |L2.18|
                  |L2.24|
000018  2940              CMP      r1,#0x40              ;295
00001a  da09              BGE      |L2.48|
00001c  f1a10020          SUB      r0,r1,#0x20           ;297
000020  2201              MOVS     r2,#1                 ;297
000022  fa02f000          LSL      r0,r2,r0              ;297
000026  b108              CBZ      r0,|L2.44|
000028  2001              MOVS     r0,#1                 ;297
00002a  e7f2              B        |L2.18|
                  |L2.44|
00002c  2000              MOVS     r0,#0                 ;297
00002e  e7f0              B        |L2.18|
                  |L2.48|
000030  2001              MOVS     r0,#1                 ;301
000032  e7ee              B        |L2.18|
;;;304    
                          ENDP

                  |L2.52|
                          DCD      0xbdff06fc

                          AREA ||i.nrf_sdh_disable_request||, CODE, READONLY, ALIGN=2

                  nrf_sdh_disable_request PROC
;;;214    
;;;215    ret_code_t nrf_sdh_disable_request(void)
000000  b510              PUSH     {r4,lr}
;;;216    {
;;;217        ret_code_t ret_code;
;;;218    
;;;219        if (!m_nrf_sdh_enabled)
000002  4813              LDR      r0,|L3.80|
000004  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
000006  b908              CBNZ     r0,|L3.12|
;;;220        {
;;;221            return NRF_ERROR_INVALID_STATE;
000008  2008              MOVS     r0,#8
                  |L3.10|
;;;222        }
;;;223    
;;;224        m_nrf_sdh_continue = true;
;;;225    
;;;226        // Notify observers about SoftDevice disable request.
;;;227        if (sdh_request_observer_notify(NRF_SDH_EVT_DISABLE_REQUEST) == NRF_ERROR_BUSY)
;;;228        {
;;;229            // Disable process was stopped.
;;;230            return NRF_SUCCESS;
;;;231        }
;;;232    
;;;233        // Notify observers about starting SoftDevice disable process.
;;;234        sdh_state_observer_notify(NRF_SDH_EVT_STATE_DISABLE_PREPARE);
;;;235    
;;;236        ret_code = sd_softdevice_disable();
;;;237        if (ret_code != NRF_SUCCESS)
;;;238        {
;;;239            return ret_code;
;;;240        }
;;;241    
;;;242        m_nrf_sdh_enabled  = false;
;;;243        m_nrf_sdh_continue = false;
;;;244    
;;;245    #ifdef SOFTDEVICE_PRESENT
;;;246        ret_code = sd_nvic_DisableIRQ((IRQn_Type)SD_EVT_IRQn);
;;;247        if (ret_code != NRF_SUCCESS)
;;;248        {
;;;249            return ret_code;
;;;250        }
;;;251    #else
;;;252        NVIC_DisableIRQ(SD_EVT_IRQn);
;;;253    #endif
;;;254    
;;;255        // Notify observers about a finished SoftDevice enable process.
;;;256        sdh_state_observer_notify(NRF_SDH_EVT_STATE_DISABLED);
;;;257    
;;;258        return NRF_SUCCESS;
;;;259    }
00000a  bd10              POP      {r4,pc}
                  |L3.12|
00000c  2001              MOVS     r0,#1                 ;224
00000e  4911              LDR      r1,|L3.84|
000010  7008              STRB     r0,[r1,#0]            ;224
000012  f7fffffe          BL       sdh_request_observer_notify
000016  2811              CMP      r0,#0x11              ;227
000018  d101              BNE      |L3.30|
00001a  2000              MOVS     r0,#0                 ;230
00001c  e7f5              B        |L3.10|
                  |L3.30|
00001e  2002              MOVS     r0,#2                 ;234
000020  f7fffffe          BL       sdh_state_observer_notify
000024  df11              SVC      #0x11                 ;236
000026  4604              MOV      r4,r0                 ;236
000028  b10c              CBZ      r4,|L3.46|
00002a  4620              MOV      r0,r4                 ;239
00002c  e7ed              B        |L3.10|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;242
000030  4907              LDR      r1,|L3.80|
000032  7008              STRB     r0,[r1,#0]            ;242
000034  4907              LDR      r1,|L3.84|
000036  7008              STRB     r0,[r1,#0]            ;243
000038  2016              MOVS     r0,#0x16              ;246
00003a  f7fffffe          BL       sd_nvic_DisableIRQ
00003e  4604              MOV      r4,r0                 ;246
000040  b10c              CBZ      r4,|L3.70|
000042  4620              MOV      r0,r4                 ;249
000044  e7e1              B        |L3.10|
                  |L3.70|
000046  2003              MOVS     r0,#3                 ;256
000048  f7fffffe          BL       sdh_state_observer_notify
00004c  2000              MOVS     r0,#0                 ;258
00004e  e7dc              B        |L3.10|
;;;260    
                          ENDP

                  |L3.80|
                          DCD      m_nrf_sdh_enabled
                  |L3.84|
                          DCD      m_nrf_sdh_continue

                          AREA ||i.nrf_sdh_enable_request||, CODE, READONLY, ALIGN=2

                  nrf_sdh_enable_request PROC
;;;147    
;;;148    ret_code_t nrf_sdh_enable_request(void)
000000  b538              PUSH     {r3-r5,lr}
;;;149    {
;;;150        ret_code_t ret_code;
;;;151    
;;;152        if (m_nrf_sdh_enabled)
000002  4818              LDR      r0,|L4.100|
000004  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
000006  b108              CBZ      r0,|L4.12|
;;;153        {
;;;154            return NRF_ERROR_INVALID_STATE;
000008  2008              MOVS     r0,#8
                  |L4.10|
;;;155        }
;;;156    
;;;157        m_nrf_sdh_continue = true;
;;;158    
;;;159        // Notify observers about SoftDevice enable request.
;;;160        if (sdh_request_observer_notify(NRF_SDH_EVT_ENABLE_REQUEST) == NRF_ERROR_BUSY)
;;;161        {
;;;162            // Enable process was stopped.
;;;163            return NRF_SUCCESS;
;;;164        }
;;;165    
;;;166        // Notify observers about starting SoftDevice enable process.
;;;167        sdh_state_observer_notify(NRF_SDH_EVT_STATE_ENABLE_PREPARE);
;;;168    
;;;169        nrf_clock_lf_cfg_t const clock_lf_cfg =
;;;170        {
;;;171            .source        = NRF_SDH_CLOCK_LF_SRC,
;;;172            .rc_ctiv       = NRF_SDH_CLOCK_LF_RC_CTIV,
;;;173            .rc_temp_ctiv  = NRF_SDH_CLOCK_LF_RC_TEMP_CTIV,
;;;174        #ifdef S132
;;;175            .accuracy      = NRF_SDH_CLOCK_LF_XTAL_ACCURACY
;;;176        #else
;;;177            .xtal_accuracy = NRF_SDH_CLOCK_LF_XTAL_ACCURACY
;;;178        #endif
;;;179        };
;;;180    
;;;181        #ifdef ANT_LICENSE_KEY
;;;182            ret_code = sd_softdevice_enable(&clock_lf_cfg, app_error_fault_handler, ANT_LICENSE_KEY);
;;;183        #else
;;;184            ret_code = sd_softdevice_enable(&clock_lf_cfg, app_error_fault_handler);
;;;185        #endif
;;;186    
;;;187        if (ret_code != NRF_SUCCESS)
;;;188        {
;;;189            return ret_code;
;;;190        }
;;;191    
;;;192        m_nrf_sdh_enabled   = true;
;;;193        m_nrf_sdh_continue  = false;
;;;194        m_nrf_sdh_suspended = false;
;;;195    
;;;196        // Enable BLE event interrupt (interrupt priority has already been set by the stack).
;;;197    #ifdef SOFTDEVICE_PRESENT
;;;198        ret_code = sd_nvic_EnableIRQ((IRQn_Type)SD_EVT_IRQn);
;;;199        if (ret_code != NRF_SUCCESS)
;;;200        {
;;;201            return ret_code;
;;;202        }
;;;203    #else
;;;204        //In case of serialization, NVIC must be accessed directly.
;;;205        NVIC_EnableIRQ(SD_EVT_IRQn);
;;;206    #endif
;;;207    
;;;208        // Notify observers about a finished SoftDevice enable process.
;;;209        sdh_state_observer_notify(NRF_SDH_EVT_STATE_ENABLED);
;;;210    
;;;211        return NRF_SUCCESS;
;;;212    }
00000a  bd38              POP      {r3-r5,pc}
                  |L4.12|
00000c  2001              MOVS     r0,#1                 ;157
00000e  4916              LDR      r1,|L4.104|
000010  7008              STRB     r0,[r1,#0]            ;157
000012  2000              MOVS     r0,#0                 ;160
000014  f7fffffe          BL       sdh_request_observer_notify
000018  2811              CMP      r0,#0x11              ;160
00001a  d101              BNE      |L4.32|
00001c  2000              MOVS     r0,#0                 ;163
00001e  e7f4              B        |L4.10|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;167
000022  f7fffffe          BL       sdh_state_observer_notify
000026  4811              LDR      r0,|L4.108|
000028  6800              LDR      r0,[r0,#0]            ;169  ; <Data1>
00002a  9000              STR      r0,[sp,#0]            ;169
00002c  4910              LDR      r1,|L4.112|
00002e  4668              MOV      r0,sp                 ;184
000030  df10              SVC      #0x10                 ;184
000032  4604              MOV      r4,r0                 ;184
000034  b10c              CBZ      r4,|L4.58|
000036  4620              MOV      r0,r4                 ;189
000038  e7e7              B        |L4.10|
                  |L4.58|
00003a  2001              MOVS     r0,#1                 ;192
00003c  4909              LDR      r1,|L4.100|
00003e  7008              STRB     r0,[r1,#0]            ;192
000040  2000              MOVS     r0,#0                 ;193
000042  4909              LDR      r1,|L4.104|
000044  7008              STRB     r0,[r1,#0]            ;193
000046  490b              LDR      r1,|L4.116|
000048  7008              STRB     r0,[r1,#0]            ;194
00004a  2016              MOVS     r0,#0x16              ;198
00004c  f7fffffe          BL       sd_nvic_EnableIRQ
000050  4604              MOV      r4,r0                 ;198
000052  b10c              CBZ      r4,|L4.88|
000054  4620              MOV      r0,r4                 ;201
000056  e7d8              B        |L4.10|
                  |L4.88|
000058  2001              MOVS     r0,#1                 ;209
00005a  f7fffffe          BL       sdh_state_observer_notify
00005e  2000              MOVS     r0,#0                 ;211
000060  e7d3              B        |L4.10|
;;;213    
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
                          DCD      m_nrf_sdh_enabled
                  |L4.104|
                          DCD      m_nrf_sdh_continue
                  |L4.108|
                          DCD      ||.constdata||+0x54
                  |L4.112|
                          DCD      app_error_fault_handler
                  |L4.116|
                          DCD      m_nrf_sdh_suspended

                          AREA ||i.nrf_sdh_evts_poll||, CODE, READONLY, ALIGN=2

                  nrf_sdh_evts_poll PROC
;;;330    
;;;331    void nrf_sdh_evts_poll(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;332    {
;;;333        nrf_section_iter_t iter;
;;;334    
;;;335        // Notify observers about pending SoftDevice event.
;;;336        for (nrf_section_iter_init(&iter, &sdh_stack_observers);
000002  490a              LDR      r1,|L5.44|
000004  4668              MOV      r0,sp
000006  f7fffffe          BL       nrf_section_iter_init
00000a  e009              B        |L5.32|
                  |L5.12|
;;;337             nrf_section_iter_get(&iter) != NULL;
;;;338             nrf_section_iter_next(&iter))
;;;339        {
;;;340            nrf_sdh_stack_observer_t    * p_observer;
;;;341            nrf_sdh_stack_evt_handler_t   handler;
;;;342    
;;;343            p_observer = (nrf_sdh_stack_observer_t *) nrf_section_iter_get(&iter);
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       nrf_section_iter_get
000012  4604              MOV      r4,r0
;;;344            handler    = p_observer->handler;
000014  6825              LDR      r5,[r4,#0]
;;;345    
;;;346            handler(p_observer->p_context);
000016  6860              LDR      r0,[r4,#4]
000018  47a8              BLX      r5
00001a  4668              MOV      r0,sp                 ;338
00001c  f7fffffe          BL       nrf_section_iter_next
                  |L5.32|
000020  4668              MOV      r0,sp                 ;337
000022  f7fffffe          BL       nrf_section_iter_get
000026  2800              CMP      r0,#0                 ;337
000028  d1f0              BNE      |L5.12|
;;;347        }
;;;348    }
00002a  bd3e              POP      {r1-r5,pc}
;;;349    
                          ENDP

                  |L5.44|
                          DCD      sdh_stack_observers

                          AREA ||i.nrf_sdh_is_enabled||, CODE, READONLY, ALIGN=2

                  nrf_sdh_is_enabled PROC
;;;279    
;;;280    bool nrf_sdh_is_enabled(void)
000000  4801              LDR      r0,|L6.8|
;;;281    {
;;;282        return m_nrf_sdh_enabled;
000002  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
;;;283    }
000004  4770              BX       lr
;;;284    
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      m_nrf_sdh_enabled

                          AREA ||i.nrf_sdh_is_suspended||, CODE, READONLY, ALIGN=2

                  nrf_sdh_is_suspended PROC
;;;324    
;;;325    bool nrf_sdh_is_suspended(void)
000000  4804              LDR      r0,|L7.20|
;;;326    {
;;;327        return (!m_nrf_sdh_enabled) || (m_nrf_sdh_suspended);
000002  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
000004  b110              CBZ      r0,|L7.12|
000006  4804              LDR      r0,|L7.24|
000008  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_suspended
00000a  b108              CBZ      r0,|L7.16|
                  |L7.12|
00000c  2001              MOVS     r0,#1
                  |L7.14|
;;;328    }
00000e  4770              BX       lr
                  |L7.16|
000010  2000              MOVS     r0,#0                 ;327
000012  e7fc              B        |L7.14|
;;;329    
                          ENDP

                  |L7.20|
                          DCD      m_nrf_sdh_enabled
                  |L7.24|
                          DCD      m_nrf_sdh_suspended

                          AREA ||i.nrf_sdh_request_continue||, CODE, READONLY, ALIGN=2

                  nrf_sdh_request_continue PROC
;;;261    
;;;262    ret_code_t nrf_sdh_request_continue(void)
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264        if (!m_nrf_sdh_continue)
000002  4807              LDR      r0,|L8.32|
000004  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_continue
000006  b908              CBNZ     r0,|L8.12|
;;;265        {
;;;266            return NRF_ERROR_INVALID_STATE;
000008  2008              MOVS     r0,#8
                  |L8.10|
;;;267        }
;;;268    
;;;269        if (m_nrf_sdh_enabled)
;;;270        {
;;;271            return nrf_sdh_disable_request();
;;;272        }
;;;273        else
;;;274        {
;;;275            return nrf_sdh_enable_request();
;;;276        }
;;;277    }
00000a  bd10              POP      {r4,pc}
                  |L8.12|
00000c  4805              LDR      r0,|L8.36|
00000e  7800              LDRB     r0,[r0,#0]            ;269  ; m_nrf_sdh_enabled
000010  b110              CBZ      r0,|L8.24|
000012  f7fffffe          BL       nrf_sdh_disable_request
000016  e7f8              B        |L8.10|
                  |L8.24|
000018  f7fffffe          BL       nrf_sdh_enable_request
00001c  e7f5              B        |L8.10|
;;;278    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      m_nrf_sdh_continue
                  |L8.36|
                          DCD      m_nrf_sdh_enabled

                          AREA ||i.nrf_sdh_resume||, CODE, READONLY, ALIGN=2

                  nrf_sdh_resume PROC
;;;301    
;;;302    void nrf_sdh_resume(void)
000000  b570              PUSH     {r4-r6,lr}
;;;303    {
;;;304        if ((!m_nrf_sdh_suspended) || (!m_nrf_sdh_enabled))
000002  481e              LDR      r0,|L9.124|
000004  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_suspended
000006  b110              CBZ      r0,|L9.14|
000008  481d              LDR      r0,|L9.128|
00000a  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
00000c  b900              CBNZ     r0,|L9.16|
                  |L9.14|
;;;305        {
;;;306            return;
;;;307        }
;;;308    
;;;309    #ifdef SOFTDEVICE_PRESENT
;;;310        // Force calling ISR again to make sure that events not pulled previously have been processed.
;;;311        ret_code_t ret_code;
;;;312        ret_code = sd_nvic_SetPendingIRQ((IRQn_Type)SD_EVT_IRQn);
;;;313        APP_ERROR_CHECK(ret_code);
;;;314        ret_code = sd_nvic_EnableIRQ((IRQn_Type)SD_EVT_IRQn);
;;;315        APP_ERROR_CHECK(ret_code);
;;;316    #else
;;;317        NVIC_SetPendingIRQ((IRQn_Type)SD_EVT_IRQn);
;;;318        NVIC_EnableIRQ(SD_EVT_IRQn);
;;;319    #endif
;;;320    
;;;321        m_nrf_sdh_suspended = false;
;;;322    }
00000e  bd70              POP      {r4-r6,pc}
                  |L9.16|
000010  2416              MOVS     r4,#0x16              ;312
000012  4620              MOV      r0,r4                 ;312
000014  f7fffffe          BL       __sd_nvic_app_accessible_irq
000018  b158              CBZ      r0,|L9.50|
00001a  bf00              NOP                            ;312
00001c  f004011f          AND      r1,r4,#0x1f           ;312
000020  2001              MOVS     r0,#1                 ;312
000022  4088              LSLS     r0,r0,r1              ;312
000024  4917              LDR      r1,|L9.132|
000026  0962              LSRS     r2,r4,#5              ;312
000028  f8410022          STR      r0,[r1,r2,LSL #2]     ;312
00002c  bf00              NOP                            ;312
00002e  2000              MOVS     r0,#0                 ;312
000030  e001              B        |L9.54|
                  |L9.50|
000032  f2420001          MOV      r0,#0x2001            ;312
                  |L9.54|
000036  4605              MOV      r5,r0                 ;312
000038  bf00              NOP                            ;313
00003a  462c              MOV      r4,r5                 ;313
00003c  b13c              CBZ      r4,|L9.78|
00003e  bf00              NOP                            ;313
000040  a211              ADR      r2,|L9.136|
000042  f2401139          MOV      r1,#0x139             ;313
000046  4620              MOV      r0,r4                 ;313
000048  f7fffffe          BL       app_error_handler
00004c  bf00              NOP                            ;313
                  |L9.78|
00004e  bf00              NOP                            ;313
000050  2016              MOVS     r0,#0x16              ;314
000052  f7fffffe          BL       sd_nvic_EnableIRQ
000056  4605              MOV      r5,r0                 ;314
000058  bf00              NOP                            ;315
00005a  462c              MOV      r4,r5                 ;315
00005c  b13c              CBZ      r4,|L9.110|
00005e  bf00              NOP                            ;315
000060  a209              ADR      r2,|L9.136|
000062  f240113b          MOV      r1,#0x13b             ;315
000066  4620              MOV      r0,r4                 ;315
000068  f7fffffe          BL       app_error_handler
00006c  bf00              NOP                            ;315
                  |L9.110|
00006e  bf00              NOP                            ;315
000070  2000              MOVS     r0,#0                 ;321
000072  4902              LDR      r1,|L9.124|
000074  7008              STRB     r0,[r1,#0]            ;321
000076  bf00              NOP      
000078  e7c9              B        |L9.14|
;;;323    
                          ENDP

00007a  0000              DCW      0x0000
                  |L9.124|
                          DCD      m_nrf_sdh_suspended
                  |L9.128|
                          DCD      m_nrf_sdh_enabled
                  |L9.132|
                          DCD      0xe000e200
                  |L9.136|
000088  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\"
00008c  2e5c2e2e
000090  5c2e2e5c
000094  2e2e5c2e
000098  2e5c636f
00009c  6d706f6e
0000a0  656e7473
0000a4  5c736f66
0000a8  74646576
0000ac  6963655c
0000b0  636f6d6d
0000b4  6f6e5c  
0000b7  6e72665f          DCB      "nrf_sdh.c",0
0000bb  7364682e
0000bf  6300    
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0

                          AREA ||i.nrf_sdh_suspend||, CODE, READONLY, ALIGN=2

                  nrf_sdh_suspend PROC
;;;285    
;;;286    void nrf_sdh_suspend(void)
000000  b570              PUSH     {r4-r6,lr}
;;;287    {
;;;288        if (!m_nrf_sdh_enabled)
000002  480c              LDR      r0,|L10.52|
000004  7800              LDRB     r0,[r0,#0]  ; m_nrf_sdh_enabled
000006  b900              CBNZ     r0,|L10.10|
                  |L10.8|
;;;289        {
;;;290            return;
;;;291        }
;;;292    #ifdef SOFTDEVICE_PRESENT
;;;293        ret_code_t ret_code = sd_nvic_DisableIRQ((IRQn_Type)SD_EVT_IRQn);
;;;294        APP_ERROR_CHECK(ret_code);
;;;295    #else
;;;296        NVIC_DisableIRQ(SD_EVT_IRQn);
;;;297    #endif
;;;298        m_nrf_sdh_suspended = true;
;;;299    }
000008  bd70              POP      {r4-r6,pc}
                  |L10.10|
00000a  2016              MOVS     r0,#0x16              ;293
00000c  f7fffffe          BL       sd_nvic_DisableIRQ
000010  4604              MOV      r4,r0                 ;293
000012  bf00              NOP                            ;294
000014  4625              MOV      r5,r4                 ;294
000016  b13d              CBZ      r5,|L10.40|
000018  bf00              NOP                            ;294
00001a  a207              ADR      r2,|L10.56|
00001c  f44f7193          MOV      r1,#0x126             ;294
000020  4628              MOV      r0,r5                 ;294
000022  f7fffffe          BL       app_error_handler
000026  bf00              NOP                            ;294
                  |L10.40|
000028  bf00              NOP                            ;294
00002a  2001              MOVS     r0,#1                 ;298
00002c  4911              LDR      r1,|L10.116|
00002e  7008              STRB     r0,[r1,#0]            ;298
000030  bf00              NOP      
000032  e7e9              B        |L10.8|
;;;300    
                          ENDP

                  |L10.52|
                          DCD      m_nrf_sdh_enabled
                  |L10.56|
000038  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\"
00003c  2e5c2e2e
000040  5c2e2e5c
000044  2e2e5c2e
000048  2e5c636f
00004c  6d706f6e
000050  656e7473
000054  5c736f66
000058  74646576
00005c  6963655c
000060  636f6d6d
000064  6f6e5c  
000067  6e72665f          DCB      "nrf_sdh.c",0
00006b  7364682e
00006f  6300    
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L10.116|
                          DCD      m_nrf_sdh_suspended

                          AREA ||i.nrf_section_iter_get||, CODE, READONLY, ALIGN=1

                  nrf_section_iter_get PROC
;;;193     */
;;;194    static inline void * nrf_section_iter_get(nrf_section_iter_t const * p_iter)
000000  4601              MOV      r1,r0
;;;195    {
;;;196        ASSERT(p_iter);
;;;197        return p_iter->p_item;
000002  6888              LDR      r0,[r1,#8]
;;;198    }
000004  4770              BX       lr
;;;199    
                          ENDP


                          AREA ||i.sd_nvic_DisableIRQ||, CODE, READONLY, ALIGN=2

                  sd_nvic_DisableIRQ PROC
;;;343    
;;;344    __STATIC_INLINE uint32_t sd_nvic_DisableIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;345    {
000002  4604              MOV      r4,r0
;;;346      if (!__sd_nvic_app_accessible_irq(IRQn))
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       __sd_nvic_app_accessible_irq
00000a  b910              CBNZ     r0,|L12.18|
;;;347      {
;;;348        return NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE;
00000c  f2420001          MOV      r0,#0x2001
                  |L12.16|
;;;349      }
;;;350    
;;;351      if (nrf_nvic_state.__cr_flag)
;;;352      {
;;;353        nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] &= ~(1UL << ((uint32_t)(IRQn) & 0x1F));
;;;354      }
;;;355      else
;;;356      {
;;;357        NVIC_DisableIRQ(IRQn);
;;;358      }
;;;359    
;;;360      return NRF_SUCCESS;
;;;361    }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  480f              LDR      r0,|L12.80|
000014  6880              LDR      r0,[r0,#8]            ;351  ; nrf_nvic_state
000016  b168              CBZ      r0,|L12.52|
000018  0960              LSRS     r0,r4,#5              ;353
00001a  490d              LDR      r1,|L12.80|
00001c  f8510020          LDR      r0,[r1,r0,LSL #2]     ;353
000020  f004021f          AND      r2,r4,#0x1f           ;353
000024  2101              MOVS     r1,#1                 ;353
000026  4091              LSLS     r1,r1,r2              ;353
000028  4388              BICS     r0,r0,r1              ;353
00002a  0961              LSRS     r1,r4,#5              ;353
00002c  4a08              LDR      r2,|L12.80|
00002e  f8420021          STR      r0,[r2,r1,LSL #2]     ;353
000032  e00a              B        |L12.74|
                  |L12.52|
000034  bf00              NOP                            ;357
000036  f004011f          AND      r1,r4,#0x1f           ;357
00003a  2001              MOVS     r0,#1                 ;357
00003c  4088              LSLS     r0,r0,r1              ;357
00003e  4905              LDR      r1,|L12.84|
000040  0962              LSRS     r2,r4,#5              ;357
000042  f8410022          STR      r0,[r1,r2,LSL #2]     ;357
000046  bf00              NOP                            ;357
000048  bf00              NOP                            ;357
                  |L12.74|
00004a  2000              MOVS     r0,#0                 ;360
00004c  e7e0              B        |L12.16|
;;;362    
                          ENDP

00004e  0000              DCW      0x0000
                  |L12.80|
                          DCD      nrf_nvic_state
                  |L12.84|
                          DCD      0xe000e180

                          AREA ||i.sd_nvic_EnableIRQ||, CODE, READONLY, ALIGN=2

                  sd_nvic_EnableIRQ PROC
;;;321    
;;;322    __STATIC_INLINE uint32_t sd_nvic_EnableIRQ(IRQn_Type IRQn)
000000  b510              PUSH     {r4,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324      if (!__sd_nvic_app_accessible_irq(IRQn))
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       __sd_nvic_app_accessible_irq
00000a  b910              CBNZ     r0,|L13.18|
;;;325      {
;;;326        return NRF_ERROR_SOC_NVIC_INTERRUPT_NOT_AVAILABLE;
00000c  f2420001          MOV      r0,#0x2001
                  |L13.16|
;;;327      }
;;;328      if (!__sd_nvic_is_app_accessible_priority(NVIC_GetPriority(IRQn)))
;;;329      {
;;;330        return NRF_ERROR_SOC_NVIC_INTERRUPT_PRIORITY_NOT_ALLOWED;
;;;331      }
;;;332    
;;;333      if (nrf_nvic_state.__cr_flag)
;;;334      {
;;;335        nrf_nvic_state.__irq_masks[(uint32_t)((int32_t)IRQn) >> 5] |= (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));
;;;336      }
;;;337      else
;;;338      {
;;;339        NVIC_EnableIRQ(IRQn);
;;;340      }
;;;341      return NRF_SUCCESS;
;;;342    }
000010  bd10              POP      {r4,pc}
                  |L13.18|
000012  4621              MOV      r1,r4                 ;328
000014  2900              CMP      r1,#0                 ;328
000016  da06              BGE      |L13.38|
000018  4a1d              LDR      r2,|L13.144|
00001a  f001030f          AND      r3,r1,#0xf            ;328
00001e  1f1b              SUBS     r3,r3,#4              ;328
000020  5cd2              LDRB     r2,[r2,r3]            ;328
000022  0952              LSRS     r2,r2,#5              ;328
000024  e002              B        |L13.44|
                  |L13.38|
000026  4a1b              LDR      r2,|L13.148|
000028  5c52              LDRB     r2,[r2,r1]            ;328
00002a  0952              LSRS     r2,r2,#5              ;328
                  |L13.44|
00002c  4610              MOV      r0,r2                 ;328
00002e  2808              CMP      r0,#8                 ;328
000030  d301              BCC      |L13.54|
000032  2100              MOVS     r1,#0                 ;328
000034  e007              B        |L13.70|
                  |L13.54|
000036  b118              CBZ      r0,|L13.64|
000038  2801              CMP      r0,#1                 ;328
00003a  d001              BEQ      |L13.64|
00003c  2804              CMP      r0,#4                 ;328
00003e  d101              BNE      |L13.68|
                  |L13.64|
000040  2100              MOVS     r1,#0                 ;328
000042  e000              B        |L13.70|
                  |L13.68|
000044  2101              MOVS     r1,#1                 ;328
                  |L13.70|
000046  b911              CBNZ     r1,|L13.78|
000048  f2420002          MOV      r0,#0x2002            ;330
00004c  e7e0              B        |L13.16|
                  |L13.78|
00004e  4812              LDR      r0,|L13.152|
000050  6880              LDR      r0,[r0,#8]            ;333  ; nrf_nvic_state
000052  b168              CBZ      r0,|L13.112|
000054  0960              LSRS     r0,r4,#5              ;335
000056  4910              LDR      r1,|L13.152|
000058  f8510020          LDR      r0,[r1,r0,LSL #2]     ;335
00005c  f004021f          AND      r2,r4,#0x1f           ;335
000060  2101              MOVS     r1,#1                 ;335
000062  4091              LSLS     r1,r1,r2              ;335
000064  4308              ORRS     r0,r0,r1              ;335
000066  0961              LSRS     r1,r4,#5              ;335
000068  4a0b              LDR      r2,|L13.152|
00006a  f8420021          STR      r0,[r2,r1,LSL #2]     ;335
00006e  e00c              B        |L13.138|
                  |L13.112|
000070  bf00              NOP                            ;339
000072  f004011f          AND      r1,r4,#0x1f           ;339
000076  2001              MOVS     r0,#1                 ;339
000078  4088              LSLS     r0,r0,r1              ;339
00007a  0961              LSRS     r1,r4,#5              ;339
00007c  0089              LSLS     r1,r1,#2              ;339
00007e  f10121e0          ADD      r1,r1,#0xe000e000     ;339
000082  f8c10100          STR      r0,[r1,#0x100]        ;339
000086  bf00              NOP                            ;339
000088  bf00              NOP                            ;339
                  |L13.138|
00008a  2000              MOVS     r0,#0                 ;341
00008c  e7c0              B        |L13.16|
;;;343    
                          ENDP

00008e  0000              DCW      0x0000
                  |L13.144|
                          DCD      0xe000ed18
                  |L13.148|
                          DCD      0xe000e400
                  |L13.152|
                          DCD      nrf_nvic_state

                          AREA ||i.sdh_request_observer_notify||, CODE, READONLY, ALIGN=2

                  sdh_request_observer_notify PROC
;;;91      */
;;;92     static ret_code_t sdh_request_observer_notify(nrf_sdh_req_evt_t req)
000000  b5fe              PUSH     {r1-r7,lr}
;;;93     {
000002  4605              MOV      r5,r0
;;;94         nrf_section_iter_t iter;
;;;95     
;;;96         NRF_LOG_DEBUG("State request: 0x%08X", req);
;;;97     
;;;98         for (nrf_section_iter_init(&iter, &sdh_req_observers);
000004  490c              LDR      r1,|L14.56|
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       nrf_section_iter_init
00000c  e00d              B        |L14.42|
                  |L14.14|
;;;99              nrf_section_iter_get(&iter) != NULL;
;;;100             nrf_section_iter_next(&iter))
;;;101        {
;;;102            nrf_sdh_req_observer_t    * p_observer;
;;;103            nrf_sdh_req_evt_handler_t   handler;
;;;104    
;;;105            p_observer = (nrf_sdh_req_observer_t *) nrf_section_iter_get(&iter);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       nrf_section_iter_get
000014  4604              MOV      r4,r0
;;;106            handler    = p_observer->handler;
000016  6826              LDR      r6,[r4,#0]
;;;107    
;;;108            if (handler(req, p_observer->p_context))
000018  4628              MOV      r0,r5
00001a  6861              LDR      r1,[r4,#4]
00001c  47b0              BLX      r6
00001e  b908              CBNZ     r0,|L14.36|
;;;109            {
;;;110                NRF_LOG_DEBUG("Notify observer 0x%08X => ready", p_observer);
;;;111            }
;;;112            else
;;;113            {
;;;114                // Process is stopped.
;;;115                NRF_LOG_DEBUG("Notify observer 0x%08X => blocking", p_observer);
;;;116                return NRF_ERROR_BUSY;
000020  2011              MOVS     r0,#0x11
                  |L14.34|
;;;117            }
;;;118        }
;;;119        return NRF_SUCCESS;
;;;120    }
000022  bdfe              POP      {r1-r7,pc}
                  |L14.36|
000024  4668              MOV      r0,sp                 ;100
000026  f7fffffe          BL       nrf_section_iter_next
                  |L14.42|
00002a  4668              MOV      r0,sp                 ;99
00002c  f7fffffe          BL       nrf_section_iter_get
000030  2800              CMP      r0,#0                 ;99
000032  d1ec              BNE      |L14.14|
000034  bf00              NOP                            ;119
000036  e7f4              B        |L14.34|
;;;121    
                          ENDP

                  |L14.56|
                          DCD      sdh_req_observers

                          AREA ||i.sdh_state_observer_notify||, CODE, READONLY, ALIGN=2

                  sdh_state_observer_notify PROC
;;;126     */
;;;127    static void sdh_state_observer_notify(nrf_sdh_state_evt_t evt)
000000  b5fe              PUSH     {r1-r7,lr}
;;;128    {
000002  4605              MOV      r5,r0
;;;129        nrf_section_iter_t iter;
;;;130    
;;;131        NRF_LOG_DEBUG("State change: 0x%08X", evt);
;;;132    
;;;133        for (nrf_section_iter_init(&iter, &sdh_state_observers);
000004  490a              LDR      r1,|L15.48|
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       nrf_section_iter_init
00000c  e00a              B        |L15.36|
                  |L15.14|
;;;134             nrf_section_iter_get(&iter) != NULL;
;;;135             nrf_section_iter_next(&iter))
;;;136        {
;;;137            nrf_sdh_state_observer_t    * p_observer;
;;;138            nrf_sdh_state_evt_handler_t   handler;
;;;139    
;;;140            p_observer = (nrf_sdh_state_observer_t *) nrf_section_iter_get(&iter);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       nrf_section_iter_get
000014  4604              MOV      r4,r0
;;;141            handler    = p_observer->handler;
000016  6826              LDR      r6,[r4,#0]
;;;142    
;;;143            handler(evt, p_observer->p_context);
000018  4628              MOV      r0,r5
00001a  6861              LDR      r1,[r4,#4]
00001c  47b0              BLX      r6
00001e  4668              MOV      r0,sp                 ;135
000020  f7fffffe          BL       nrf_section_iter_next
                  |L15.36|
000024  4668              MOV      r0,sp                 ;134
000026  f7fffffe          BL       nrf_section_iter_get
00002a  2800              CMP      r0,#0                 ;134
00002c  d1ef              BNE      |L15.14|
;;;144        }
;;;145    }
00002e  bdfe              POP      {r1-r7,pc}
;;;146    
                          ENDP

                  |L15.48|
                          DCD      sdh_state_observers

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sdh_req_observers_array
                          DCD      ||sdh_req_observers0$$Base||
                          DCD      ||sdh_req_observers0$$Limit||
                          DCD      ||sdh_req_observers1$$Base||
                          DCD      ||sdh_req_observers1$$Limit||
                  sdh_req_observers
                          DCD      sdh_req_observers_array
                          DCD      sdh_req_observers_array+0x10
                          DCD      0x00000008
                  sdh_state_observers_array
                          DCD      ||sdh_state_observers0$$Base||
                          DCD      ||sdh_state_observers0$$Limit||
                          DCD      ||sdh_state_observers1$$Base||
                          DCD      ||sdh_state_observers1$$Limit||
                  sdh_state_observers
                          DCD      sdh_state_observers_array
                          DCD      sdh_state_observers_array+0x10
                          DCD      0x00000008
                  sdh_stack_observers_array
                          DCD      ||sdh_stack_observers0$$Base||
                          DCD      ||sdh_stack_observers0$$Limit||
                          DCD      ||sdh_stack_observers1$$Base||
                          DCD      ||sdh_stack_observers1$$Limit||
                  sdh_stack_observers
                          DCD      sdh_stack_observers_array
                          DCD      sdh_stack_observers_array+0x10
                          DCD      0x00000008
000054  01000007          DCB      0x01,0x00,0x00,0x07

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  6e72665f          DCB      0x6e,0x72,0x66,0x5f
000004  73646800          DCB      0x73,0x64,0x68,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  m_nrf_sdh_enabled
000000  00                DCB      0x00
                  m_nrf_sdh_suspended
000001  00                DCB      0x00
                  m_nrf_sdh_continue
000002  00                DCB      0x00

                          AREA log_const_data, DATA, READONLY, ALIGN=2

                  m_nrf_log_nrf_sdh_logs_data_const
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
000004  00000300          DCB      0x00,0x00,0x03,0x00

                          AREA log_dynamic_data, DATA, ALIGN=2

                  m_nrf_log_nrf_sdh_logs_data_dynamic
                  |symbol_number.141|
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\nrf_sdh.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_nrf_sdh_c_b590db75____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_nrf_sdh_c_b590db75____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_nrf_sdh_c_b590db75____REVSH|
#line 402
|__asm___9_nrf_sdh_c_b590db75____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_nrf_sdh_c_b590db75____RRX|
#line 587
|__asm___9_nrf_sdh_c_b590db75____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
