; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\main.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\main.crf ..\..\..\main.c]
                          THUMB

                          AREA ||i.advertising_init||, CODE, READONLY, ALIGN=2

                  advertising_init PROC
;;;875     */
;;;876    static void advertising_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;877    {
000002  b0a9              SUB      sp,sp,#0xa4
;;;878        uint32_t               err_code;
;;;879        ble_advertising_init_t init;
;;;880    
;;;881        memset(&init, 0, sizeof(init));
000004  21a0              MOVS     r1,#0xa0
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       __aeabi_memclr4
;;;882    
;;;883        init.advdata.name_type               = BLE_ADVDATA_FULL_NAME;
00000c  2002              MOVS     r0,#2
00000e  f88d0004          STRB     r0,[sp,#4]
;;;884        init.advdata.include_appearance      = true;
000012  2001              MOVS     r0,#1
000014  f88d0006          STRB     r0,[sp,#6]
;;;885        init.advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
000018  2006              MOVS     r0,#6
00001a  f88d0007          STRB     r0,[sp,#7]
;;;886        init.advdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
00001e  2002              MOVS     r0,#2
000020  f8ad0014          STRH     r0,[sp,#0x14]
;;;887        init.advdata.uuids_complete.p_uuids  = m_adv_uuids;
000024  4914              LDR      r1,|L1.120|
000026  9106              STR      r1,[sp,#0x18]
;;;888    
;;;889        init.config.ble_adv_fast_enabled  = true;
000028  2101              MOVS     r1,#1
00002a  f88d1080          STRB     r1,[sp,#0x80]
;;;890        init.config.ble_adv_fast_interval = APP_ADV_INTERVAL;
00002e  2140              MOVS     r1,#0x40
000030  9123              STR      r1,[sp,#0x8c]
;;;891        init.config.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;
000032  2105              MOVS     r1,#5
000034  9124              STR      r1,[sp,#0x90]
;;;892        init.config.ble_adv_slow_enabled  = true;
000036  2101              MOVS     r1,#1
000038  f88d1081          STRB     r1,[sp,#0x81]
;;;893        init.config.ble_adv_slow_interval = APP_ADV_SLOW_INTERVAL;
00003c  f44f7148          MOV      r1,#0x320
000040  9125              STR      r1,[sp,#0x94]
;;;894        init.config.ble_adv_slow_timeout  = APP_ADV_SLOW_TIMEOUT_IN_SECONDS;
000042  210a              MOVS     r1,#0xa
000044  9126              STR      r1,[sp,#0x98]
;;;895    
;;;896        init.evt_handler = on_adv_evt;
000046  480d              LDR      r0,|L1.124|
000048  9027              STR      r0,[sp,#0x9c]
;;;897    
;;;898        err_code = ble_advertising_init(&m_advertising, &init);
00004a  a901              ADD      r1,sp,#4
00004c  480c              LDR      r0,|L1.128|
00004e  f7fffffe          BL       ble_advertising_init
000052  4604              MOV      r4,r0
;;;899        APP_ERROR_CHECK(err_code);
000054  bf00              NOP      
000056  4625              MOV      r5,r4
000058  b13d              CBZ      r5,|L1.106|
00005a  bf00              NOP      
00005c  a209              ADR      r2,|L1.132|
00005e  f2403183          MOV      r1,#0x383
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       app_error_handler
000068  bf00              NOP      
                  |L1.106|
00006a  bf00              NOP      
;;;900    
;;;901        ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);
00006c  2101              MOVS     r1,#1
00006e  4804              LDR      r0,|L1.128|
000070  f7fffffe          BL       ble_advertising_conn_cfg_tag_set
;;;902    }
000074  b029              ADD      sp,sp,#0xa4
000076  bd30              POP      {r4,r5,pc}
;;;903    
                          ENDP

                  |L1.120|
                          DCD      m_adv_uuids
                  |L1.124|
                          DCD      on_adv_evt
                  |L1.128|
                          DCD      m_advertising
                  |L1.132|
000084  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000088  2e5c2e2e
00008c  5c6d6169
000090  6e2e6300

                          AREA ||i.advertising_start||, CODE, READONLY, ALIGN=2

                  advertising_start PROC
;;;946     */
;;;947    static void advertising_start(bool erase_bonds)
000000  b570              PUSH     {r4-r6,lr}
;;;948    {
000002  4604              MOV      r4,r0
;;;949        if (erase_bonds == true)
000004  2c01              CMP      r4,#1
000006  d102              BNE      |L2.14|
;;;950        {
;;;951            delete_bonds();
000008  f7fffffe          BL       delete_bonds
00000c  e019              B        |L2.66|
                  |L2.14|
;;;952            // Advertising is started by PM_EVT_PEERS_DELETE_SUCCEEDED event.
;;;953        }
;;;954        else
;;;955        {
;;;956            uint32_t err_code = ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST);
00000e  2103              MOVS     r1,#3
000010  480c              LDR      r0,|L2.68|
000012  f7fffffe          BL       ble_advertising_start
000016  4605              MOV      r5,r0
;;;957            APP_ERROR_CHECK(err_code);
000018  bf00              NOP      
00001a  462e              MOV      r6,r5
00001c  b13e              CBZ      r6,|L2.46|
00001e  bf00              NOP      
000020  a209              ADR      r2,|L2.72|
000022  f24031bd          MOV      r1,#0x3bd
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       app_error_handler
00002c  bf00              NOP      
                  |L2.46|
00002e  bf00              NOP      
;;;958    
;;;959            NRF_LOG_DEBUG("advertising is started");
000030  4909              LDR      r1,|L2.88|
000032  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000034  2204              MOVS     r2,#4
000036  ea424001          ORR      r0,r2,r1,LSL #16
00003a  a108              ADR      r1,|L2.92|
00003c  f7fffffe          BL       nrf_log_frontend_std_0
;;;960        }
000040  bf00              NOP      
                  |L2.66|
;;;961    }
000042  bd70              POP      {r4-r6,pc}
;;;962    
                          ENDP

                  |L2.68|
                          DCD      m_advertising
                  |L2.72|
000048  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00004c  2e5c2e2e
000050  5c6d6169
000054  6e2e6300
                  |L2.88|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L2.92|
00005c  61647665          DCB      "advertising is started",0
000060  72746973
000064  696e6720
000068  69732073
00006c  74617274
000070  656400  
000073  00                DCB      0

                          AREA ||i.app_shutdown_handler||, CODE, READONLY, ALIGN=2

                  app_shutdown_handler PROC
;;;149     */
;;;150    static bool app_shutdown_handler(nrf_pwr_mgmt_evt_t event)
000000  b510              PUSH     {r4,lr}
;;;151    {
000002  4604              MOV      r4,r0
;;;152        switch (event)
000004  2c02              CMP      r4,#2
000006  d108              BNE      |L3.26|
;;;153        {
;;;154            case NRF_PWR_MGMT_EVT_PREPARE_DFU:
;;;155                NRF_LOG_INFO("Power management wants to reset to DFU mode.");
000008  490a              LDR      r1,|L3.52|
00000a  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
00000c  2203              MOVS     r2,#3
00000e  ea424001          ORR      r0,r2,r1,LSL #16
000012  a109              ADR      r1,|L3.56|
000014  f7fffffe          BL       nrf_log_frontend_std_0
;;;156                // YOUR_JOB: Get ready to reset into DFU mode
;;;157                //
;;;158                // If you aren't finished with any ongoing tasks, return "false" to
;;;159                // signal to the system that reset is impossible at this stage.
;;;160                //
;;;161                // Here is an example using a variable to delay resetting the device.
;;;162                //
;;;163                // if (!m_ready_for_reset)
;;;164                // {
;;;165                //      return false;
;;;166                // }
;;;167                // else
;;;168                //{
;;;169                //
;;;170                //    // Device ready to enter
;;;171                //    uint32_t err_code;
;;;172                //    err_code = sd_softdevice_disable();
;;;173                //    APP_ERROR_CHECK(err_code);
;;;174                //    err_code = app_timer_stop_all();
;;;175                //    APP_ERROR_CHECK(err_code);
;;;176                //}
;;;177                break;
000018  e001              B        |L3.30|
                  |L3.26|
;;;178    
;;;179            default:
;;;180                // YOUR_JOB: Implement any of the other events available from the power management module:
;;;181                //      -NRF_PWR_MGMT_EVT_PREPARE_SYSOFF
;;;182                //      -NRF_PWR_MGMT_EVT_PREPARE_WAKEUP
;;;183                //      -NRF_PWR_MGMT_EVT_PREPARE_RESET
;;;184                return true;
00001a  2001              MOVS     r0,#1
                  |L3.28|
;;;185        }
;;;186    
;;;187        NRF_LOG_INFO("Power management allowed to reset to DFU mode.");
;;;188        return true;
;;;189    }
00001c  bd10              POP      {r4,pc}
                  |L3.30|
00001e  bf00              NOP                            ;177
000020  4904              LDR      r1,|L3.52|
000022  8809              LDRH     r1,[r1,#0]            ;187  ; m_nrf_log_app_logs_data_dynamic
000024  2203              MOVS     r2,#3                 ;187
000026  ea424001          ORR      r0,r2,r1,LSL #16      ;187
00002a  a10f              ADR      r1,|L3.104|
00002c  f7fffffe          BL       nrf_log_frontend_std_0
000030  2001              MOVS     r0,#1                 ;188
000032  e7f3              B        |L3.28|
;;;190    
                          ENDP

                  |L3.52|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L3.56|
000038  506f7765          DCB      "Power management wants to reset to DFU mode.",0
00003c  72206d61
000040  6e616765
000044  6d656e74
000048  2077616e
00004c  74732074
000050  6f207265
000054  73657420
000058  746f2044
00005c  4655206d
000060  6f64652e
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L3.104|
000068  506f7765          DCB      "Power management allowed to reset to DFU mode.",0
00006c  72206d61
000070  6e616765
000074  6d656e74
000078  20616c6c
00007c  6f776564
000080  20746f20
000084  72657365
000088  7420746f
00008c  20444655
000090  206d6f64
000094  652e00  
000097  00                DCB      0

                          AREA ||i.application_timers_start||, CODE, READONLY, ALIGN=1

                  application_timers_start PROC
;;;607     */
;;;608    static void application_timers_start(void)
000000  4770              BX       lr
;;;609    {
;;;610        /* YOUR_JOB: Start your timers. below is an example of how to start a timer.
;;;611           uint32_t err_code;
;;;612           err_code = app_timer_start(m_app_timer_id, TIMER_INTERVAL, NULL);
;;;613           APP_ERROR_CHECK(err_code); */
;;;614    }
;;;615    
                          ENDP


                          AREA ||i.assert_nrf_callback||, CODE, READONLY, ALIGN=2

                  assert_nrf_callback PROC
;;;257     */
;;;258    void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
000000  b570              PUSH     {r4-r6,lr}
;;;259    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;260        app_error_handler(DEAD_BEEF, line_num, p_file_name);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  4802              LDR      r0,|L5.20|
00000c  f7fffffe          BL       app_error_handler
;;;261    }
000010  bd70              POP      {r4-r6,pc}
;;;262    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0xdeadbeef

                          AREA ||i.ble_dfu_evt_handler||, CODE, READONLY, ALIGN=2

                  ble_dfu_evt_handler PROC
;;;209     */
;;;210    static void ble_dfu_evt_handler(ble_dfu_buttonless_evt_type_t event)
000000  b510              PUSH     {r4,lr}
;;;211    {
000002  4604              MOV      r4,r0
;;;212        switch (event)
000004  b134              CBZ      r4,|L6.20|
000006  2c01              CMP      r4,#1
000008  d00d              BEQ      |L6.38|
00000a  2c02              CMP      r4,#2
00000c  d014              BEQ      |L6.56|
00000e  2c03              CMP      r4,#3
000010  d127              BNE      |L6.98|
000012  e01a              B        |L6.74|
                  |L6.20|
;;;213        {
;;;214            case BLE_DFU_EVT_BOOTLOADER_ENTER_PREPARE:
;;;215                NRF_LOG_INFO("Device is preparing to enter bootloader mode.");
000014  4918              LDR      r1,|L6.120|
000016  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000018  2203              MOVS     r2,#3
00001a  ea424001          ORR      r0,r2,r1,LSL #16
00001e  a117              ADR      r1,|L6.124|
000020  f7fffffe          BL       nrf_log_frontend_std_0
;;;216                // YOUR_JOB: Disconnect all bonded devices that currently are connected.
;;;217                //           This is required to receive a service changed indication
;;;218                //           on bootup after a successful (or aborted) Device Firmware Update.
;;;219                break;
000024  e026              B        |L6.116|
                  |L6.38|
;;;220    
;;;221            case BLE_DFU_EVT_BOOTLOADER_ENTER:
;;;222                // YOUR_JOB: Write app-specific unwritten data to FLASH, control finalization of this
;;;223                //           by delaying reset by reporting false in app_shutdown_handler
;;;224                NRF_LOG_INFO("Device will enter bootloader mode.");
000026  4914              LDR      r1,|L6.120|
000028  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
00002a  2203              MOVS     r2,#3
00002c  ea424001          ORR      r0,r2,r1,LSL #16
000030  a11e              ADR      r1,|L6.172|
000032  f7fffffe          BL       nrf_log_frontend_std_0
;;;225                break;
000036  e01d              B        |L6.116|
                  |L6.56|
;;;226    
;;;227            case BLE_DFU_EVT_BOOTLOADER_ENTER_FAILED:
;;;228                NRF_LOG_ERROR("Request to enter bootloader mode failed asynchroneously.");
000038  490f              LDR      r1,|L6.120|
00003a  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
00003c  2201              MOVS     r2,#1
00003e  ea424001          ORR      r0,r2,r1,LSL #16
000042  a123              ADR      r1,|L6.208|
000044  f7fffffe          BL       nrf_log_frontend_std_0
;;;229                // YOUR_JOB: Take corrective measures to resolve the issue
;;;230                //           like calling APP_ERROR_CHECK to reset the device.
;;;231                break;
000048  e014              B        |L6.116|
                  |L6.74|
;;;232    
;;;233            case BLE_DFU_EVT_RESPONSE_SEND_ERROR:
;;;234                NRF_LOG_ERROR("Request to send a response to client failed.");
00004a  490b              LDR      r1,|L6.120|
00004c  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
00004e  2201              MOVS     r2,#1
000050  ea424001          ORR      r0,r2,r1,LSL #16
000054  a12d              ADR      r1,|L6.268|
000056  f7fffffe          BL       nrf_log_frontend_std_0
;;;235                // YOUR_JOB: Take corrective measures to resolve the issue
;;;236                //           like calling APP_ERROR_CHECK to reset the device.
;;;237                APP_ERROR_CHECK(false);
00005a  bf00              NOP      
00005c  2000              MOVS     r0,#0
00005e  bf00              NOP      
;;;238                break;
000060  e008              B        |L6.116|
                  |L6.98|
;;;239    
;;;240            default:
;;;241                NRF_LOG_ERROR("Unknown event from ble_dfu_buttonless.");
000062  4905              LDR      r1,|L6.120|
000064  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000066  2201              MOVS     r2,#1
000068  ea424001          ORR      r0,r2,r1,LSL #16
00006c  a133              ADR      r1,|L6.316|
00006e  f7fffffe          BL       nrf_log_frontend_std_0
;;;242                break;
000072  bf00              NOP      
                  |L6.116|
000074  bf00              NOP                            ;219
;;;243        }
;;;244    }
000076  bd10              POP      {r4,pc}
;;;245    
                          ENDP

                  |L6.120|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L6.124|
00007c  44657669          DCB      "Device is preparing to enter bootloader mode.",0
000080  63652069
000084  73207072
000088  65706172
00008c  696e6720
000090  746f2065
000094  6e746572
000098  20626f6f
00009c  746c6f61
0000a0  64657220
0000a4  6d6f6465
0000a8  2e00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L6.172|
0000ac  44657669          DCB      "Device will enter bootloader mode.",0
0000b0  63652077
0000b4  696c6c20
0000b8  656e7465
0000bc  7220626f
0000c0  6f746c6f
0000c4  61646572
0000c8  206d6f64
0000cc  652e00  
0000cf  00                DCB      0
                  |L6.208|
0000d0  52657175          DCB      "Request to enter bootloader mode failed asynchroneously"
0000d4  65737420
0000d8  746f2065
0000dc  6e746572
0000e0  20626f6f
0000e4  746c6f61
0000e8  64657220
0000ec  6d6f6465
0000f0  20666169
0000f4  6c656420
0000f8  6173796e
0000fc  6368726f
000100  6e656f75
000104  736c79  
000107  2e00              DCB      ".",0
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L6.268|
00010c  52657175          DCB      "Request to send a response to client failed.",0
000110  65737420
000114  746f2073
000118  656e6420
00011c  61207265
000120  73706f6e
000124  73652074
000128  6f20636c
00012c  69656e74
000130  20666169
000134  6c65642e
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L6.316|
00013c  556e6b6e          DCB      "Unknown event from ble_dfu_buttonless.",0
000140  6f776e20
000144  6576656e
000148  74206672
00014c  6f6d2062
000150  6c655f64
000154  66755f62
000158  7574746f
00015c  6e6c6573
000160  732e00  
000163  00                DCB      0

                          AREA ||i.ble_evt_handler||, CODE, READONLY, ALIGN=2

                  ble_evt_handler PROC
;;;673     */
;;;674    static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
000000  b5f0              PUSH     {r4-r7,lr}
;;;675    {
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;676        uint32_t err_code = NRF_SUCCESS;
000008  2400              MOVS     r4,#0
;;;677    
;;;678        switch (p_ble_evt->header.evt_id)
00000a  8828              LDRH     r0,[r5,#0]
00000c  2821              CMP      r0,#0x21
00000e  d033              BEQ      |L7.120|
000010  dc06              BGT      |L7.32|
000012  2801              CMP      r0,#1
000014  d07d              BEQ      |L7.274|
000016  2810              CMP      r0,#0x10
000018  d01a              BEQ      |L7.80|
00001a  2811              CMP      r0,#0x11
                  |L7.28|
00001c  d17a              BNE      |L7.276|
00001e  e006              B        |L7.46|
                  |L7.32|
000020  283b              CMP      r0,#0x3b
000022  d044              BEQ      |L7.174|
000024  2851              CMP      r0,#0x51
000026  d076              BEQ      |L7.278|
000028  2856              CMP      r0,#0x56
00002a  d1f7              BNE      |L7.28|
00002c  e058              B        |L7.224|
                  |L7.46|
;;;679        {
;;;680            case BLE_GAP_EVT_DISCONNECTED:
;;;681                err_code = bsp_indication_set(BSP_INDICATE_IDLE);
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       bsp_indication_set
000034  4604              MOV      r4,r0
;;;682                APP_ERROR_CHECK(err_code);
000036  bf00              NOP      
000038  4626              MOV      r6,r4
00003a  b13e              CBZ      r6,|L7.76|
00003c  bf00              NOP      
00003e  a25a              ADR      r2,|L7.424|
000040  f24021aa          MOV      r1,#0x2aa
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       app_error_handler
00004a  bf00              NOP      
                  |L7.76|
00004c  bf00              NOP      
;;;683                break;
00004e  e0a8              B        |L7.418|
                  |L7.80|
;;;684    
;;;685            case BLE_GAP_EVT_CONNECTED:
;;;686                err_code = bsp_indication_set(BSP_INDICATE_CONNECTED);
000050  2007              MOVS     r0,#7
000052  f7fffffe          BL       bsp_indication_set
000056  4604              MOV      r4,r0
;;;687                APP_ERROR_CHECK(err_code);
000058  bf00              NOP      
00005a  4626              MOV      r6,r4
00005c  b13e              CBZ      r6,|L7.110|
00005e  bf00              NOP      
000060  a251              ADR      r2,|L7.424|
000062  f24021af          MOV      r1,#0x2af
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       app_error_handler
00006c  bf00              NOP      
                  |L7.110|
00006e  bf00              NOP      
;;;688                m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000070  88a8              LDRH     r0,[r5,#4]
000072  4951              LDR      r1,|L7.440|
000074  8008              STRH     r0,[r1,#0]
;;;689                break;
000076  e094              B        |L7.418|
                  |L7.120|
;;;690    
;;;691    #if defined(S132)
;;;692            case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
;;;693            {
;;;694                NRF_LOG_DEBUG("PHY update request.");
000078  4950              LDR      r1,|L7.444|
00007a  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
00007c  2204              MOVS     r2,#4
00007e  ea424001          ORR      r0,r2,r1,LSL #16
000082  a14f              ADR      r1,|L7.448|
000084  f7fffffe          BL       nrf_log_frontend_std_0
;;;695                ble_gap_phys_t const phys =
000088  2000              MOVS     r0,#0
00008a  9008              STR      r0,[sp,#0x20]
;;;696                {
;;;697                    .rx_phys = BLE_GAP_PHY_AUTO,
;;;698                    .tx_phys = BLE_GAP_PHY_AUTO,
;;;699                };
;;;700                err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
00008c  88a8              LDRH     r0,[r5,#4]
00008e  a908              ADD      r1,sp,#0x20
000090  df8f              SVC      #0x8f
000092  4604              MOV      r4,r0
;;;701                APP_ERROR_CHECK(err_code);
000094  bf00              NOP      
000096  4626              MOV      r6,r4
000098  b13e              CBZ      r6,|L7.170|
00009a  bf00              NOP      
00009c  a242              ADR      r2,|L7.424|
00009e  f24021bd          MOV      r1,#0x2bd
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       app_error_handler
0000a8  bf00              NOP      
                  |L7.170|
0000aa  bf00              NOP      
;;;702            } break;
0000ac  e079              B        |L7.418|
                  |L7.174|
;;;703    #endif
;;;704    
;;;705            case BLE_GATTC_EVT_TIMEOUT:
;;;706                // Disconnect on GATT Client timeout event.
;;;707                NRF_LOG_DEBUG("GATT Client Timeout.");
0000ae  4943              LDR      r1,|L7.444|
0000b0  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
0000b2  2204              MOVS     r2,#4
0000b4  ea424001          ORR      r0,r2,r1,LSL #16
0000b8  a146              ADR      r1,|L7.468|
0000ba  f7fffffe          BL       nrf_log_frontend_std_0
;;;708                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
0000be  88a8              LDRH     r0,[r5,#4]
0000c0  2113              MOVS     r1,#0x13
0000c2  df76              SVC      #0x76
0000c4  4604              MOV      r4,r0
;;;709                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;710                APP_ERROR_CHECK(err_code);
0000c6  bf00              NOP      
0000c8  4626              MOV      r6,r4
0000ca  b13e              CBZ      r6,|L7.220|
0000cc  bf00              NOP      
0000ce  a236              ADR      r2,|L7.424|
0000d0  f24021c6          MOV      r1,#0x2c6
0000d4  4630              MOV      r0,r6
0000d6  f7fffffe          BL       app_error_handler
0000da  bf00              NOP      
                  |L7.220|
0000dc  bf00              NOP      
;;;711                break;
0000de  e060              B        |L7.418|
                  |L7.224|
;;;712    
;;;713            case BLE_GATTS_EVT_TIMEOUT:
;;;714                // Disconnect on GATT Server timeout event.
;;;715                NRF_LOG_DEBUG("GATT Server Timeout.");
0000e0  4936              LDR      r1,|L7.444|
0000e2  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
0000e4  2204              MOVS     r2,#4
0000e6  ea424001          ORR      r0,r2,r1,LSL #16
0000ea  a140              ADR      r1,|L7.492|
0000ec  f7fffffe          BL       nrf_log_frontend_std_0
;;;716                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
0000f0  88a8              LDRH     r0,[r5,#4]
0000f2  2113              MOVS     r1,#0x13
0000f4  df76              SVC      #0x76
0000f6  4604              MOV      r4,r0
;;;717                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;718                APP_ERROR_CHECK(err_code);
0000f8  bf00              NOP      
0000fa  4626              MOV      r6,r4
0000fc  b13e              CBZ      r6,|L7.270|
0000fe  bf00              NOP      
000100  a229              ADR      r2,|L7.424|
000102  f24021ce          MOV      r1,#0x2ce
000106  4630              MOV      r0,r6
000108  f7fffffe          BL       app_error_handler
00010c  bf00              NOP      
                  |L7.270|
00010e  bf00              NOP      
;;;719                break;
000110  e047              B        |L7.418|
                  |L7.274|
000112  e001              B        |L7.280|
                  |L7.276|
000114  e044              B        |L7.416|
                  |L7.278|
000116  e010              B        |L7.314|
                  |L7.280|
;;;720    
;;;721            case BLE_EVT_USER_MEM_REQUEST:
;;;722                err_code = sd_ble_user_mem_reply(p_ble_evt->evt.gattc_evt.conn_handle, NULL);
000118  88a8              LDRH     r0,[r5,#4]
00011a  2100              MOVS     r1,#0
00011c  df66              SVC      #0x66
00011e  4604              MOV      r4,r0
;;;723                APP_ERROR_CHECK(err_code);
000120  bf00              NOP      
000122  4626              MOV      r6,r4
000124  b13e              CBZ      r6,|L7.310|
000126  bf00              NOP      
000128  a21f              ADR      r2,|L7.424|
00012a  f24021d3          MOV      r1,#0x2d3
00012e  4630              MOV      r0,r6
000130  f7fffffe          BL       app_error_handler
000134  bf00              NOP      
                  |L7.310|
000136  bf00              NOP      
;;;724                break;
000138  e033              B        |L7.418|
                  |L7.314|
;;;725    
;;;726            case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;727            {
;;;728                ble_gatts_evt_rw_authorize_request_t  req;
;;;729                ble_gatts_rw_authorize_reply_params_t auth_reply;
;;;730    
;;;731                req = p_ble_evt->evt.gatts_evt.params.authorize_request;
00013a  2210              MOVS     r2,#0x10
00013c  1da9              ADDS     r1,r5,#6
00013e  a805              ADD      r0,sp,#0x14
000140  f7fffffe          BL       __aeabi_memcpy
;;;732    
;;;733                if (req.type != BLE_GATTS_AUTHORIZE_TYPE_INVALID)
000144  f89d0014          LDRB     r0,[sp,#0x14]
000148  b348              CBZ      r0,|L7.414|
;;;734                {
;;;735                    if ((req.request.write.op == BLE_GATTS_OP_PREP_WRITE_REQ)     ||
00014a  f89d001c          LDRB     r0,[sp,#0x1c]
00014e  2804              CMP      r0,#4
000150  d007              BEQ      |L7.354|
;;;736                        (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_NOW) ||
000152  f89d001c          LDRB     r0,[sp,#0x1c]
000156  2806              CMP      r0,#6
000158  d003              BEQ      |L7.354|
;;;737                        (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL))
00015a  f89d001c          LDRB     r0,[sp,#0x1c]
00015e  2805              CMP      r0,#5
000160  d11d              BNE      |L7.414|
                  |L7.354|
;;;738                    {
;;;739                        if (req.type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
000162  f89d0014          LDRB     r0,[sp,#0x14]
000166  2802              CMP      r0,#2
000168  d102              BNE      |L7.368|
;;;740                        {
;;;741                            auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
00016a  f88d0004          STRB     r0,[sp,#4]
00016e  e002              B        |L7.374|
                  |L7.368|
;;;742                        }
;;;743                        else
;;;744                        {
;;;745                            auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_READ;
000170  2001              MOVS     r0,#1
000172  f88d0004          STRB     r0,[sp,#4]
                  |L7.374|
;;;746                        }
;;;747                        auth_reply.params.write.gatt_status = APP_FEATURE_NOT_SUPPORTED;
000176  f44f70c1          MOV      r0,#0x182
00017a  f8ad0008          STRH     r0,[sp,#8]
;;;748                        err_code = sd_ble_gatts_rw_authorize_reply(p_ble_evt->evt.gatts_evt.conn_handle,
00017e  88a8              LDRH     r0,[r5,#4]
000180  a901              ADD      r1,sp,#4
000182  dfa8              SVC      #0xa8
000184  4604              MOV      r4,r0
;;;749                                                                   &auth_reply);
;;;750                        APP_ERROR_CHECK(err_code);
000186  bf00              NOP      
000188  4626              MOV      r6,r4
00018a  b13e              CBZ      r6,|L7.412|
00018c  bf00              NOP      
00018e  a206              ADR      r2,|L7.424|
000190  f24021ee          MOV      r1,#0x2ee
000194  4630              MOV      r0,r6
000196  f7fffffe          BL       app_error_handler
00019a  bf00              NOP      
                  |L7.412|
00019c  bf00              NOP      
                  |L7.414|
;;;751                    }
;;;752                }
;;;753            } break; // BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST
00019e  e000              B        |L7.418|
                  |L7.416|
;;;754    
;;;755            default:
;;;756                // No implementation needed.
;;;757                break;
0001a0  bf00              NOP      
                  |L7.418|
0001a2  bf00              NOP                            ;683
;;;758        }
;;;759    }
0001a4  b009              ADD      sp,sp,#0x24
0001a6  bdf0              POP      {r4-r7,pc}
;;;760    
                          ENDP

                  |L7.424|
0001a8  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
0001ac  2e5c2e2e
0001b0  5c6d6169
0001b4  6e2e6300
                  |L7.440|
                          DCD      m_conn_handle
                  |L7.444|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L7.448|
0001c0  50485920          DCB      "PHY update request.",0
0001c4  75706461
0001c8  74652072
0001cc  65717565
0001d0  73742e00
                  |L7.468|
0001d4  47415454          DCB      "GATT Client Timeout.",0
0001d8  20436c69
0001dc  656e7420
0001e0  54696d65
0001e4  6f75742e
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L7.492|
0001ec  47415454          DCB      "GATT Server Timeout.",0
0001f0  20536572
0001f4  76657220
0001f8  54696d65
0001fc  6f75742e
000200  00      
000201  00                DCB      0
000202  00                DCB      0
000203  00                DCB      0

                          AREA ||i.ble_stack_init||, CODE, READONLY, ALIGN=2

                  ble_stack_init PROC
;;;765     */
;;;766    static void ble_stack_init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;767    {
;;;768        ret_code_t err_code;
;;;769    
;;;770        err_code = nrf_sdh_enable_request();
000002  f7fffffe          BL       nrf_sdh_enable_request
000006  4604              MOV      r4,r0
;;;771        APP_ERROR_CHECK(err_code);
000008  bf00              NOP      
00000a  4625              MOV      r5,r4
00000c  b13d              CBZ      r5,|L8.30|
00000e  bf00              NOP      
000010  a215              ADR      r2,|L8.104|
000012  f2403103          MOV      r1,#0x303
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       app_error_handler
00001c  bf00              NOP      
                  |L8.30|
00001e  bf00              NOP      
;;;772    
;;;773        // Configure the BLE stack using the default settings.
;;;774        // Fetch the start address of the application RAM.
;;;775        uint32_t ram_start = 0;
000020  2000              MOVS     r0,#0
000022  9000              STR      r0,[sp,#0]
;;;776        err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
000024  4669              MOV      r1,sp
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       nrf_sdh_ble_default_cfg_set
00002c  4604              MOV      r4,r0
;;;777        APP_ERROR_CHECK(err_code);
00002e  bf00              NOP      
000030  4625              MOV      r5,r4
000032  b13d              CBZ      r5,|L8.68|
000034  bf00              NOP      
000036  a20c              ADR      r2,|L8.104|
000038  f2403109          MOV      r1,#0x309
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       app_error_handler
000042  bf00              NOP      
                  |L8.68|
000044  bf00              NOP      
;;;778    
;;;779        // Enable BLE stack.
;;;780        err_code = nrf_sdh_ble_enable(&ram_start);
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       nrf_sdh_ble_enable
00004c  4604              MOV      r4,r0
;;;781        APP_ERROR_CHECK(err_code);
00004e  bf00              NOP      
000050  4625              MOV      r5,r4
000052  b13d              CBZ      r5,|L8.100|
000054  bf00              NOP      
000056  a204              ADR      r2,|L8.104|
000058  f240310d          MOV      r1,#0x30d
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       app_error_handler
000062  bf00              NOP      
                  |L8.100|
000064  bf00              NOP      
;;;782    
;;;783        NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
;;;784    }
000066  bd38              POP      {r3-r5,pc}
;;;785    
                          ENDP

                  |L8.104|
000068  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00006c  2e5c2e2e
000070  5c6d6169
000074  6e2e6300

                          AREA ||i.bsp_event_handler||, CODE, READONLY, ALIGN=2

                  bsp_event_handler PROC
;;;837     */
;;;838    static void bsp_event_handler(bsp_event_t event)
000000  b570              PUSH     {r4-r6,lr}
;;;839    {
000002  4605              MOV      r5,r0
;;;840        uint32_t err_code;
;;;841    
;;;842        switch (event)
000004  2d04              CMP      r5,#4
000006  d006              BEQ      |L9.22|
000008  2d07              CMP      r5,#7
00000a  d018              BEQ      |L9.62|
00000c  2d0a              CMP      r5,#0xa
00000e  d12f              BNE      |L9.112|
;;;843        {
;;;844            case BSP_EVENT_SLEEP:
;;;845                sleep_mode_enter();
000010  f7fffffe          BL       sleep_mode_enter
;;;846                break; // BSP_EVENT_SLEEP
000014  e02d              B        |L9.114|
                  |L9.22|
;;;847    
;;;848            case BSP_EVENT_DISCONNECT:
;;;849                err_code = sd_ble_gap_disconnect(m_conn_handle,
000016  2113              MOVS     r1,#0x13
000018  4817              LDR      r0,|L9.120|
00001a  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00001c  df76              SVC      #0x76
00001e  4604              MOV      r4,r0
;;;850                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;851                if (err_code != NRF_ERROR_INVALID_STATE)
000020  2c08              CMP      r4,#8
000022  d00b              BEQ      |L9.60|
;;;852                {
;;;853                    APP_ERROR_CHECK(err_code);
000024  bf00              NOP      
000026  4626              MOV      r6,r4
000028  b13e              CBZ      r6,|L9.58|
00002a  bf00              NOP      
00002c  a213              ADR      r2,|L9.124|
00002e  f2403155          MOV      r1,#0x355
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       app_error_handler
000038  bf00              NOP      
                  |L9.58|
00003a  bf00              NOP      
                  |L9.60|
;;;854                }
;;;855                break; // BSP_EVENT_DISCONNECT
00003c  e019              B        |L9.114|
                  |L9.62|
;;;856    
;;;857            case BSP_EVENT_WHITELIST_OFF:
;;;858                if (m_conn_handle == BLE_CONN_HANDLE_INVALID)
00003e  480e              LDR      r0,|L9.120|
000040  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000042  f64f71ff          MOV      r1,#0xffff
000046  4288              CMP      r0,r1
000048  d111              BNE      |L9.110|
;;;859                {
;;;860                    err_code = ble_advertising_restart_without_whitelist(&m_advertising);
00004a  4810              LDR      r0,|L9.140|
00004c  f7fffffe          BL       ble_advertising_restart_without_whitelist
000050  4604              MOV      r4,r0
;;;861                    if (err_code != NRF_ERROR_INVALID_STATE)
000052  2c08              CMP      r4,#8
000054  d00b              BEQ      |L9.110|
;;;862                    {
;;;863                        APP_ERROR_CHECK(err_code);
000056  bf00              NOP      
000058  4626              MOV      r6,r4
00005a  b13e              CBZ      r6,|L9.108|
00005c  bf00              NOP      
00005e  a207              ADR      r2,|L9.124|
000060  f240315f          MOV      r1,#0x35f
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       app_error_handler
00006a  bf00              NOP      
                  |L9.108|
00006c  bf00              NOP      
                  |L9.110|
;;;864                    }
;;;865                }
;;;866                break; // BSP_EVENT_KEY_0
00006e  e000              B        |L9.114|
                  |L9.112|
;;;867    
;;;868            default:
;;;869                break;
000070  bf00              NOP      
                  |L9.114|
000072  bf00              NOP                            ;846
;;;870        }
;;;871    }
000074  bd70              POP      {r4-r6,pc}
;;;872    
                          ENDP

000076  0000              DCW      0x0000
                  |L9.120|
                          DCD      m_conn_handle
                  |L9.124|
00007c  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000080  2e5c2e2e
000084  5c6d6169
000088  6e2e6300
                  |L9.140|
                          DCD      m_advertising

                          AREA ||i.buttons_leds_init||, CODE, READONLY, ALIGN=2

                  buttons_leds_init PROC
;;;908     */
;;;909    static void buttons_leds_init(bool * p_erase_bonds)
000000  b5f8              PUSH     {r3-r7,lr}
;;;910    {
000002  4605              MOV      r5,r0
;;;911        uint32_t err_code;
;;;912        bsp_event_t startup_event;
;;;913    
;;;914        err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS, bsp_event_handler);
000004  4915              LDR      r1,|L10.92|
000006  2003              MOVS     r0,#3
000008  f7fffffe          BL       bsp_init
00000c  4604              MOV      r4,r0
;;;915        APP_ERROR_CHECK(err_code);
00000e  bf00              NOP      
000010  4626              MOV      r6,r4
000012  b13e              CBZ      r6,|L10.36|
000014  bf00              NOP      
000016  a212              ADR      r2,|L10.96|
000018  f2403193          MOV      r1,#0x393
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       app_error_handler
000022  bf00              NOP      
                  |L10.36|
000024  bf00              NOP      
;;;916    
;;;917        err_code = bsp_btn_ble_init(NULL, &startup_event);
000026  4669              MOV      r1,sp
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       bsp_btn_ble_init
00002e  4604              MOV      r4,r0
;;;918        APP_ERROR_CHECK(err_code);
000030  bf00              NOP      
000032  4626              MOV      r6,r4
000034  b13e              CBZ      r6,|L10.70|
000036  bf00              NOP      
000038  a209              ADR      r2,|L10.96|
00003a  f2403196          MOV      r1,#0x396
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       app_error_handler
000044  bf00              NOP      
                  |L10.70|
000046  bf00              NOP      
;;;919    
;;;920        *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);
000048  f89d0000          LDRB     r0,[sp,#0]
00004c  2802              CMP      r0,#2
00004e  d101              BNE      |L10.84|
000050  2001              MOVS     r0,#1
000052  e000              B        |L10.86|
                  |L10.84|
000054  2000              MOVS     r0,#0
                  |L10.86|
000056  7028              STRB     r0,[r5,#0]
;;;921    }
000058  bdf8              POP      {r3-r7,pc}
;;;922    
                          ENDP

00005a  0000              DCW      0x0000
                  |L10.92|
                          DCD      bsp_event_handler
                  |L10.96|
000060  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000064  2e5c2e2e
000068  5c6d6169
00006c  6e2e6300

                          AREA ||i.conn_params_error_handler||, CODE, READONLY, ALIGN=2

                  conn_params_error_handler PROC
;;;576     */
;;;577    static void conn_params_error_handler(uint32_t nrf_error)
000000  b510              PUSH     {r4,lr}
;;;578    {
000002  4604              MOV      r4,r0
;;;579        APP_ERROR_HANDLER(nrf_error);
000004  bf00              NOP      
000006  a204              ADR      r2,|L11.24|
000008  f2402143          MOV      r1,#0x243
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       app_error_handler
000012  bf00              NOP      
;;;580    }
000014  bd10              POP      {r4,pc}
;;;581    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
000018  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00001c  2e5c2e2e
000020  5c6d6169
000024  6e2e6300

                          AREA ||i.conn_params_init||, CODE, READONLY, ALIGN=2

                  conn_params_init PROC
;;;584     */
;;;585    static void conn_params_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;586    {
000002  b087              SUB      sp,sp,#0x1c
;;;587        uint32_t               err_code;
;;;588        ble_conn_params_init_t cp_init;
;;;589    
;;;590        memset(&cp_init, 0, sizeof(cp_init));
000004  211c              MOVS     r1,#0x1c
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;591    
;;;592        cp_init.p_conn_params                  = NULL;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;593        cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
000010  f44f3020          MOV      r0,#0x28000
000014  9001              STR      r0,[sp,#4]
;;;594        cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
000016  f44f2070          MOV      r0,#0xf0000
00001a  9002              STR      r0,[sp,#8]
;;;595        cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
00001c  2003              MOVS     r0,#3
00001e  f88d000c          STRB     r0,[sp,#0xc]
;;;596        cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
000022  2000              MOVS     r0,#0
000024  f8ad000e          STRH     r0,[sp,#0xe]
;;;597        cp_init.disconnect_on_fail             = false;
000028  f88d0010          STRB     r0,[sp,#0x10]
;;;598        cp_init.evt_handler                    = on_conn_params_evt;
00002c  480a              LDR      r0,|L12.88|
00002e  9005              STR      r0,[sp,#0x14]
;;;599        cp_init.error_handler                  = conn_params_error_handler;
000030  480a              LDR      r0,|L12.92|
000032  9006              STR      r0,[sp,#0x18]
;;;600    
;;;601        err_code = ble_conn_params_init(&cp_init);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       ble_conn_params_init
00003a  4604              MOV      r4,r0
;;;602        APP_ERROR_CHECK(err_code);
00003c  bf00              NOP      
00003e  4625              MOV      r5,r4
000040  b13d              CBZ      r5,|L12.82|
000042  bf00              NOP      
000044  a206              ADR      r2,|L12.96|
000046  f240215a          MOV      r1,#0x25a
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       app_error_handler
000050  bf00              NOP      
                  |L12.82|
000052  bf00              NOP      
;;;603    }
000054  b007              ADD      sp,sp,#0x1c
000056  bd30              POP      {r4,r5,pc}
;;;604    
                          ENDP

                  |L12.88|
                          DCD      on_conn_params_evt
                  |L12.92|
                          DCD      conn_params_error_handler
                  |L12.96|
000060  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000064  2e5c2e2e
000068  5c6d6169
00006c  6e2e6300

                          AREA ||i.delete_bonds||, CODE, READONLY, ALIGN=2

                  delete_bonds PROC
;;;822     */
;;;823    static void delete_bonds(void)
000000  b570              PUSH     {r4-r6,lr}
;;;824    {
;;;825        ret_code_t err_code;
;;;826    
;;;827        NRF_LOG_INFO("Erase bonds!");
000002  490c              LDR      r1,|L13.52|
000004  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000006  2203              MOVS     r2,#3
000008  ea424001          ORR      r0,r2,r1,LSL #16
00000c  a10a              ADR      r1,|L13.56|
00000e  f7fffffe          BL       nrf_log_frontend_std_0
;;;828    
;;;829        err_code = pm_peers_delete();
000012  f7fffffe          BL       pm_peers_delete
000016  4604              MOV      r4,r0
;;;830        APP_ERROR_CHECK(err_code);
000018  bf00              NOP      
00001a  4625              MOV      r5,r4
00001c  b13d              CBZ      r5,|L13.46|
00001e  bf00              NOP      
000020  a209              ADR      r2,|L13.72|
000022  f240313e          MOV      r1,#0x33e
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       app_error_handler
00002c  bf00              NOP      
                  |L13.46|
00002e  bf00              NOP      
;;;831    }
000030  bd70              POP      {r4-r6,pc}
;;;832    
                          ENDP

000032  0000              DCW      0x0000
                  |L13.52|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L13.56|
000038  45726173          DCB      "Erase bonds!",0
00003c  6520626f
000040  6e647321
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L13.72|
000048  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00004c  2e5c2e2e
000050  5c6d6169
000054  6e2e6300

                          AREA ||i.gap_params_init||, CODE, READONLY, ALIGN=2

                  gap_params_init PROC
;;;392     */
;;;393    static void gap_params_init(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;394    {
;;;395        uint32_t                err_code;
;;;396        ble_gap_conn_params_t   gap_conn_params;
;;;397        ble_gap_conn_sec_mode_t sec_mode;
;;;398    
;;;399        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
000002  bf00              NOP      
000004  f89d0000          LDRB     r0,[sp,#0]
000008  f020000f          BIC      r0,r0,#0xf
00000c  1c40              ADDS     r0,r0,#1
00000e  9000              STR      r0,[sp,#0]
000010  f89d0000          LDRB     r0,[sp,#0]
000014  f02000f0          BIC      r0,r0,#0xf0
000018  3010              ADDS     r0,r0,#0x10
00001a  9000              STR      r0,[sp,#0]
00001c  bf00              NOP      
;;;400    
;;;401        err_code = sd_ble_gap_device_name_set(&sec_mode,
00001e  2211              MOVS     r2,#0x11
000020  a117              ADR      r1,|L14.128|
000022  4668              MOV      r0,sp
000024  df7c              SVC      #0x7c
000026  4604              MOV      r4,r0
;;;402                                              (const uint8_t *)DEVICE_NAME,
;;;403                                              strlen(DEVICE_NAME));
;;;404        APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4625              MOV      r5,r4
00002c  b13d              CBZ      r5,|L14.62|
00002e  bf00              NOP      
000030  a218              ADR      r2,|L14.148|
000032  f44f71ca          MOV      r1,#0x194
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       app_error_handler
00003c  bf00              NOP      
                  |L14.62|
00003e  bf00              NOP      
;;;405    
;;;406        /* YOUR_JOB: Use an appearance value matching the application's use case.
;;;407           err_code = sd_ble_gap_appearance_set(BLE_APPEARANCE_);
;;;408           APP_ERROR_CHECK(err_code); */
;;;409    
;;;410        memset(&gap_conn_params, 0, sizeof(gap_conn_params));
000040  2000              MOVS     r0,#0
000042  9001              STR      r0,[sp,#4]
000044  9002              STR      r0,[sp,#8]
;;;411    
;;;412        gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
000046  2050              MOVS     r0,#0x50
000048  f8ad0004          STRH     r0,[sp,#4]
;;;413        gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
00004c  20a0              MOVS     r0,#0xa0
00004e  f8ad0006          STRH     r0,[sp,#6]
;;;414        gap_conn_params.slave_latency     = SLAVE_LATENCY;
000052  2000              MOVS     r0,#0
000054  f8ad0008          STRH     r0,[sp,#8]
;;;415        gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
000058  f44f70c8          MOV      r0,#0x190
00005c  f8ad000a          STRH     r0,[sp,#0xa]
;;;416    
;;;417        err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
000060  a801              ADD      r0,sp,#4
000062  df7a              SVC      #0x7a
000064  4604              MOV      r4,r0
;;;418        APP_ERROR_CHECK(err_code);
000066  bf00              NOP      
000068  4625              MOV      r5,r4
00006a  b13d              CBZ      r5,|L14.124|
00006c  bf00              NOP      
00006e  a209              ADR      r2,|L14.148|
000070  f44f71d1          MOV      r1,#0x1a2
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       app_error_handler
00007a  bf00              NOP      
                  |L14.124|
00007c  bf00              NOP      
;;;419    }
00007e  bd3e              POP      {r1-r5,pc}
;;;420    
                          ENDP

                  |L14.128|
000080  4e6f7264          DCB      "Nordic_Buttonless",0
000084  69635f42
000088  7574746f
00008c  6e6c6573
000090  7300    
000092  00                DCB      0
000093  00                DCB      0
                  |L14.148|
000094  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000098  2e5c2e2e
00009c  5c6d6169
0000a0  6e2e6300

                          AREA ||i.gatt_init||, CODE, READONLY, ALIGN=2

                  gatt_init PROC
;;;937     */
;;;938    static void gatt_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;939    {
;;;940        ret_code_t err_code = nrf_ble_gatt_init(&m_gatt, NULL);
000002  2100              MOVS     r1,#0
000004  4808              LDR      r0,|L15.40|
000006  f7fffffe          BL       nrf_ble_gatt_init
00000a  4604              MOV      r4,r0
;;;941        APP_ERROR_CHECK(err_code);
00000c  bf00              NOP      
00000e  4625              MOV      r5,r4
000010  b13d              CBZ      r5,|L15.34|
000012  bf00              NOP      
000014  a205              ADR      r2,|L15.44|
000016  f24031ad          MOV      r1,#0x3ad
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       app_error_handler
000020  bf00              NOP      
                  |L15.34|
000022  bf00              NOP      
;;;942    }
000024  bd70              POP      {r4-r6,pc}
;;;943    
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      m_gatt
                  |L15.44|
00002c  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000030  2e5c2e2e
000034  5c6d6169
000038  6e2e6300

                          AREA ||i.log_init||, CODE, READONLY, ALIGN=2

                  log_init PROC
;;;925     */
;;;926    static void log_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;927    {
;;;928        uint32_t err_code = NRF_LOG_INIT(NULL);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       nrf_log_init
000008  4604              MOV      r4,r0
;;;929        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4625              MOV      r5,r4
00000e  b13d              CBZ      r5,|L16.32|
000010  bf00              NOP      
000012  a205              ADR      r2,|L16.40|
000014  f24031a1          MOV      r1,#0x3a1
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       app_error_handler
00001e  bf00              NOP      
                  |L16.32|
000020  bf00              NOP      
;;;930    
;;;931        NRF_LOG_DEFAULT_BACKENDS_INIT();
000022  f7fffffe          BL       nrf_log_default_backends_init
;;;932    }
000026  bd70              POP      {r4-r6,pc}
;;;933    
                          ENDP

                  |L16.40|
000028  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00002c  2e5c2e2e
000030  5c6d6169
000034  6e2e6300

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;1050    */
;;;1051   int main(void)
000000  b508              PUSH     {r3,lr}
;;;1052   {
;;;1053       bool erase_bonds;
;;;1054   
;;;1055       // Initialize.
;;;1056   		log_init();
000002  f7fffffe          BL       log_init
;;;1057   	     
;;;1058       timers_init();
000006  f7fffffe          BL       timers_init
;;;1059   		uart_init();
00000a  f7fffffe          BL       uart_init
;;;1060       power_management_init();
00000e  f7fffffe          BL       power_management_init
;;;1061       buttons_leds_init(&erase_bonds);
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       buttons_leds_init
;;;1062       ble_stack_init();
000018  f7fffffe          BL       ble_stack_init
;;;1063       peer_manager_init();
00001c  f7fffffe          BL       peer_manager_init
;;;1064       gap_params_init();
000020  f7fffffe          BL       gap_params_init
;;;1065       gatt_init();
000024  f7fffffe          BL       gatt_init
;;;1066       advertising_init();
000028  f7fffffe          BL       advertising_init
;;;1067       services_init();
00002c  f7fffffe          BL       services_init
;;;1068       conn_params_init();
000030  f7fffffe          BL       conn_params_init
;;;1069   
;;;1070       NRF_LOG_INFO("Application started\n");
000034  490a              LDR      r1,|L17.96|
000036  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000038  2203              MOVS     r2,#3
00003a  ea424001          ORR      r0,r2,r1,LSL #16
00003e  a109              ADR      r1,|L17.100|
000040  f7fffffe          BL       nrf_log_frontend_std_0
;;;1071   
;;;1072   
;;;1073       // Start execution.
;;;1074       application_timers_start();
000044  f7fffffe          BL       application_timers_start
;;;1075       advertising_start(erase_bonds);
000048  f89d0000          LDRB     r0,[sp,#0]
00004c  f7fffffe          BL       advertising_start
;;;1076   
;;;1077       // Enter main loop.
;;;1078       for (;;)
000050  bf00              NOP      
                  |L17.82|
;;;1079       {
;;;1080           if (NRF_LOG_PROCESS() == false)
000052  f7fffffe          BL       nrf_log_frontend_dequeue
000056  2800              CMP      r0,#0
000058  d1fb              BNE      |L17.82|
;;;1081           {
;;;1082               nrf_pwr_mgmt_run();
00005a  f7fffffe          BL       nrf_pwr_mgmt_run
00005e  e7f8              B        |L17.82|
;;;1083           }
;;;1084       }
;;;1085   }
;;;1086   
                          ENDP

                  |L17.96|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L17.100|
000064  4170706c          DCB      "Application started\n",0
000068  69636174
00006c  696f6e20
000070  73746172
000074  7465640a
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.nus_data_handler||, CODE, READONLY, ALIGN=2

                  nus_data_handler PROC
;;;456    /**@snippet [Handling the data received over BLE] */
;;;457    static void nus_data_handler(ble_nus_evt_t * p_evt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;458    {
000004  4604              MOV      r4,r0
;;;459    
;;;460        if (p_evt->type == BLE_NUS_EVT_RX_DATA)
000006  7820              LDRB     r0,[r4,#0]
000008  2800              CMP      r0,#0
00000a  d143              BNE      |L18.148|
;;;461        {
;;;462            uint32_t err_code;
;;;463    
;;;464            NRF_LOG_DEBUG("Received data from BLE NUS. Writing data on UART.");
00000c  4922              LDR      r1,|L18.152|
00000e  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000010  2204              MOVS     r2,#4
000012  ea424001          ORR      r0,r2,r1,LSL #16
000016  a121              ADR      r1,|L18.156|
000018  f7fffffe          BL       nrf_log_frontend_std_0
;;;465            NRF_LOG_HEXDUMP_DEBUG(p_evt->params.rx_data.p_data, p_evt->params.rx_data.length);
00001c  89a2              LDRH     r2,[r4,#0xc]
00001e  4b1e              LDR      r3,|L18.152|
000020  881b              LDRH     r3,[r3,#0]  ; m_nrf_log_app_logs_data_dynamic
000022  2604              MOVS     r6,#4
000024  ea464003          ORR      r0,r6,r3,LSL #16
000028  68a1              LDR      r1,[r4,#8]
00002a  f7fffffe          BL       nrf_log_frontend_hexdump
;;;466    
;;;467            for (uint32_t i = 0; i < p_evt->params.rx_data.length; i++)
00002e  2600              MOVS     r6,#0
000030  e020              B        |L18.116|
                  |L18.50|
;;;468            {
;;;469                do
000032  bf00              NOP      
                  |L18.52|
;;;470                {
;;;471                    err_code = app_uart_put(p_evt->params.rx_data.p_data[i]);
000034  68a1              LDR      r1,[r4,#8]
000036  5d88              LDRB     r0,[r1,r6]
000038  f7fffffe          BL       app_uart_put
00003c  4605              MOV      r5,r0
;;;472                    if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_BUSY))
00003e  b1b5              CBZ      r5,|L18.110|
000040  2d11              CMP      r5,#0x11
000042  d014              BEQ      |L18.110|
;;;473                    {
;;;474                        NRF_LOG_ERROR("Failed receiving NUS message. Error 0x%x. ", err_code);
000044  4914              LDR      r1,|L18.152|
000046  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000048  2201              MOVS     r2,#1
00004a  ea424001          ORR      r0,r2,r1,LSL #16
00004e  462a              MOV      r2,r5
000050  a11f              ADR      r1,|L18.208|
000052  f7fffffe          BL       nrf_log_frontend_std_1
;;;475                        APP_ERROR_CHECK(err_code);
000056  bf00              NOP      
000058  462f              MOV      r7,r5
00005a  b13f              CBZ      r7,|L18.108|
00005c  bf00              NOP      
00005e  a227              ADR      r2,|L18.252|
000060  f24011db          MOV      r1,#0x1db
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       app_error_handler
00006a  bf00              NOP      
                  |L18.108|
00006c  bf00              NOP      
                  |L18.110|
;;;476                    }
;;;477                } while (err_code == NRF_ERROR_BUSY);
00006e  2d11              CMP      r5,#0x11
000070  d0e0              BEQ      |L18.52|
000072  1c76              ADDS     r6,r6,#1              ;467
                  |L18.116|
000074  89a0              LDRH     r0,[r4,#0xc]          ;467
000076  42b0              CMP      r0,r6                 ;467
000078  d8db              BHI      |L18.50|
;;;478            }
;;;479            if (p_evt->params.rx_data.p_data[p_evt->params.rx_data.length-1] == '\r')
00007a  89a0              LDRH     r0,[r4,#0xc]
00007c  1e40              SUBS     r0,r0,#1
00007e  68a1              LDR      r1,[r4,#8]
000080  5c08              LDRB     r0,[r1,r0]
000082  280d              CMP      r0,#0xd
000084  d105              BNE      |L18.146|
;;;480            {
;;;481                while (app_uart_put('\n') == NRF_ERROR_BUSY);
000086  bf00              NOP      
                  |L18.136|
000088  200a              MOVS     r0,#0xa
00008a  f7fffffe          BL       app_uart_put
00008e  2811              CMP      r0,#0x11
000090  d0fa              BEQ      |L18.136|
                  |L18.146|
;;;482            }
;;;483        }
000092  bf00              NOP      
                  |L18.148|
;;;484    
;;;485    }
000094  e8bd81f0          POP      {r4-r8,pc}
;;;486    /**@snippet [Handling the data received over BLE] */
                          ENDP

                  |L18.152|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L18.156|
00009c  52656365          DCB      "Received data from BLE NUS. Writing data on UART.",0
0000a0  69766564
0000a4  20646174
0000a8  61206672
0000ac  6f6d2042
0000b0  4c45204e
0000b4  55532e20
0000b8  57726974
0000bc  696e6720
0000c0  64617461
0000c4  206f6e20
0000c8  55415254
0000cc  2e00    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L18.208|
0000d0  4661696c          DCB      "Failed receiving NUS message. Error 0x%x. ",0
0000d4  65642072
0000d8  65636569
0000dc  76696e67
0000e0  204e5553
0000e4  206d6573
0000e8  73616765
0000ec  2e204572
0000f0  726f7220
0000f4  30782578
0000f8  2e2000  
0000fb  00                DCB      0
                  |L18.252|
0000fc  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000100  2e5c2e2e
000104  5c6d6169
000108  6e2e6300

                          AREA ||i.on_adv_evt||, CODE, READONLY, ALIGN=2

                  on_adv_evt PROC
;;;642     */
;;;643    static void on_adv_evt(ble_adv_evt_t ble_adv_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;644    {
000002  4605              MOV      r5,r0
;;;645        uint32_t err_code;
;;;646    
;;;647        switch (ble_adv_evt)
000004  b335              CBZ      r5,|L19.84|
000006  2d03              CMP      r5,#3
000008  d002              BEQ      |L19.16|
00000a  2d04              CMP      r5,#4
00000c  d125              BNE      |L19.90|
00000e  e010              B        |L19.50|
                  |L19.16|
;;;648        {
;;;649            case BLE_ADV_EVT_FAST:
;;;650                err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING);
000010  2002              MOVS     r0,#2
000012  f7fffffe          BL       bsp_indication_set
000016  4604              MOV      r4,r0
;;;651                APP_ERROR_CHECK(err_code);
000018  bf00              NOP      
00001a  4626              MOV      r6,r4
00001c  b13e              CBZ      r6,|L19.46|
00001e  bf00              NOP      
000020  a20f              ADR      r2,|L19.96|
000022  f240218b          MOV      r1,#0x28b
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       app_error_handler
00002c  bf00              NOP      
                  |L19.46|
00002e  bf00              NOP      
;;;652                break;
000030  e014              B        |L19.92|
                  |L19.50|
;;;653    
;;;654    		case BLE_ADV_EVT_SLOW:
;;;655            err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING_SLOW);
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       bsp_indication_set
000038  4604              MOV      r4,r0
;;;656            APP_ERROR_CHECK(err_code);
00003a  bf00              NOP      
00003c  4626              MOV      r6,r4
00003e  b13e              CBZ      r6,|L19.80|
000040  bf00              NOP      
000042  a207              ADR      r2,|L19.96|
000044  f44f7124          MOV      r1,#0x290
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       app_error_handler
00004e  bf00              NOP      
                  |L19.80|
000050  bf00              NOP      
;;;657            break;
000052  e003              B        |L19.92|
                  |L19.84|
;;;658    
;;;659            case BLE_ADV_EVT_IDLE:
;;;660                sleep_mode_enter();
000054  f7fffffe          BL       sleep_mode_enter
;;;661                break;
000058  e000              B        |L19.92|
                  |L19.90|
;;;662    
;;;663            default:
;;;664                break;
00005a  bf00              NOP      
                  |L19.92|
00005c  bf00              NOP                            ;652
;;;665        }
;;;666    }
00005e  bd70              POP      {r4-r6,pc}
;;;667    
                          ENDP

                  |L19.96|
000060  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000064  2e5c2e2e
000068  5c6d6169
00006c  6e2e6300

                          AREA ||i.on_conn_params_evt||, CODE, READONLY, ALIGN=2

                  on_conn_params_evt PROC
;;;560     */
;;;561    static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;562    {
000002  4605              MOV      r5,r0
;;;563        uint32_t err_code;
;;;564    
;;;565        if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
000004  7828              LDRB     r0,[r5,#0]
000006  b980              CBNZ     r0,|L20.42|
;;;566        {
;;;567            err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
000008  213b              MOVS     r1,#0x3b
00000a  4808              LDR      r0,|L20.44|
00000c  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00000e  df76              SVC      #0x76
000010  4604              MOV      r4,r0
;;;568            APP_ERROR_CHECK(err_code);
000012  bf00              NOP      
000014  4626              MOV      r6,r4
000016  b13e              CBZ      r6,|L20.40|
000018  bf00              NOP      
00001a  a205              ADR      r2,|L20.48|
00001c  f44f710e          MOV      r1,#0x238
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       app_error_handler
000026  bf00              NOP      
                  |L20.40|
000028  bf00              NOP      
                  |L20.42|
;;;569        }
;;;570    }
00002a  bd70              POP      {r4-r6,pc}
;;;571    
                          ENDP

                  |L20.44|
                          DCD      m_conn_handle
                  |L20.48|
000030  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000034  2e5c2e2e
000038  5c6d6169
00003c  6e2e6300

                          AREA ||i.peer_manager_init||, CODE, READONLY, ALIGN=2

                  peer_manager_init PROC
;;;788     */
;;;789    static void peer_manager_init()
000000  b57c              PUSH     {r2-r6,lr}
;;;790    {
;;;791        ble_gap_sec_params_t sec_param;
;;;792        ret_code_t           err_code;
;;;793    
;;;794        err_code = pm_init();
000002  f7fffffe          BL       pm_init
000006  4604              MOV      r4,r0
;;;795        APP_ERROR_CHECK(err_code);
000008  bf00              NOP      
00000a  4625              MOV      r5,r4
00000c  b13d              CBZ      r5,|L21.30|
00000e  bf00              NOP      
000010  a239              ADR      r2,|L21.248|
000012  f240311b          MOV      r1,#0x31b
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       app_error_handler
00001c  bf00              NOP      
                  |L21.30|
00001e  bf00              NOP      
;;;796    
;;;797        memset(&sec_param, 0, sizeof(ble_gap_sec_params_t));
000020  2000              MOVS     r0,#0
000022  9000              STR      r0,[sp,#0]
000024  9001              STR      r0,[sp,#4]
;;;798    
;;;799        // Security parameters to be used for all security procedures.
;;;800        sec_param.bond           = SEC_PARAM_BOND;
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  f0200001          BIC      r0,r0,#1
00002e  1c40              ADDS     r0,r0,#1
000030  f88d0000          STRB     r0,[sp,#0]
;;;801        sec_param.mitm           = SEC_PARAM_MITM;
000034  f89d0000          LDRB     r0,[sp,#0]
000038  f0200002          BIC      r0,r0,#2
00003c  f88d0000          STRB     r0,[sp,#0]
;;;802        sec_param.lesc           = SEC_PARAM_LESC;
000040  f89d0000          LDRB     r0,[sp,#0]
000044  f0200004          BIC      r0,r0,#4
000048  f88d0000          STRB     r0,[sp,#0]
;;;803        sec_param.keypress       = SEC_PARAM_KEYPRESS;
00004c  f89d0000          LDRB     r0,[sp,#0]
000050  f0200008          BIC      r0,r0,#8
000054  f88d0000          STRB     r0,[sp,#0]
;;;804        sec_param.io_caps        = SEC_PARAM_IO_CAPABILITIES;
000058  f89d0000          LDRB     r0,[sp,#0]
00005c  f0200070          BIC      r0,r0,#0x70
000060  3030              ADDS     r0,r0,#0x30
000062  f88d0000          STRB     r0,[sp,#0]
;;;805        sec_param.oob            = SEC_PARAM_OOB;
000066  f89d0000          LDRB     r0,[sp,#0]
00006a  f0200080          BIC      r0,r0,#0x80
00006e  f88d0000          STRB     r0,[sp,#0]
;;;806        sec_param.min_key_size   = SEC_PARAM_MIN_KEY_SIZE;
000072  2007              MOVS     r0,#7
000074  f88d0001          STRB     r0,[sp,#1]
;;;807        sec_param.max_key_size   = SEC_PARAM_MAX_KEY_SIZE;
000078  2010              MOVS     r0,#0x10
00007a  f88d0002          STRB     r0,[sp,#2]
;;;808        sec_param.kdist_own.enc  = 1;
00007e  f89d0003          LDRB     r0,[sp,#3]
000082  f0200001          BIC      r0,r0,#1
000086  1c40              ADDS     r0,r0,#1
000088  f88d0003          STRB     r0,[sp,#3]
;;;809        sec_param.kdist_own.id   = 1;
00008c  f89d0003          LDRB     r0,[sp,#3]
000090  f0200002          BIC      r0,r0,#2
000094  1c80              ADDS     r0,r0,#2
000096  f88d0003          STRB     r0,[sp,#3]
;;;810        sec_param.kdist_peer.enc = 1;
00009a  f89d0004          LDRB     r0,[sp,#4]
00009e  f0200001          BIC      r0,r0,#1
0000a2  1c40              ADDS     r0,r0,#1
0000a4  f88d0004          STRB     r0,[sp,#4]
;;;811        sec_param.kdist_peer.id  = 1;
0000a8  f89d0004          LDRB     r0,[sp,#4]
0000ac  f0200002          BIC      r0,r0,#2
0000b0  1c80              ADDS     r0,r0,#2
0000b2  f88d0004          STRB     r0,[sp,#4]
;;;812    
;;;813        err_code = pm_sec_params_set(&sec_param);
0000b6  4668              MOV      r0,sp
0000b8  f7fffffe          BL       pm_sec_params_set
0000bc  4604              MOV      r4,r0
;;;814        APP_ERROR_CHECK(err_code);
0000be  bf00              NOP      
0000c0  4625              MOV      r5,r4
0000c2  b13d              CBZ      r5,|L21.212|
0000c4  bf00              NOP      
0000c6  a20c              ADR      r2,|L21.248|
0000c8  f240312e          MOV      r1,#0x32e
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       app_error_handler
0000d2  bf00              NOP      
                  |L21.212|
0000d4  bf00              NOP      
;;;815    
;;;816        err_code = pm_register(pm_evt_handler);
0000d6  480c              LDR      r0,|L21.264|
0000d8  f7fffffe          BL       pm_register
0000dc  4604              MOV      r4,r0
;;;817        APP_ERROR_CHECK(err_code);
0000de  bf00              NOP      
0000e0  4625              MOV      r5,r4
0000e2  b13d              CBZ      r5,|L21.244|
0000e4  bf00              NOP      
0000e6  a204              ADR      r2,|L21.248|
0000e8  f2403131          MOV      r1,#0x331
0000ec  4628              MOV      r0,r5
0000ee  f7fffffe          BL       app_error_handler
0000f2  bf00              NOP      
                  |L21.244|
0000f4  bf00              NOP      
;;;818    }
0000f6  bd7c              POP      {r2-r6,pc}
;;;819    
                          ENDP

                  |L21.248|
0000f8  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
0000fc  2e5c2e2e
000100  5c6d6169
000104  6e2e6300
                  |L21.264|
                          DCD      pm_evt_handler

                          AREA ||i.pm_evt_handler||, CODE, READONLY, ALIGN=2

                  pm_evt_handler PROC
;;;267     */
;;;268    static void pm_evt_handler(pm_evt_t const * p_evt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;269    {
000002  4604              MOV      r4,r0
;;;270        ret_code_t err_code;
;;;271    
;;;272        switch (p_evt->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  2811              CMP      r0,#0x11
000008  d27c              BCS      |L22.260|
00000a  e8dff000          TBB      [pc,r0]
00000e  097c              DCB      0x09,0x7c
000010  1223242b          DCB      0x12,0x23,0x24,0x2b
000014  6d7d467e          DCB      0x6d,0x7d,0x46,0x7e
000018  533f607f          DCB      0x53,0x3f,0x60,0x7f
00001c  43808100          DCB      0x43,0x80,0x81,0x00
;;;273        {
;;;274            case PM_EVT_BONDED_PEER_CONNECTED:
;;;275            {
;;;276                NRF_LOG_INFO("Connected to a previously bonded device.");
000020  493d              LDR      r1,|L22.280|
000022  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000024  2203              MOVS     r2,#3
000026  ea424001          ORR      r0,r2,r1,LSL #16
00002a  a13c              ADR      r1,|L22.284|
00002c  f7fffffe          BL       nrf_log_frontend_std_0
;;;277            } break;
000030  e06f              B        |L22.274|
;;;278    
;;;279            case PM_EVT_CONN_SEC_SUCCEEDED:
;;;280            {
;;;281                NRF_LOG_INFO("Connection secured: role: %d, conn_handle: 0x%x, procedure: %d.",
000032  8860              LDRH     r0,[r4,#2]
000034  f7fffffe          BL       ble_conn_state_role
000038  4606              MOV      r6,r0
00003a  7a20              LDRB     r0,[r4,#8]
00003c  9000              STR      r0,[sp,#0]
00003e  8863              LDRH     r3,[r4,#2]
000040  4935              LDR      r1,|L22.280|
000042  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000044  2203              MOVS     r2,#3
000046  ea424001          ORR      r0,r2,r1,LSL #16
00004a  4632              MOV      r2,r6
00004c  a13e              ADR      r1,|L22.328|
00004e  f7fffffe          BL       nrf_log_frontend_std_3
;;;282                             ble_conn_state_role(p_evt->conn_handle),
;;;283                             p_evt->conn_handle,
;;;284                             p_evt->params.conn_sec_succeeded.procedure);
;;;285            } break;
000052  e05e              B        |L22.274|
;;;286    
;;;287            case PM_EVT_CONN_SEC_FAILED:
;;;288            {
;;;289                /* Often, when securing fails, it shouldn't be restarted, for security reasons.
;;;290                 * Other times, it can be restarted directly.
;;;291                 * Sometimes it can be restarted, but only after changing some Security Parameters.
;;;292                 * Sometimes, it cannot be restarted until the link is disconnected and reconnected.
;;;293                 * Sometimes it is impossible, to secure the link, or the peer device does not support it.
;;;294                 * How to handle this error is highly application dependent. */
;;;295            } break;
000054  e05d              B        |L22.274|
;;;296    
;;;297            case PM_EVT_CONN_SEC_CONFIG_REQ:
;;;298            {
;;;299                // Reject pairing request from an already bonded peer.
;;;300                pm_conn_sec_config_t conn_sec_config = {.allow_repairing = false};
000056  2000              MOVS     r0,#0
000058  9000              STR      r0,[sp,#0]
;;;301                pm_conn_sec_config_reply(p_evt->conn_handle, &conn_sec_config);
00005a  8860              LDRH     r0,[r4,#2]
00005c  4669              MOV      r1,sp
00005e  f7fffffe          BL       pm_conn_sec_config_reply
;;;302            } break;
000062  e056              B        |L22.274|
;;;303    
;;;304            case PM_EVT_STORAGE_FULL:
;;;305            {
;;;306                // Run garbage collection on the flash.
;;;307                err_code = fds_gc();
000064  f7fffffe          BL       fds_gc
000068  4605              MOV      r5,r0
;;;308                if (err_code == FDS_ERR_BUSY || err_code == FDS_ERR_NO_SPACE_IN_QUEUES)
00006a  2d0e              CMP      r5,#0xe
00006c  d00d              BEQ      |L22.138|
00006e  2d08              CMP      r5,#8
000070  d00b              BEQ      |L22.138|
;;;309                {
;;;310                    // Retry.
;;;311                }
;;;312                else
;;;313                {
;;;314                    APP_ERROR_CHECK(err_code);
000072  bf00              NOP      
000074  462e              MOV      r6,r5
000076  b13e              CBZ      r6,|L22.136|
000078  bf00              NOP      
00007a  a243              ADR      r2,|L22.392|
00007c  f44f719d          MOV      r1,#0x13a
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       app_error_handler
000086  bf00              NOP      
                  |L22.136|
000088  bf00              NOP      
                  |L22.138|
;;;315                }
;;;316            } break;
00008a  e042              B        |L22.274|
;;;317    
;;;318            case PM_EVT_PEERS_DELETE_SUCCEEDED:
;;;319            {
;;;320                advertising_start(false);
00008c  2000              MOVS     r0,#0
00008e  f7fffffe          BL       advertising_start
;;;321            } break;
000092  e03e              B        |L22.274|
;;;322    
;;;323            case PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED:
;;;324            {
;;;325                // The local database has likely changed, send service changed indications.
;;;326                pm_local_database_has_changed();
000094  f7fffffe          BL       pm_local_database_has_changed
;;;327            } break;
000098  e03b              B        |L22.274|
;;;328    
;;;329            case PM_EVT_PEER_DATA_UPDATE_FAILED:
;;;330            {
;;;331                // Assert.
;;;332                APP_ERROR_CHECK(p_evt->params.peer_data_update_failed.error);
00009a  bf00              NOP      
00009c  6926              LDR      r6,[r4,#0x10]
00009e  b13e              CBZ      r6,|L22.176|
0000a0  bf00              NOP      
0000a2  a239              ADR      r2,|L22.392|
0000a4  f44f71a6          MOV      r1,#0x14c
0000a8  4630              MOV      r0,r6
0000aa  f7fffffe          BL       app_error_handler
0000ae  bf00              NOP      
                  |L22.176|
0000b0  bf00              NOP      
;;;333            } break;
0000b2  e02e              B        |L22.274|
;;;334    
;;;335            case PM_EVT_PEER_DELETE_FAILED:
;;;336            {
;;;337                // Assert.
;;;338                APP_ERROR_CHECK(p_evt->params.peer_delete_failed.error);
0000b4  bf00              NOP      
0000b6  68a6              LDR      r6,[r4,#8]
0000b8  b13e              CBZ      r6,|L22.202|
0000ba  bf00              NOP      
0000bc  a232              ADR      r2,|L22.392|
0000be  f44f71a9          MOV      r1,#0x152
0000c2  4630              MOV      r0,r6
0000c4  f7fffffe          BL       app_error_handler
0000c8  bf00              NOP      
                  |L22.202|
0000ca  bf00              NOP      
;;;339            } break;
0000cc  e021              B        |L22.274|
;;;340    
;;;341            case PM_EVT_PEERS_DELETE_FAILED:
;;;342            {
;;;343                // Assert.
;;;344                APP_ERROR_CHECK(p_evt->params.peers_delete_failed_evt.error);
0000ce  bf00              NOP      
0000d0  68a6              LDR      r6,[r4,#8]
0000d2  b13e              CBZ      r6,|L22.228|
0000d4  bf00              NOP      
0000d6  a22c              ADR      r2,|L22.392|
0000d8  f44f71ac          MOV      r1,#0x158
0000dc  4630              MOV      r0,r6
0000de  f7fffffe          BL       app_error_handler
0000e2  bf00              NOP      
                  |L22.228|
0000e4  bf00              NOP      
;;;345            } break;
0000e6  e014              B        |L22.274|
;;;346    
;;;347            case PM_EVT_ERROR_UNEXPECTED:
;;;348            {
;;;349                // Assert.
;;;350                APP_ERROR_CHECK(p_evt->params.error_unexpected.error);
0000e8  bf00              NOP      
0000ea  68a6              LDR      r6,[r4,#8]
0000ec  b13e              CBZ      r6,|L22.254|
0000ee  bf00              NOP      
0000f0  a225              ADR      r2,|L22.392|
0000f2  f44f71af          MOV      r1,#0x15e
0000f6  4630              MOV      r0,r6
0000f8  f7fffffe          BL       app_error_handler
0000fc  bf00              NOP      
                  |L22.254|
0000fe  bf00              NOP      
;;;351            } break;
000100  e007              B        |L22.274|
000102  e7ff              B        |L22.260|
                  |L22.260|
;;;352    
;;;353            case PM_EVT_CONN_SEC_START:
000104  bf00              NOP      
;;;354            case PM_EVT_PEER_DATA_UPDATE_SUCCEEDED:
000106  bf00              NOP      
;;;355            case PM_EVT_PEER_DELETE_SUCCEEDED:
000108  bf00              NOP      
;;;356            case PM_EVT_LOCAL_DB_CACHE_APPLIED:
00010a  bf00              NOP      
;;;357            case PM_EVT_SERVICE_CHANGED_IND_SENT:
00010c  bf00              NOP      
;;;358            case PM_EVT_SERVICE_CHANGED_IND_CONFIRMED:
00010e  bf00              NOP      
;;;359            default:
;;;360                break;
000110  bf00              NOP      
                  |L22.274|
000112  bf00              NOP                            ;277
;;;361        }
;;;362    }
000114  bdf8              POP      {r3-r7,pc}
;;;363    
                          ENDP

000116  0000              DCW      0x0000
                  |L22.280|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L22.284|
00011c  436f6e6e          DCB      "Connected to a previously bonded device.",0
000120  65637465
000124  6420746f
000128  20612070
00012c  72657669
000130  6f75736c
000134  7920626f
000138  6e646564
00013c  20646576
000140  6963652e
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L22.328|
000148  436f6e6e          DCB      "Connection secured: role: %d, conn_handle: 0x%x, proced"
00014c  65637469
000150  6f6e2073
000154  65637572
000158  65643a20
00015c  726f6c65
000160  3a202564
000164  2c20636f
000168  6e6e5f68
00016c  616e646c
000170  653a2030
000174  7825782c
000178  2070726f
00017c  636564  
00017f  7572653a          DCB      "ure: %d.",0
000183  2025642e
000187  00      
                  |L22.392|
000188  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00018c  2e5c2e2e
000190  5c6d6169
000194  6e2e6300

                          AREA ||i.power_management_init||, CODE, READONLY, ALIGN=2

                  power_management_init PROC
;;;962    
;;;963    static void power_management_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;964    {
;;;965        uint32_t err_code = nrf_pwr_mgmt_init();
000002  f7fffffe          BL       nrf_pwr_mgmt_init
000006  4604              MOV      r4,r0
;;;966        APP_ERROR_CHECK(err_code);
000008  bf00              NOP      
00000a  4625              MOV      r5,r4
00000c  b13d              CBZ      r5,|L23.30|
00000e  bf00              NOP      
000010  a204              ADR      r2,|L23.36|
000012  f24031c6          MOV      r1,#0x3c6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       app_error_handler
00001c  bf00              NOP      
                  |L23.30|
00001e  bf00              NOP      
;;;967    }
000020  bd70              POP      {r4-r6,pc}
;;;968    
                          ENDP

000022  0000              DCW      0x0000
                  |L23.36|
000024  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000028  2e5c2e2e
00002c  5c6d6169
000030  6e2e6300

                          AREA ||i.services_init||, CODE, READONLY, ALIGN=2

                  services_init PROC
;;;489     */
;;;490    static void services_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;491    {
000002  b097              SUB      sp,sp,#0x5c
;;;492        uint32_t err_code;
;;;493        ble_dfu_buttonless_init_t dfus_init =
000004  485f              LDR      r0,|L24.388|
000006  6800              LDR      r0,[r0,#0]  ; <Data4>
000008  9016              STR      r0,[sp,#0x58]
;;;494        {
;;;495            .evt_handler = ble_dfu_evt_handler
;;;496        };
;;;497    
;;;498        // Initialize the async SVCI interface to bootloader.
;;;499    //debug_dj    err_code = ble_dfu_buttonless_async_svci_init();
;;;500    //debug_dj    APP_ERROR_CHECK(err_code);
;;;501        
;;;502        
;;;503        err_code = ble_dfu_buttonless_init(&dfus_init);
00000a  a816              ADD      r0,sp,#0x58
00000c  f7fffffe          BL       ble_dfu_buttonless_init
000010  4604              MOV      r4,r0
;;;504        APP_ERROR_CHECK(err_code);
000012  bf00              NOP      
000014  4625              MOV      r5,r4
000016  b13d              CBZ      r5,|L24.40|
000018  bf00              NOP      
00001a  a25b              ADR      r2,|L24.392|
00001c  f44f71fc          MOV      r1,#0x1f8
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       app_error_handler
000026  bf00              NOP      
                  |L24.40|
000028  bf00              NOP      
;;;505    
;;;506        ble_bas_init_t bas_init;
;;;507        ble_dis_init_t dis_init;
;;;508    	ble_nus_init_t nus_init;
;;;509    
;;;510    	// Initialize Battery Service.
;;;511        memset(&bas_init, 0, sizeof(bas_init));
00002a  2114              MOVS     r1,#0x14
00002c  a811              ADD      r0,sp,#0x44
00002e  f7fffffe          BL       __aeabi_memclr4
;;;512    
;;;513        // Here the sec level for the Battery Service can be changed/increased.
;;;514        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&bas_init.battery_level_char_attr_md.cccd_write_perm);
000032  bf00              NOP      
000034  f89d0051          LDRB     r0,[sp,#0x51]
000038  f020000f          BIC      r0,r0,#0xf
00003c  1c40              ADDS     r0,r0,#1
00003e  f88d0051          STRB     r0,[sp,#0x51]
000042  f89d0051          LDRB     r0,[sp,#0x51]
000046  f02000f0          BIC      r0,r0,#0xf0
00004a  3010              ADDS     r0,r0,#0x10
00004c  f88d0051          STRB     r0,[sp,#0x51]
000050  bf00              NOP      
;;;515        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&bas_init.battery_level_char_attr_md.read_perm);
000052  bf00              NOP      
000054  a811              ADD      r0,sp,#0x44
000056  7b80              LDRB     r0,[r0,#0xe]
000058  f020000f          BIC      r0,r0,#0xf
00005c  1c40              ADDS     r0,r0,#1
00005e  a911              ADD      r1,sp,#0x44
000060  7388              STRB     r0,[r1,#0xe]
000062  a811              ADD      r0,sp,#0x44
000064  7b80              LDRB     r0,[r0,#0xe]
000066  f02000f0          BIC      r0,r0,#0xf0
00006a  3010              ADDS     r0,r0,#0x10
00006c  7388              STRB     r0,[r1,#0xe]
00006e  bf00              NOP      
;;;516        BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&bas_init.battery_level_char_attr_md.write_perm);
000070  bf00              NOP      
000072  a811              ADD      r0,sp,#0x44
000074  7bc0              LDRB     r0,[r0,#0xf]
000076  f020010f          BIC      r1,r0,#0xf
00007a  a811              ADD      r0,sp,#0x44
00007c  73c1              STRB     r1,[r0,#0xf]
00007e  7bc0              LDRB     r0,[r0,#0xf]
000080  f02001f0          BIC      r1,r0,#0xf0
000084  a811              ADD      r0,sp,#0x44
000086  73c1              STRB     r1,[r0,#0xf]
000088  bf00              NOP      
;;;517    
;;;518        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&bas_init.battery_level_report_read_perm);
00008a  bf00              NOP      
00008c  f89d0054          LDRB     r0,[sp,#0x54]
000090  f020000f          BIC      r0,r0,#0xf
000094  1c40              ADDS     r0,r0,#1
000096  f88d0054          STRB     r0,[sp,#0x54]
00009a  f89d0054          LDRB     r0,[sp,#0x54]
00009e  f02000f0          BIC      r0,r0,#0xf0
0000a2  3010              ADDS     r0,r0,#0x10
0000a4  f88d0054          STRB     r0,[sp,#0x54]
0000a8  bf00              NOP      
;;;519    
;;;520        bas_init.evt_handler          = NULL;
0000aa  2000              MOVS     r0,#0
0000ac  9011              STR      r0,[sp,#0x44]
;;;521        bas_init.support_notification = true;
0000ae  2001              MOVS     r0,#1
0000b0  f88d0048          STRB     r0,[sp,#0x48]
;;;522        bas_init.p_report_ref         = NULL;
0000b4  2000              MOVS     r0,#0
0000b6  9013              STR      r0,[sp,#0x4c]
;;;523        bas_init.initial_batt_level   = 100;
0000b8  2064              MOVS     r0,#0x64
0000ba  f88d0050          STRB     r0,[sp,#0x50]
;;;524    
;;;525        err_code = ble_bas_init(&m_bas, &bas_init);
0000be  a911              ADD      r1,sp,#0x44
0000c0  4835              LDR      r0,|L24.408|
0000c2  f7fffffe          BL       ble_bas_init
0000c6  4604              MOV      r4,r0
;;;526        APP_ERROR_CHECK(err_code);
0000c8  bf00              NOP      
0000ca  4625              MOV      r5,r4
0000cc  b13d              CBZ      r5,|L24.222|
0000ce  bf00              NOP      
0000d0  a22d              ADR      r2,|L24.392|
0000d2  f240210e          MOV      r1,#0x20e
0000d6  4628              MOV      r0,r5
0000d8  f7fffffe          BL       app_error_handler
0000dc  bf00              NOP      
                  |L24.222|
0000de  bf00              NOP      
;;;527    	
;;;528    	 // Initialize Device Information Service.
;;;529        memset(&dis_init, 0, sizeof(dis_init));
0000e0  2140              MOVS     r1,#0x40
0000e2  a801              ADD      r0,sp,#4
0000e4  f7fffffe          BL       __aeabi_memclr4
;;;530    	
;;;531        ble_srv_ascii_to_utf8(&dis_init.manufact_name_str, (char *)MANUFACTURER_NAME);
0000e8  a12c              ADR      r1,|L24.412|
0000ea  a801              ADD      r0,sp,#4
0000ec  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;532    		ble_srv_ascii_to_utf8(&dis_init.sw_rev_str, (char *)SOFTWARE_VERSION);
0000f0  a12f              ADR      r1,|L24.432|
0000f2  a80b              ADD      r0,sp,#0x2c
0000f4  f7fffffe          BL       ble_srv_ascii_to_utf8
;;;533    
;;;534        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&dis_init.dis_attr_md.read_perm);
0000f8  bf00              NOP      
0000fa  f89d0040          LDRB     r0,[sp,#0x40]
0000fe  f020000f          BIC      r0,r0,#0xf
000102  1c40              ADDS     r0,r0,#1
000104  f88d0040          STRB     r0,[sp,#0x40]
000108  f89d0040          LDRB     r0,[sp,#0x40]
00010c  f02000f0          BIC      r0,r0,#0xf0
000110  3010              ADDS     r0,r0,#0x10
000112  f88d0040          STRB     r0,[sp,#0x40]
000116  bf00              NOP      
;;;535        BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&dis_init.dis_attr_md.write_perm);
000118  bf00              NOP      
00011a  f89d0041          LDRB     r0,[sp,#0x41]
00011e  f020010f          BIC      r1,r0,#0xf
000122  f88d1041          STRB     r1,[sp,#0x41]
000126  f89d0041          LDRB     r0,[sp,#0x41]
00012a  f02001f0          BIC      r1,r0,#0xf0
00012e  f88d1041          STRB     r1,[sp,#0x41]
000132  bf00              NOP      
;;;536    
;;;537        err_code = ble_dis_init(&dis_init);
000134  a801              ADD      r0,sp,#4
000136  f7fffffe          BL       ble_dis_init
00013a  4604              MOV      r4,r0
;;;538        APP_ERROR_CHECK(err_code);
00013c  bf00              NOP      
00013e  4625              MOV      r5,r4
000140  b13d              CBZ      r5,|L24.338|
000142  bf00              NOP      
000144  a210              ADR      r2,|L24.392|
000146  f240211a          MOV      r1,#0x21a
00014a  4628              MOV      r0,r5
00014c  f7fffffe          BL       app_error_handler
000150  bf00              NOP      
                  |L24.338|
000152  bf00              NOP      
;;;539    		
;;;540    
;;;541    		// Initialize Nordic Uart Service.
;;;542        memset(&nus_init, 0, sizeof(nus_init));
000154  2000              MOVS     r0,#0
000156  9000              STR      r0,[sp,#0]
;;;543    
;;;544        nus_init.data_handler = nus_data_handler;
000158  4816              LDR      r0,|L24.436|
00015a  9000              STR      r0,[sp,#0]
;;;545    
;;;546        err_code = ble_nus_init(&m_nus, &nus_init);
00015c  4669              MOV      r1,sp
00015e  4816              LDR      r0,|L24.440|
000160  f7fffffe          BL       ble_nus_init
000164  4604              MOV      r4,r0
;;;547        APP_ERROR_CHECK(err_code);
000166  bf00              NOP      
000168  4625              MOV      r5,r4
00016a  b13d              CBZ      r5,|L24.380|
00016c  bf00              NOP      
00016e  a206              ADR      r2,|L24.392|
000170  f2402123          MOV      r1,#0x223
000174  4628              MOV      r0,r5
000176  f7fffffe          BL       app_error_handler
00017a  bf00              NOP      
                  |L24.380|
00017c  bf00              NOP      
;;;548    }
00017e  b017              ADD      sp,sp,#0x5c
000180  bd30              POP      {r4,r5,pc}
;;;549    
                          ENDP

000182  0000              DCW      0x0000
                  |L24.388|
                          DCD      ||.constdata||
                  |L24.392|
000188  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
00018c  2e5c2e2e
000190  5c6d6169
000194  6e2e6300
                  |L24.408|
                          DCD      m_bas
                  |L24.412|
00019c  4e6f7264          DCB      "NordicSemiconductor",0
0001a0  69635365
0001a4  6d69636f
0001a8  6e647563
0001ac  746f7200
                  |L24.432|
0001b0  302e3100          DCB      "0.1",0
                  |L24.436|
                          DCD      nus_data_handler
                  |L24.440|
                          DCD      m_nus

                          AREA ||i.sleep_mode_enter||, CODE, READONLY, ALIGN=2

                  sleep_mode_enter PROC
;;;620     */
;;;621    static void sleep_mode_enter(void)
000000  b570              PUSH     {r4-r6,lr}
;;;622    {
;;;623        uint32_t err_code = bsp_indication_set(BSP_INDICATE_IDLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       bsp_indication_set
000008  4604              MOV      r4,r0
;;;624    
;;;625        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4625              MOV      r5,r4
00000e  b13d              CBZ      r5,|L25.32|
000010  bf00              NOP      
000012  a213              ADR      r2,|L25.96|
000014  f2402171          MOV      r1,#0x271
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       app_error_handler
00001e  bf00              NOP      
                  |L25.32|
000020  bf00              NOP      
;;;626    
;;;627        // Prepare wakeup buttons.
;;;628        err_code = bsp_btn_ble_sleep_mode_prepare();
000022  f7fffffe          BL       bsp_btn_ble_sleep_mode_prepare
000026  4604              MOV      r4,r0
;;;629        APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4625              MOV      r5,r4
00002c  b13d              CBZ      r5,|L25.62|
00002e  bf00              NOP      
000030  a20b              ADR      r2,|L25.96|
000032  f2402175          MOV      r1,#0x275
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       app_error_handler
00003c  bf00              NOP      
                  |L25.62|
00003e  bf00              NOP      
;;;630    
;;;631        // Go to system-off mode (this function will not return; wakeup will cause a reset).
;;;632        err_code = sd_power_system_off();
000040  df32              SVC      #0x32
000042  4604              MOV      r4,r0
;;;633        APP_ERROR_CHECK(err_code);
000044  bf00              NOP      
000046  4625              MOV      r5,r4
000048  b13d              CBZ      r5,|L25.90|
00004a  bf00              NOP      
00004c  a204              ADR      r2,|L25.96|
00004e  f2402179          MOV      r1,#0x279
000052  4628              MOV      r0,r5
000054  f7fffffe          BL       app_error_handler
000058  bf00              NOP      
                  |L25.90|
00005a  bf00              NOP      
;;;634    }
00005c  bd70              POP      {r4-r6,pc}
;;;635    
                          ENDP

00005e  0000              DCW      0x0000
                  |L25.96|
000060  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000064  2e5c2e2e
000068  5c6d6169
00006c  6e2e6300

                          AREA ||i.timers_init||, CODE, READONLY, ALIGN=2

                  timers_init PROC
;;;368     */
;;;369    static void timers_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;370    {
;;;371    
;;;372        // Initialize timer module.
;;;373        uint32_t err_code = app_timer_init();
000002  f7fffffe          BL       app_timer_init
000006  4604              MOV      r4,r0
;;;374        APP_ERROR_CHECK(err_code);
000008  bf00              NOP      
00000a  4625              MOV      r5,r4
00000c  b13d              CBZ      r5,|L26.30|
00000e  bf00              NOP      
000010  a204              ADR      r2,|L26.36|
000012  f44f71bb          MOV      r1,#0x176
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       app_error_handler
00001c  bf00              NOP      
                  |L26.30|
00001e  bf00              NOP      
;;;375    
;;;376        // Create timers.
;;;377    
;;;378        /* YOUR_JOB: Create any timers to be used by the application.
;;;379                     Below is an example of how to create a timer.
;;;380                     For every new timer needed, increase the value of the macro APP_TIMER_MAX_TIMERS by
;;;381                     one.
;;;382           uint32_t err_code;
;;;383           err_code = app_timer_create(&m_app_timer_id, APP_TIMER_MODE_REPEATED, timer_timeout_handler);
;;;384           APP_ERROR_CHECK(err_code); */
;;;385    }
000020  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

000022  0000              DCW      0x0000
                  |L26.36|
000024  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000028  2e5c2e2e
00002c  5c6d6169
000030  6e2e6300

                          AREA ||i.uart_event_handle||, CODE, READONLY, ALIGN=2

                  uart_event_handle PROC
;;;975    /**@snippet [Handling the data received over UART] */
;;;976    void uart_event_handle(app_uart_evt_t * p_event)
000000  b5f8              PUSH     {r3-r7,lr}
;;;977    {
000002  4605              MOV      r5,r0
;;;978        static uint8_t data_array[BLE_NUS_MAX_DATA_LEN];
;;;979        static uint8_t index = 0;
;;;980        uint32_t       err_code;
;;;981    
;;;982        switch (p_event->evt_type)
000004  7828              LDRB     r0,[r5,#0]
000006  b120              CBZ      r0,|L27.18|
000008  2801              CMP      r0,#1
00000a  d055              BEQ      |L27.184|
00000c  2802              CMP      r0,#2
00000e  d15c              BNE      |L27.202|
000010  e049              B        |L27.166|
                  |L27.18|
;;;983        {
;;;984            case APP_UART_DATA_READY:
;;;985                UNUSED_VARIABLE(app_uart_get(&data_array[index]));
000012  492f              LDR      r1,|L27.208|
000014  4a2f              LDR      r2,|L27.212|
000016  7812              LDRB     r2,[r2,#0]  ; index
000018  1888              ADDS     r0,r1,r2
00001a  f7fffffe          BL       app_uart_get
;;;986                index++;
00001e  482d              LDR      r0,|L27.212|
000020  7800              LDRB     r0,[r0,#0]  ; index
000022  1c40              ADDS     r0,r0,#1
000024  492b              LDR      r1,|L27.212|
000026  7008              STRB     r0,[r1,#0]
;;;987    
;;;988                if ((data_array[index - 1] == '\n') || (index >= (m_ble_nus_max_data_len)))
000028  4608              MOV      r0,r1
00002a  7800              LDRB     r0,[r0,#0]  ; index
00002c  1e40              SUBS     r0,r0,#1
00002e  4928              LDR      r1,|L27.208|
000030  5c08              LDRB     r0,[r1,r0]
000032  280a              CMP      r0,#0xa
000034  d005              BEQ      |L27.66|
000036  4827              LDR      r0,|L27.212|
000038  7800              LDRB     r0,[r0,#0]  ; index
00003a  4927              LDR      r1,|L27.216|
00003c  8809              LDRH     r1,[r1,#0]  ; m_ble_nus_max_data_len
00003e  4288              CMP      r0,r1
000040  db30              BLT      |L27.164|
                  |L27.66|
;;;989                {
;;;990                    NRF_LOG_DEBUG("Ready to send data over BLE NUS");
000042  4926              LDR      r1,|L27.220|
000044  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000046  2204              MOVS     r2,#4
000048  ea424001          ORR      r0,r2,r1,LSL #16
00004c  a124              ADR      r1,|L27.224|
00004e  f7fffffe          BL       nrf_log_frontend_std_0
;;;991                    NRF_LOG_HEXDUMP_DEBUG(data_array, index);
000052  4922              LDR      r1,|L27.220|
000054  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000056  2204              MOVS     r2,#4
000058  ea424001          ORR      r0,r2,r1,LSL #16
00005c  491d              LDR      r1,|L27.212|
00005e  780a              LDRB     r2,[r1,#0]  ; index
000060  491b              LDR      r1,|L27.208|
000062  f7fffffe          BL       nrf_log_frontend_hexdump
;;;992    
;;;993                    do
000066  bf00              NOP      
                  |L27.104|
;;;994                    {
;;;995                        uint16_t length = (uint16_t)index;
000068  481a              LDR      r0,|L27.212|
00006a  7800              LDRB     r0,[r0,#0]  ; index
00006c  9000              STR      r0,[sp,#0]
;;;996                        err_code = ble_nus_string_send(&m_nus, data_array, &length);
00006e  466a              MOV      r2,sp
000070  4917              LDR      r1,|L27.208|
000072  4823              LDR      r0,|L27.256|
000074  f7fffffe          BL       ble_nus_string_send
000078  4604              MOV      r4,r0
;;;997                        if ( (err_code != NRF_ERROR_INVALID_STATE) && (err_code != NRF_ERROR_BUSY) )
00007a  2c08              CMP      r4,#8
00007c  d00d              BEQ      |L27.154|
00007e  2c11              CMP      r4,#0x11
000080  d00b              BEQ      |L27.154|
;;;998                        {
;;;999                            APP_ERROR_CHECK(err_code);
000082  bf00              NOP      
000084  4626              MOV      r6,r4
000086  b13e              CBZ      r6,|L27.152|
000088  bf00              NOP      
00008a  a21e              ADR      r2,|L27.260|
00008c  f24031e7          MOV      r1,#0x3e7
000090  4630              MOV      r0,r6
000092  f7fffffe          BL       app_error_handler
000096  bf00              NOP      
                  |L27.152|
000098  bf00              NOP      
                  |L27.154|
;;;1000                       }
;;;1001                   } while (err_code == NRF_ERROR_BUSY);
00009a  2c11              CMP      r4,#0x11
00009c  d0e4              BEQ      |L27.104|
;;;1002   
;;;1003                   index = 0;
00009e  2000              MOVS     r0,#0
0000a0  490c              LDR      r1,|L27.212|
0000a2  7008              STRB     r0,[r1,#0]
                  |L27.164|
;;;1004               }
;;;1005               break;
0000a4  e012              B        |L27.204|
                  |L27.166|
;;;1006   
;;;1007           case APP_UART_COMMUNICATION_ERROR:
;;;1008               APP_ERROR_HANDLER(p_event->data.error_communication);
0000a6  bf00              NOP      
0000a8  a216              ADR      r2,|L27.260|
0000aa  f44f717c          MOV      r1,#0x3f0
0000ae  6868              LDR      r0,[r5,#4]
0000b0  f7fffffe          BL       app_error_handler
0000b4  bf00              NOP      
;;;1009               break;
0000b6  e009              B        |L27.204|
                  |L27.184|
;;;1010   
;;;1011           case APP_UART_FIFO_ERROR:
;;;1012               APP_ERROR_HANDLER(p_event->data.error_code);
0000b8  bf00              NOP      
0000ba  a212              ADR      r2,|L27.260|
0000bc  f44f717d          MOV      r1,#0x3f4
0000c0  6868              LDR      r0,[r5,#4]
0000c2  f7fffffe          BL       app_error_handler
0000c6  bf00              NOP      
;;;1013               break;
0000c8  e000              B        |L27.204|
                  |L27.202|
;;;1014   
;;;1015           default:
;;;1016               break;
0000ca  bf00              NOP      
                  |L27.204|
0000cc  bf00              NOP                            ;1005
;;;1017       }
;;;1018   }
0000ce  bdf8              POP      {r3-r7,pc}
;;;1019   /**@snippet [Handling the data received over UART] */
                          ENDP

                  |L27.208|
                          DCD      data_array
                  |L27.212|
                          DCD      index
                  |L27.216|
                          DCD      m_ble_nus_max_data_len
                  |L27.220|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L27.224|
0000e0  52656164          DCB      "Ready to send data over BLE NUS",0
0000e4  7920746f
0000e8  2073656e
0000ec  64206461
0000f0  7461206f
0000f4  76657220
0000f8  424c4520
0000fc  4e555300
                  |L27.256|
                          DCD      m_nus
                  |L27.260|
000104  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000108  2e5c2e2e
00010c  5c6d6169
000110  6e2e6300

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;1024   /**@snippet [UART Initialization] */
;;;1025   static void uart_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;1026   {
000002  b08b              SUB      sp,sp,#0x2c
;;;1027       uint32_t                     err_code;
;;;1028       app_uart_comm_params_t const comm_params =
000004  2218              MOVS     r2,#0x18
000006  4912              LDR      r1,|L28.80|
000008  a805              ADD      r0,sp,#0x14
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;1029       {
;;;1030           .rx_pin_no    = RX_PIN_NUMBER,
;;;1031           .tx_pin_no    = TX_PIN_NUMBER,
;;;1032           .rts_pin_no   = RTS_PIN_NUMBER,
;;;1033           .cts_pin_no   = CTS_PIN_NUMBER,
;;;1034           .flow_control = APP_UART_FLOW_CONTROL_DISABLED,
;;;1035           .use_parity   = false,
;;;1036           .baud_rate    = UART_BAUDRATE_BAUDRATE_Baud115200
;;;1037       };
;;;1038   
;;;1039       APP_UART_FIFO_INIT(&comm_params,
00000e  bf00              NOP      
000010  4810              LDR      r0,|L28.84|
000012  9001              STR      r0,[sp,#4]
000014  f44f7080          MOV      r0,#0x100
000018  9002              STR      r0,[sp,#8]
00001a  480f              LDR      r0,|L28.88|
00001c  9003              STR      r0,[sp,#0xc]
00001e  f44f7080          MOV      r0,#0x100
000022  9004              STR      r0,[sp,#0x10]
000024  2307              MOVS     r3,#7
000026  4a0d              LDR      r2,|L28.92|
000028  a901              ADD      r1,sp,#4
00002a  a805              ADD      r0,sp,#0x14
00002c  f7fffffe          BL       app_uart_init
000030  4604              MOV      r4,r0
000032  bf00              NOP      
;;;1040                          UART_RX_BUF_SIZE,
;;;1041                          UART_TX_BUF_SIZE,
;;;1042                          uart_event_handle,
;;;1043                          APP_IRQ_PRIORITY_LOWEST,
;;;1044                          err_code);
;;;1045       APP_ERROR_CHECK(err_code);
000034  bf00              NOP      
000036  4625              MOV      r5,r4
000038  b13d              CBZ      r5,|L28.74|
00003a  bf00              NOP      
00003c  a208              ADR      r2,|L28.96|
00003e  f2404115          MOV      r1,#0x415
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       app_error_handler
000048  bf00              NOP      
                  |L28.74|
00004a  bf00              NOP      
;;;1046   }
00004c  b00b              ADD      sp,sp,#0x2c
00004e  bd30              POP      {r4,r5,pc}
;;;1047   /**@snippet [UART Initialization] */
                          ENDP

                  |L28.80|
                          DCD      ||.constdata||+0x4
                  |L28.84|
                          DCD      rx_buf
                  |L28.88|
                          DCD      tx_buf
                  |L28.92|
                          DCD      uart_event_handle
                  |L28.96|
000060  2e2e5c2e          DCB      "..\\..\\..\\main.c",0
000064  2e5c2e2e
000068  5c6d6169
00006c  6e2e6300

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_bas
                          %        24
                  m_nus
                          %        28
                  m_gatt
                          %        20
                  m_advertising
                          %        216
                  data_array
                          %        20
                  rx_buf
                          %        256
                  tx_buf
                          %        256

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ble_dfu_evt_handler
                          DCD      0x00000008
                          DCD      0x00000006
                          DCD      0x00000005
                          DCD      0x00000007
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x01d7e000

                          AREA ||.data||, DATA, ALIGN=1

                  m_conn_handle
000000  ffff              DCW      0xffff
                  m_ble_nus_max_data_len
000002  0014              DCW      0x0014
                  m_adv_uuids
000004  180a              DCW      0x180a
000006  0100              DCB      0x01,0x00
000008  180f              DCW      0x180f
00000a  0100              DCB      0x01,0x00
                  index
00000c  00                DCB      0x00

                          AREA pwr_mgmt_data0, DATA, READONLY, ALIGN=2

                  app_shutdown_handler_handler_function
                  ||__tagsym$$used||
                          DCD      app_shutdown_handler

                          AREA sdh_ble_observers1, DATA, READONLY, ALIGN=2

                  m_ble_observer
                  |symbol_number.252|
                          DCD      ble_evt_handler
                          DCD      0x00000000

                          AREA sdh_ble_observers2, DATA, READONLY, ALIGN=2

                  m_bas_obs
                  |symbol_number.254|
                          DCD      ble_bas_on_ble_evt
                          DCD      m_bas
                  m_nus_obs
                  |symbol_number.256|
                          DCD      ble_nus_on_ble_evt
                          DCD      m_nus
                  m_gatt_obs
                  |symbol_number.258|
                          DCD      nrf_ble_gatt_on_ble_evt
                          DCD      m_gatt
                  m_advertising_ble_obs
                  |symbol_number.260|
                          DCD      ble_advertising_on_ble_evt
                          DCD      m_advertising

                          AREA sdh_soc_observers1, DATA, READONLY, ALIGN=2

                  m_advertising_soc_obs
                  |symbol_number.262|
                          DCD      ble_advertising_on_sys_evt
                          DCD      m_advertising

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_48b9ef9b____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_48b9ef9b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_48b9ef9b____REVSH|
#line 402
|__asm___6_main_c_48b9ef9b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_48b9ef9b____RRX|
#line 587
|__asm___6_main_c_48b9ef9b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
