; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_bas.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_bas.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_bas.crf ..\..\..\..\..\..\components\ble\ble_services\ble_bas\ble_bas.c]
                          THUMB

                          AREA ||i.battery_level_char_add||, CODE, READONLY, ALIGN=1

                  battery_level_char_add PROC
;;;152     */
;;;153    static uint32_t battery_level_char_add(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init)
000000  b5f0              PUSH     {r4-r7,lr}
;;;154    {
000002  b091              SUB      sp,sp,#0x44
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;155        uint32_t            err_code;
;;;156        ble_gatts_char_md_t char_md;
;;;157        ble_gatts_attr_md_t cccd_md;
;;;158        ble_gatts_attr_t    attr_char_value;
;;;159        ble_uuid_t          ble_uuid;
;;;160        ble_gatts_attr_md_t attr_md;
;;;161        uint8_t             initial_battery_level;
;;;162        uint8_t             encoded_report_ref[BLE_SRV_ENCODED_REPORT_REF_LEN];
;;;163        uint8_t             init_len;
;;;164    
;;;165        // Add Battery Level characteristic
;;;166        if (p_bas->is_notification_supported)
000008  7d20              LDRB     r0,[r4,#0x14]
00000a  b1d8              CBZ      r0,|L1.68|
;;;167        {
;;;168            memset(&cccd_md, 0, sizeof(cccd_md));
00000c  2000              MOVS     r0,#0
00000e  9009              STR      r0,[sp,#0x24]
;;;169    
;;;170            // According to BAS_SPEC_V10, the read operation on cccd should be possible without
;;;171            // authentication.
;;;172            BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
000010  bf00              NOP      
000012  f89d0024          LDRB     r0,[sp,#0x24]
000016  f020000f          BIC      r0,r0,#0xf
00001a  1c40              ADDS     r0,r0,#1
00001c  f88d0024          STRB     r0,[sp,#0x24]
000020  f89d0024          LDRB     r0,[sp,#0x24]
000024  f02000f0          BIC      r0,r0,#0xf0
000028  3010              ADDS     r0,r0,#0x10
00002a  f88d0024          STRB     r0,[sp,#0x24]
00002e  bf00              NOP      
;;;173            cccd_md.write_perm = p_bas_init->battery_level_char_attr_md.cccd_write_perm;
000030  7b68              LDRB     r0,[r5,#0xd]
000032  f88d0025          STRB     r0,[sp,#0x25]
;;;174            cccd_md.vloc       = BLE_GATTS_VLOC_STACK;
000036  f89d0026          LDRB     r0,[sp,#0x26]
00003a  f0200006          BIC      r0,r0,#6
00003e  1c80              ADDS     r0,r0,#2
000040  f88d0026          STRB     r0,[sp,#0x26]
                  |L1.68|
;;;175        }
;;;176    
;;;177        memset(&char_md, 0, sizeof(char_md));
000044  211c              MOVS     r1,#0x1c
000046  a80a              ADD      r0,sp,#0x28
000048  f7fffffe          BL       __aeabi_memclr4
;;;178    
;;;179        char_md.char_props.read   = 1;
00004c  f89d0028          LDRB     r0,[sp,#0x28]
000050  f0200002          BIC      r0,r0,#2
000054  1c80              ADDS     r0,r0,#2
000056  f88d0028          STRB     r0,[sp,#0x28]
;;;180        char_md.char_props.notify = (p_bas->is_notification_supported) ? 1 : 0;
00005a  7d20              LDRB     r0,[r4,#0x14]
00005c  b108              CBZ      r0,|L1.98|
00005e  2001              MOVS     r0,#1
000060  e000              B        |L1.100|
                  |L1.98|
000062  2000              MOVS     r0,#0
                  |L1.100|
000064  f89d1028          LDRB     r1,[sp,#0x28]
000068  f3601104          BFI      r1,r0,#4,#1
00006c  f88d1028          STRB     r1,[sp,#0x28]
;;;181        char_md.p_char_user_desc  = NULL;
000070  2000              MOVS     r0,#0
000072  900b              STR      r0,[sp,#0x2c]
;;;182        char_md.p_char_pf         = NULL;
000074  900d              STR      r0,[sp,#0x34]
;;;183        char_md.p_user_desc_md    = NULL;
000076  900e              STR      r0,[sp,#0x38]
;;;184        char_md.p_cccd_md         = (p_bas->is_notification_supported) ? &cccd_md : NULL;
000078  7d20              LDRB     r0,[r4,#0x14]
00007a  b108              CBZ      r0,|L1.128|
00007c  a809              ADD      r0,sp,#0x24
00007e  e000              B        |L1.130|
                  |L1.128|
000080  2000              MOVS     r0,#0
                  |L1.130|
000082  900f              STR      r0,[sp,#0x3c]
;;;185        char_md.p_sccd_md         = NULL;
000084  2000              MOVS     r0,#0
000086  9010              STR      r0,[sp,#0x40]
;;;186    
;;;187        BLE_UUID_BLE_ASSIGN(ble_uuid, BLE_UUID_BATTERY_LEVEL_CHAR);
000088  bf00              NOP      
00008a  2001              MOVS     r0,#1
00008c  f88d000e          STRB     r0,[sp,#0xe]
000090  f6422019          MOV      r0,#0x2a19
000094  f8ad000c          STRH     r0,[sp,#0xc]
000098  bf00              NOP      
;;;188    
;;;189        memset(&attr_md, 0, sizeof(attr_md));
00009a  2000              MOVS     r0,#0
00009c  9002              STR      r0,[sp,#8]
;;;190    
;;;191        attr_md.read_perm  = p_bas_init->battery_level_char_attr_md.read_perm;
00009e  7ba8              LDRB     r0,[r5,#0xe]
0000a0  f88d0008          STRB     r0,[sp,#8]
;;;192        attr_md.write_perm = p_bas_init->battery_level_char_attr_md.write_perm;
0000a4  7be8              LDRB     r0,[r5,#0xf]
0000a6  f88d0009          STRB     r0,[sp,#9]
;;;193        attr_md.vloc       = BLE_GATTS_VLOC_STACK;
0000aa  f89d000a          LDRB     r0,[sp,#0xa]
0000ae  f0200006          BIC      r0,r0,#6
0000b2  1c80              ADDS     r0,r0,#2
0000b4  f88d000a          STRB     r0,[sp,#0xa]
;;;194        attr_md.rd_auth    = 0;
0000b8  f89d000a          LDRB     r0,[sp,#0xa]
0000bc  f0200008          BIC      r0,r0,#8
0000c0  f88d000a          STRB     r0,[sp,#0xa]
;;;195        attr_md.wr_auth    = 0;
0000c4  f89d000a          LDRB     r0,[sp,#0xa]
0000c8  f0200010          BIC      r0,r0,#0x10
0000cc  f88d000a          STRB     r0,[sp,#0xa]
;;;196        attr_md.vlen       = 0;
0000d0  f89d000a          LDRB     r0,[sp,#0xa]
0000d4  f0200001          BIC      r0,r0,#1
0000d8  f88d000a          STRB     r0,[sp,#0xa]
;;;197    
;;;198        initial_battery_level = p_bas_init->initial_batt_level;
0000dc  7b28              LDRB     r0,[r5,#0xc]
0000de  9001              STR      r0,[sp,#4]
;;;199    
;;;200        memset(&attr_char_value, 0, sizeof(attr_char_value));
0000e0  2114              MOVS     r1,#0x14
0000e2  a804              ADD      r0,sp,#0x10
0000e4  f7fffffe          BL       __aeabi_memclr4
;;;201    
;;;202        attr_char_value.p_uuid    = &ble_uuid;
0000e8  a803              ADD      r0,sp,#0xc
0000ea  9004              STR      r0,[sp,#0x10]
;;;203        attr_char_value.p_attr_md = &attr_md;
0000ec  a802              ADD      r0,sp,#8
0000ee  9005              STR      r0,[sp,#0x14]
;;;204        attr_char_value.init_len  = sizeof(uint8_t);
0000f0  2001              MOVS     r0,#1
0000f2  f8ad0018          STRH     r0,[sp,#0x18]
;;;205        attr_char_value.init_offs = 0;
0000f6  2000              MOVS     r0,#0
0000f8  f8ad001a          STRH     r0,[sp,#0x1a]
;;;206        attr_char_value.max_len   = sizeof(uint8_t);
0000fc  2001              MOVS     r0,#1
0000fe  f8ad001c          STRH     r0,[sp,#0x1c]
;;;207        attr_char_value.p_value   = &initial_battery_level;
000102  a801              ADD      r0,sp,#4
000104  9008              STR      r0,[sp,#0x20]
;;;208    
;;;209        err_code = sd_ble_gatts_characteristic_add(p_bas->service_handle, &char_md,
000106  88a0              LDRH     r0,[r4,#4]
000108  1da3              ADDS     r3,r4,#6
00010a  aa04              ADD      r2,sp,#0x10
00010c  a90a              ADD      r1,sp,#0x28
00010e  dfa2              SVC      #0xa2
000110  4606              MOV      r6,r0
;;;210                                                   &attr_char_value,
;;;211                                                   &p_bas->battery_level_handles);
;;;212        if (err_code != NRF_SUCCESS)
000112  b116              CBZ      r6,|L1.282|
;;;213        {
;;;214            return err_code;
000114  4630              MOV      r0,r6
                  |L1.278|
;;;215        }
;;;216    
;;;217        if (p_bas_init->p_report_ref != NULL)
;;;218        {
;;;219            // Add Report Reference descriptor
;;;220            BLE_UUID_BLE_ASSIGN(ble_uuid, BLE_UUID_REPORT_REF_DESCR);
;;;221    
;;;222            memset(&attr_md, 0, sizeof(attr_md));
;;;223    
;;;224            attr_md.read_perm = p_bas_init->battery_level_report_read_perm;
;;;225            BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(&attr_md.write_perm);
;;;226    
;;;227            attr_md.vloc    = BLE_GATTS_VLOC_STACK;
;;;228            attr_md.rd_auth = 0;
;;;229            attr_md.wr_auth = 0;
;;;230            attr_md.vlen    = 0;
;;;231    
;;;232            init_len = ble_srv_report_ref_encode(encoded_report_ref, p_bas_init->p_report_ref);
;;;233    
;;;234            memset(&attr_char_value, 0, sizeof(attr_char_value));
;;;235    
;;;236            attr_char_value.p_uuid    = &ble_uuid;
;;;237            attr_char_value.p_attr_md = &attr_md;
;;;238            attr_char_value.init_len  = init_len;
;;;239            attr_char_value.init_offs = 0;
;;;240            attr_char_value.max_len   = attr_char_value.init_len;
;;;241            attr_char_value.p_value   = encoded_report_ref;
;;;242    
;;;243            err_code = sd_ble_gatts_descriptor_add(p_bas->battery_level_handles.value_handle,
;;;244                                                   &attr_char_value,
;;;245                                                   &p_bas->report_ref_handle);
;;;246            if (err_code != NRF_SUCCESS)
;;;247            {
;;;248                return err_code;
;;;249            }
;;;250        }
;;;251        else
;;;252        {
;;;253            p_bas->report_ref_handle = BLE_GATT_HANDLE_INVALID;
;;;254        }
;;;255    
;;;256        return NRF_SUCCESS;
;;;257    }
000116  b011              ADD      sp,sp,#0x44
000118  bdf0              POP      {r4-r7,pc}
                  |L1.282|
00011a  68a8              LDR      r0,[r5,#8]            ;217
00011c  2800              CMP      r0,#0                 ;217
00011e  d055              BEQ      |L1.460|
000120  bf00              NOP                            ;220
000122  2001              MOVS     r0,#1                 ;220
000124  f88d000e          STRB     r0,[sp,#0xe]          ;220
000128  f6421008          MOV      r0,#0x2908            ;220
00012c  f8ad000c          STRH     r0,[sp,#0xc]          ;220
000130  bf00              NOP                            ;220
000132  2000              MOVS     r0,#0                 ;222
000134  9002              STR      r0,[sp,#8]            ;222
000136  7c28              LDRB     r0,[r5,#0x10]         ;224
000138  f88d0008          STRB     r0,[sp,#8]            ;224
00013c  bf00              NOP                            ;225
00013e  f89d0009          LDRB     r0,[sp,#9]            ;225
000142  f020000f          BIC      r0,r0,#0xf            ;225
000146  f88d0009          STRB     r0,[sp,#9]            ;225
00014a  f89d0009          LDRB     r0,[sp,#9]            ;225
00014e  f02000f0          BIC      r0,r0,#0xf0           ;225
000152  f88d0009          STRB     r0,[sp,#9]            ;225
000156  bf00              NOP                            ;225
000158  f89d000a          LDRB     r0,[sp,#0xa]          ;227
00015c  f0200006          BIC      r0,r0,#6              ;227
000160  1c80              ADDS     r0,r0,#2              ;227
000162  f88d000a          STRB     r0,[sp,#0xa]          ;227
000166  f89d000a          LDRB     r0,[sp,#0xa]          ;228
00016a  f0200008          BIC      r0,r0,#8              ;228
00016e  f88d000a          STRB     r0,[sp,#0xa]          ;228
000172  f89d000a          LDRB     r0,[sp,#0xa]          ;229
000176  f0200010          BIC      r0,r0,#0x10           ;229
00017a  f88d000a          STRB     r0,[sp,#0xa]          ;229
00017e  f89d000a          LDRB     r0,[sp,#0xa]          ;230
000182  f0200001          BIC      r0,r0,#1              ;230
000186  f88d000a          STRB     r0,[sp,#0xa]          ;230
00018a  4668              MOV      r0,sp                 ;232
00018c  68a9              LDR      r1,[r5,#8]            ;232
00018e  f7fffffe          BL       ble_srv_report_ref_encode
000192  4607              MOV      r7,r0                 ;232
000194  2114              MOVS     r1,#0x14              ;234
000196  a804              ADD      r0,sp,#0x10           ;234
000198  f7fffffe          BL       __aeabi_memclr4
00019c  a803              ADD      r0,sp,#0xc            ;236
00019e  9004              STR      r0,[sp,#0x10]         ;236
0001a0  a802              ADD      r0,sp,#8              ;237
0001a2  9005              STR      r0,[sp,#0x14]         ;237
0001a4  f8ad7018          STRH     r7,[sp,#0x18]         ;238
0001a8  2000              MOVS     r0,#0                 ;239
0001aa  f8ad001a          STRH     r0,[sp,#0x1a]         ;239
0001ae  f8bd0018          LDRH     r0,[sp,#0x18]         ;240
0001b2  f8ad001c          STRH     r0,[sp,#0x1c]         ;240
0001b6  f8cdd020          STR      sp,[sp,#0x20]         ;241
0001ba  88e0              LDRH     r0,[r4,#6]            ;243
0001bc  f104020e          ADD      r2,r4,#0xe            ;243
0001c0  a904              ADD      r1,sp,#0x10           ;243
0001c2  dfa3              SVC      #0xa3                 ;243
0001c4  4606              MOV      r6,r0                 ;243
0001c6  b11e              CBZ      r6,|L1.464|
0001c8  4630              MOV      r0,r6                 ;248
0001ca  e7a4              B        |L1.278|
                  |L1.460|
0001cc  2000              MOVS     r0,#0                 ;253
0001ce  81e0              STRH     r0,[r4,#0xe]          ;253
                  |L1.464|
0001d0  2000              MOVS     r0,#0                 ;256
0001d2  e7a0              B        |L1.278|
;;;258    
                          ENDP


                          AREA ||i.ble_bas_battery_level_update||, CODE, READONLY, ALIGN=1

                  ble_bas_battery_level_update PROC
;;;289    
;;;290    uint32_t ble_bas_battery_level_update(ble_bas_t * p_bas, uint8_t battery_level)
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;291    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
;;;292        if (p_bas == NULL)
000006  b914              CBNZ     r4,|L2.14|
;;;293        {
;;;294            return NRF_ERROR_NULL;
000008  200e              MOVS     r0,#0xe
                  |L2.10|
;;;295        }
;;;296    
;;;297        uint32_t err_code = NRF_SUCCESS;
;;;298        ble_gatts_value_t gatts_value;
;;;299    
;;;300        if (battery_level != p_bas->battery_level_last)
;;;301        {
;;;302            // Initialize value struct.
;;;303            memset(&gatts_value, 0, sizeof(gatts_value));
;;;304    
;;;305            gatts_value.len     = sizeof(uint8_t);
;;;306            gatts_value.offset  = 0;
;;;307            gatts_value.p_value = &battery_level;
;;;308    
;;;309            // Update database.
;;;310            err_code = sd_ble_gatts_value_set(p_bas->conn_handle,
;;;311                                              p_bas->battery_level_handles.value_handle,
;;;312                                              &gatts_value);
;;;313            if (err_code == NRF_SUCCESS)
;;;314            {
;;;315                // Save new battery value.
;;;316                p_bas->battery_level_last = battery_level;
;;;317            }
;;;318            else
;;;319            {
;;;320                return err_code;
;;;321            }
;;;322    
;;;323            // Send value if connected and notifying.
;;;324            if ((p_bas->conn_handle != BLE_CONN_HANDLE_INVALID) && p_bas->is_notification_supported)
;;;325            {
;;;326                ble_gatts_hvx_params_t hvx_params;
;;;327    
;;;328                memset(&hvx_params, 0, sizeof(hvx_params));
;;;329    
;;;330                hvx_params.handle = p_bas->battery_level_handles.value_handle;
;;;331                hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
;;;332                hvx_params.offset = gatts_value.offset;
;;;333                hvx_params.p_len  = &gatts_value.len;
;;;334                hvx_params.p_data = gatts_value.p_value;
;;;335    
;;;336                err_code = sd_ble_gatts_hvx(p_bas->conn_handle, &hvx_params);
;;;337            }
;;;338            else
;;;339            {
;;;340                err_code = NRF_ERROR_INVALID_STATE;
;;;341            }
;;;342        }
;;;343    
;;;344        return err_code;
;;;345    }
00000a  b009              ADD      sp,sp,#0x24
00000c  bd30              POP      {r4,r5,pc}
                  |L2.14|
00000e  2500              MOVS     r5,#0                 ;297
000010  7c20              LDRB     r0,[r4,#0x10]         ;300
000012  f89d1020          LDRB     r1,[sp,#0x20]         ;300
000016  4288              CMP      r0,r1                 ;300
000018  d036              BEQ      |L2.136|
00001a  2000              MOVS     r0,#0                 ;303
00001c  9005              STR      r0,[sp,#0x14]         ;303
00001e  9006              STR      r0,[sp,#0x18]         ;303
000020  2001              MOVS     r0,#1                 ;305
000022  f8ad0014          STRH     r0,[sp,#0x14]         ;305
000026  2000              MOVS     r0,#0                 ;306
000028  f8ad0016          STRH     r0,[sp,#0x16]         ;306
00002c  a808              ADD      r0,sp,#0x20           ;307
00002e  9006              STR      r0,[sp,#0x18]         ;307
000030  88e1              LDRH     r1,[r4,#6]            ;310
000032  8a60              LDRH     r0,[r4,#0x12]         ;310
000034  aa05              ADD      r2,sp,#0x14           ;310
000036  dfa4              SVC      #0xa4                 ;310
000038  4605              MOV      r5,r0                 ;310
00003a  b91d              CBNZ     r5,|L2.68|
00003c  f89d0020          LDRB     r0,[sp,#0x20]         ;316
000040  7420              STRB     r0,[r4,#0x10]         ;316
000042  e001              B        |L2.72|
                  |L2.68|
000044  4628              MOV      r0,r5                 ;320
000046  e7e0              B        |L2.10|
                  |L2.72|
000048  8a60              LDRH     r0,[r4,#0x12]         ;324
00004a  f64f71ff          MOV      r1,#0xffff            ;324
00004e  4288              CMP      r0,r1                 ;324
000050  d019              BEQ      |L2.134|
000052  7d20              LDRB     r0,[r4,#0x14]         ;324
000054  b1b8              CBZ      r0,|L2.134|
000056  2000              MOVS     r0,#0                 ;328
000058  9001              STR      r0,[sp,#4]            ;328
00005a  9002              STR      r0,[sp,#8]            ;328
00005c  9003              STR      r0,[sp,#0xc]          ;328
00005e  9004              STR      r0,[sp,#0x10]         ;328
000060  88e0              LDRH     r0,[r4,#6]            ;330
000062  f8ad0004          STRH     r0,[sp,#4]            ;330
000066  2001              MOVS     r0,#1                 ;331
000068  f88d0006          STRB     r0,[sp,#6]            ;331
00006c  f8bd0016          LDRH     r0,[sp,#0x16]         ;332
000070  f8ad0008          STRH     r0,[sp,#8]            ;332
000074  a805              ADD      r0,sp,#0x14           ;333
000076  9003              STR      r0,[sp,#0xc]          ;333
000078  9806              LDR      r0,[sp,#0x18]         ;334
00007a  9004              STR      r0,[sp,#0x10]         ;334
00007c  8a60              LDRH     r0,[r4,#0x12]         ;336
00007e  a901              ADD      r1,sp,#4              ;336
000080  dfa6              SVC      #0xa6                 ;336
000082  4605              MOV      r5,r0                 ;336
000084  e000              B        |L2.136|
                  |L2.134|
000086  2508              MOVS     r5,#8                 ;340
                  |L2.136|
000088  4628              MOV      r0,r5                 ;344
00008a  e7be              B        |L2.10|
;;;346    #endif // NRF_MODULE_ENABLED(BLE_BAS)
                          ENDP


                          AREA ||i.ble_bas_init||, CODE, READONLY, ALIGN=1

                  ble_bas_init PROC
;;;259    
;;;260    uint32_t ble_bas_init(ble_bas_t * p_bas, const ble_bas_init_t * p_bas_init)
000000  b5f8              PUSH     {r3-r7,lr}
;;;261    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;262        if (p_bas == NULL || p_bas_init == NULL)
000006  b104              CBZ      r4,|L3.10|
000008  b90d              CBNZ     r5,|L3.14|
                  |L3.10|
;;;263        {
;;;264            return NRF_ERROR_NULL;
00000a  200e              MOVS     r0,#0xe
                  |L3.12|
;;;265        }
;;;266    
;;;267        uint32_t   err_code;
;;;268        ble_uuid_t ble_uuid;
;;;269    
;;;270        // Initialize service structure
;;;271        p_bas->evt_handler               = p_bas_init->evt_handler;
;;;272        p_bas->conn_handle               = BLE_CONN_HANDLE_INVALID;
;;;273        p_bas->is_notification_supported = p_bas_init->support_notification;
;;;274        p_bas->battery_level_last        = INVALID_BATTERY_LEVEL;
;;;275    
;;;276        // Add service
;;;277        BLE_UUID_BLE_ASSIGN(ble_uuid, BLE_UUID_BATTERY_SERVICE);
;;;278    
;;;279        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &p_bas->service_handle);
;;;280        if (err_code != NRF_SUCCESS)
;;;281        {
;;;282            return err_code;
;;;283        }
;;;284    
;;;285        // Add battery level characteristic
;;;286        return battery_level_char_add(p_bas, p_bas_init);
;;;287    }
00000c  bdf8              POP      {r3-r7,pc}
                  |L3.14|
00000e  6828              LDR      r0,[r5,#0]            ;271
000010  6020              STR      r0,[r4,#0]            ;271
000012  f64f70ff          MOV      r0,#0xffff            ;272
000016  8260              STRH     r0,[r4,#0x12]         ;272
000018  7928              LDRB     r0,[r5,#4]            ;273
00001a  7520              STRB     r0,[r4,#0x14]         ;273
00001c  20ff              MOVS     r0,#0xff              ;274
00001e  7420              STRB     r0,[r4,#0x10]         ;274
000020  bf00              NOP                            ;277
000022  2001              MOVS     r0,#1                 ;277
000024  f88d0002          STRB     r0,[sp,#2]            ;277
000028  f641000f          MOV      r0,#0x180f            ;277
00002c  f8ad0000          STRH     r0,[sp,#0]            ;277
000030  bf00              NOP                            ;277
000032  1d22              ADDS     r2,r4,#4              ;279
000034  4669              MOV      r1,sp                 ;279
000036  2001              MOVS     r0,#1                 ;279
000038  dfa0              SVC      #0xa0                 ;279
00003a  4606              MOV      r6,r0                 ;279
00003c  b10e              CBZ      r6,|L3.66|
00003e  4630              MOV      r0,r6                 ;282
000040  e7e4              B        |L3.12|
                  |L3.66|
000042  4629              MOV      r1,r5                 ;286
000044  4620              MOV      r0,r4                 ;286
000046  f7fffffe          BL       battery_level_char_add
00004a  e7df              B        |L3.12|
;;;288    
                          ENDP


                          AREA ||i.ble_bas_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_bas_on_ble_evt PROC
;;;115    
;;;116    void ble_bas_on_ble_evt(ble_evt_t const * p_ble_evt, void * p_context)
000000  b570              PUSH     {r4-r6,lr}
;;;117    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;118        if ((p_context == NULL) || (p_ble_evt == NULL))
000006  b105              CBZ      r5,|L4.10|
000008  b904              CBNZ     r4,|L4.12|
                  |L4.10|
;;;119        {
;;;120            return;
;;;121        }
;;;122    
;;;123        ble_bas_t * p_bas = (ble_bas_t *)p_context;
;;;124    
;;;125        switch (p_ble_evt->header.evt_id)
;;;126        {
;;;127            case BLE_GAP_EVT_CONNECTED:
;;;128                on_connect(p_bas, p_ble_evt);
;;;129                break;
;;;130    
;;;131            case BLE_GAP_EVT_DISCONNECTED:
;;;132                on_disconnect(p_bas, p_ble_evt);
;;;133                break;
;;;134    
;;;135            case BLE_GATTS_EVT_WRITE:
;;;136                on_write(p_bas, p_ble_evt);
;;;137                break;
;;;138    
;;;139            default:
;;;140                // No implementation needed.
;;;141                break;
;;;142        }
;;;143    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  462e              MOV      r6,r5                 ;123
00000e  8820              LDRH     r0,[r4,#0]            ;125
000010  2810              CMP      r0,#0x10              ;125
000012  d004              BEQ      |L4.30|
000014  2811              CMP      r0,#0x11              ;125
000016  d007              BEQ      |L4.40|
000018  2850              CMP      r0,#0x50              ;125
00001a  d10f              BNE      |L4.60|
00001c  e009              B        |L4.50|
                  |L4.30|
00001e  4621              MOV      r1,r4                 ;128
000020  4630              MOV      r0,r6                 ;128
000022  f7fffffe          BL       on_connect
000026  e00a              B        |L4.62|
                  |L4.40|
000028  4621              MOV      r1,r4                 ;132
00002a  4630              MOV      r0,r6                 ;132
00002c  f7fffffe          BL       on_disconnect
000030  e005              B        |L4.62|
                  |L4.50|
000032  4621              MOV      r1,r4                 ;136
000034  4630              MOV      r0,r6                 ;136
000036  f7fffffe          BL       on_write
00003a  e000              B        |L4.62|
                  |L4.60|
00003c  bf00              NOP                            ;141
                  |L4.62|
00003e  bf00              NOP                            ;129
000040  bf00              NOP      
000042  e7e2              B        |L4.10|
;;;144    
                          ENDP


                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=1

                  on_connect PROC
;;;58      */
;;;59     static void on_connect(ble_bas_t * p_bas, ble_evt_t const * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;60     {
;;;61         p_bas->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  8242              STRH     r2,[r0,#0x12]
;;;62     }
000004  4770              BX       lr
;;;63     
                          ENDP


                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=1

                  on_disconnect PROC
;;;69      */
;;;70     static void on_disconnect(ble_bas_t * p_bas, ble_evt_t const * p_ble_evt)
000000  f64f72ff          MOV      r2,#0xffff
;;;71     {
;;;72         UNUSED_PARAMETER(p_ble_evt);
;;;73         p_bas->conn_handle = BLE_CONN_HANDLE_INVALID;
000004  8242              STRH     r2,[r0,#0x12]
;;;74     }
000006  4770              BX       lr
;;;75     
                          ENDP


                          AREA ||i.on_write||, CODE, READONLY, ALIGN=1

                  on_write PROC
;;;81      */
;;;82     static void on_write(ble_bas_t * p_bas, ble_evt_t const * p_ble_evt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;83     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;84         if (!p_bas->is_notification_supported)
000006  7d20              LDRB     r0,[r4,#0x14]
000008  b900              CBNZ     r0,|L7.12|
                  |L7.10|
;;;85         {
;;;86             return;
;;;87         }
;;;88     
;;;89         ble_gatts_evt_write_t const * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
;;;90     
;;;91         if (    (p_evt_write->handle == p_bas->battery_level_handles.cccd_handle)
;;;92             &&  (p_evt_write->len == 2))
;;;93         {
;;;94             if (p_bas->evt_handler == NULL)
;;;95             {
;;;96                 return;
;;;97             }
;;;98     
;;;99             ble_bas_evt_t evt;
;;;100    
;;;101            if (ble_srv_is_notification_enabled(p_evt_write->data))
;;;102            {
;;;103                evt.evt_type = BLE_BAS_EVT_NOTIFICATION_ENABLED;
;;;104            }
;;;105            else
;;;106            {
;;;107                evt.evt_type = BLE_BAS_EVT_NOTIFICATION_DISABLED;
;;;108            }
;;;109    
;;;110            // CCCD written, call application event handler.
;;;111            p_bas->evt_handler(p_bas, &evt);
;;;112        }
;;;113    }
00000a  bdf8              POP      {r3-r7,pc}
                  |L7.12|
00000c  1db5              ADDS     r5,r6,#6              ;89
00000e  8829              LDRH     r1,[r5,#0]            ;91
000010  8960              LDRH     r0,[r4,#0xa]          ;91
000012  4281              CMP      r1,r0                 ;91
000014  d114              BNE      |L7.64|
000016  8968              LDRH     r0,[r5,#0xa]          ;92
000018  2802              CMP      r0,#2                 ;92
00001a  d111              BNE      |L7.64|
00001c  6820              LDR      r0,[r4,#0]            ;94
00001e  b900              CBNZ     r0,|L7.34|
000020  e7f3              B        |L7.10|
                  |L7.34|
000022  f105000c          ADD      r0,r5,#0xc            ;101
000026  f7fffffe          BL       ble_srv_is_notification_enabled
00002a  b110              CBZ      r0,|L7.50|
00002c  2000              MOVS     r0,#0                 ;103
00002e  9000              STR      r0,[sp,#0]            ;103
000030  e001              B        |L7.54|
                  |L7.50|
000032  2001              MOVS     r0,#1                 ;107
000034  9000              STR      r0,[sp,#0]            ;107
                  |L7.54|
000036  4669              MOV      r1,sp                 ;111
000038  4620              MOV      r0,r4                 ;111
00003a  6822              LDR      r2,[r4,#0]            ;111
00003c  4790              BLX      r2                    ;111
00003e  bf00              NOP                            ;112
                  |L7.64|
000040  bf00              NOP      
000042  e7e2              B        |L7.10|
;;;114    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_services\\ble_bas\\ble_bas.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_bas_c_054de55d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____REVSH|
#line 402
|__asm___9_ble_bas_c_054de55d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_bas_c_054de55d____RRX|
#line 587
|__asm___9_ble_bas_c_054de55d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
