; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_advertising.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_advertising.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_advertising.crf ..\..\..\..\..\..\components\ble\ble_advertising\ble_advertising.c]
                          THUMB

                          AREA ||i.addr_is_valid||, CODE, READONLY, ALIGN=1

                  addr_is_valid PROC
;;;73      */
;;;74     static bool addr_is_valid(uint8_t const * const addr)
000000  4602              MOV      r2,r0
;;;75     {
;;;76         for (uint32_t i = 0; i < BLE_GAP_ADDR_LEN; i++)
000002  2100              MOVS     r1,#0
000004  e004              B        |L1.16|
                  |L1.6|
;;;77         {
;;;78             if (addr[i] != 0)
000006  5c50              LDRB     r0,[r2,r1]
000008  b108              CBZ      r0,|L1.14|
;;;79             {
;;;80                 return true;
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;81             }
;;;82         }
;;;83         return false;
;;;84     }
00000c  4770              BX       lr
                  |L1.14|
00000e  1c49              ADDS     r1,r1,#1              ;76
                  |L1.16|
000010  2906              CMP      r1,#6                 ;76
000012  d3f8              BCC      |L1.6|
000014  2000              MOVS     r0,#0                 ;83
000016  e7f9              B        |L1.12|
;;;85     
                          ENDP


                          AREA ||i.adv_mode_next_avail_get||, CODE, READONLY, ALIGN=1

                  adv_mode_next_avail_get PROC
;;;170     */
;;;171    static ble_adv_mode_t adv_mode_next_avail_get(ble_advertising_t * const p_advertising,
000000  b570              PUSH     {r4-r6,lr}
;;;172                                                  ble_adv_mode_t            adv_mode)
;;;173    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;174        bool peer_addr_is_valid = addr_is_valid(p_advertising->peer_address.addr);
000006  f1040026          ADD      r0,r4,#0x26
00000a  f7fffffe          BL       addr_is_valid
00000e  4606              MOV      r6,r0
;;;175    
;;;176        // If a mode is disabled, continue to the next mode.
;;;177    
;;;178        switch (adv_mode)
000010  2d01              CMP      r5,#1
000012  d006              BEQ      |L2.34|
000014  2d02              CMP      r5,#2
000016  d00a              BEQ      |L2.46|
000018  2d03              CMP      r5,#3
00001a  d00e              BEQ      |L2.58|
00001c  2d04              CMP      r5,#4
00001e  d116              BNE      |L2.78|
000020  e010              B        |L2.68|
                  |L2.34|
;;;179        {
;;;180            case BLE_ADV_MODE_DIRECTED:
;;;181                if ((p_advertising->adv_modes_config.ble_adv_directed_enabled) && peer_addr_is_valid)
000022  79a0              LDRB     r0,[r4,#6]
000024  b110              CBZ      r0,|L2.44|
000026  b10e              CBZ      r6,|L2.44|
;;;182                {
;;;183                    return BLE_ADV_MODE_DIRECTED;
000028  2001              MOVS     r0,#1
                  |L2.42|
;;;184                }
;;;185                // Fallthrough.
;;;186    
;;;187            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;188                if ((p_advertising->adv_modes_config.ble_adv_directed_slow_enabled) && peer_addr_is_valid)
;;;189                {
;;;190                    return BLE_ADV_MODE_DIRECTED_SLOW;
;;;191                }
;;;192                // Fallthrough.
;;;193    
;;;194            case BLE_ADV_MODE_FAST:
;;;195                if (p_advertising->adv_modes_config.ble_adv_fast_enabled)
;;;196                {
;;;197                    return BLE_ADV_MODE_FAST;
;;;198                }
;;;199                // Fallthrough.
;;;200    
;;;201            case BLE_ADV_MODE_SLOW:
;;;202                if (p_advertising->adv_modes_config.ble_adv_slow_enabled)
;;;203                {
;;;204                    return BLE_ADV_MODE_SLOW;
;;;205                }
;;;206                // Fallthrough.
;;;207    
;;;208            default:
;;;209                return BLE_ADV_MODE_IDLE;
;;;210        }
;;;211    }
00002a  bd70              POP      {r4-r6,pc}
                  |L2.44|
00002c  bf00              NOP                            ;187
                  |L2.46|
00002e  79e0              LDRB     r0,[r4,#7]            ;188
000030  b110              CBZ      r0,|L2.56|
000032  b10e              CBZ      r6,|L2.56|
000034  2002              MOVS     r0,#2                 ;190
000036  e7f8              B        |L2.42|
                  |L2.56|
000038  bf00              NOP                            ;194
                  |L2.58|
00003a  7a20              LDRB     r0,[r4,#8]            ;195
00003c  b108              CBZ      r0,|L2.66|
00003e  2003              MOVS     r0,#3                 ;197
000040  e7f3              B        |L2.42|
                  |L2.66|
000042  bf00              NOP                            ;201
                  |L2.68|
000044  7a60              LDRB     r0,[r4,#9]            ;202
000046  b108              CBZ      r0,|L2.76|
000048  2004              MOVS     r0,#4                 ;204
00004a  e7ee              B        |L2.42|
                  |L2.76|
00004c  bf00              NOP                            ;208
                  |L2.78|
00004e  2000              MOVS     r0,#0                 ;209
000050  e7eb              B        |L2.42|
;;;212    
                          ENDP


                          AREA ||i.adv_mode_next_get||, CODE, READONLY, ALIGN=1

                  adv_mode_next_get PROC
;;;86     
;;;87     static ble_adv_mode_t adv_mode_next_get(ble_adv_mode_t adv_mode)
000000  4601              MOV      r1,r0
;;;88     {
;;;89         return (ble_adv_mode_t)((adv_mode + 1) % BLE_ADV_MODES);
000002  1c48              ADDS     r0,r1,#1
000004  2205              MOVS     r2,#5
000006  fb90f3f2          SDIV     r3,r0,r2
00000a  fb020013          MLS      r0,r2,r3,r0
00000e  b2c0              UXTB     r0,r0
;;;90     }
000010  4770              BX       lr
;;;91     
                          ENDP


                          AREA ||i.ble_advertising_conn_cfg_tag_set||, CODE, READONLY, ALIGN=1

                  ble_advertising_conn_cfg_tag_set PROC
;;;343    
;;;344    void ble_advertising_conn_cfg_tag_set(ble_advertising_t * const p_advertising,
000000  f8801024          STRB     r1,[r0,#0x24]
;;;345                                          uint8_t                   ble_cfg_tag)
;;;346    {
;;;347        p_advertising->conn_cfg_tag = ble_cfg_tag;
;;;348    }
000004  4770              BX       lr
;;;349    
                          ENDP


                          AREA ||i.ble_advertising_init||, CODE, READONLY, ALIGN=1

                  ble_advertising_init PROC
;;;350    
;;;351    uint32_t ble_advertising_init(ble_advertising_t            * const p_advertising,
000000  b570              PUSH     {r4-r6,lr}
;;;352                                  ble_advertising_init_t const * const p_init)
;;;353    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;354        uint32_t ret;
;;;355        if ((p_init == NULL) || (p_advertising == NULL))
000006  b105              CBZ      r5,|L5.10|
000008  b90c              CBNZ     r4,|L5.14|
                  |L5.10|
;;;356        {
;;;357            return NRF_ERROR_NULL;
00000a  200e              MOVS     r0,#0xe
                  |L5.12|
;;;358        }
;;;359    
;;;360        p_advertising->initialized                    = true;
;;;361        p_advertising->adv_mode_current               = BLE_ADV_MODE_IDLE;
;;;362        p_advertising->adv_modes_config               = p_init->config;
;;;363        p_advertising->conn_cfg_tag                   = BLE_CONN_CFG_TAG_DEFAULT;
;;;364        p_advertising->evt_handler                    = p_init->evt_handler;
;;;365        p_advertising->error_handler                  = p_init->error_handler;
;;;366        p_advertising->current_slave_link_conn_handle = BLE_CONN_HANDLE_INVALID;
;;;367    
;;;368        memset(&p_advertising->peer_address, 0, sizeof(p_advertising->peer_address));
;;;369        memset(&p_advertising->advdata,      0, sizeof(p_advertising->advdata));
;;;370    
;;;371        // Copy advertising data.
;;;372        p_advertising->advdata.name_type          = p_init->advdata.name_type;
;;;373        p_advertising->advdata.include_appearance = p_init->advdata.include_appearance;
;;;374        p_advertising->advdata.flags              = p_init->advdata.flags;
;;;375        p_advertising->advdata.short_name_len     = p_init->advdata.short_name_len;
;;;376    
;;;377        p_advertising->advdata.uuids_complete          = p_init->advdata.uuids_complete;
;;;378        p_advertising->advdata.uuids_more_available    = p_init->advdata.uuids_more_available;
;;;379        p_advertising->advdata.uuids_solicited         = p_init->advdata.uuids_solicited;
;;;380        p_advertising->advdata.include_ble_device_addr = p_init->advdata.include_ble_device_addr;
;;;381    
;;;382        if (p_init->advdata.p_manuf_specific_data != NULL)
;;;383        {
;;;384            p_advertising->advdata.p_manuf_specific_data   = &(p_advertising->manuf_specific_data);
;;;385            p_advertising->manuf_specific_data.data.p_data = p_advertising->manuf_data_array;
;;;386            p_advertising->advdata.p_manuf_specific_data->company_identifier =
;;;387                p_init->advdata.p_manuf_specific_data->company_identifier;
;;;388            p_advertising->advdata.p_manuf_specific_data->data.size = p_init->advdata.p_manuf_specific_data->data.size;
;;;389    
;;;390            for (uint32_t i = 0; i < p_advertising->advdata.p_manuf_specific_data->data.size; i++)
;;;391            {
;;;392                p_advertising->manuf_data_array[i] = p_init->advdata.p_manuf_specific_data->data.p_data[i];
;;;393            }
;;;394        }
;;;395    
;;;396        if (p_init->advdata.p_service_data_array != NULL)
;;;397        {
;;;398            p_advertising->service_data.data.p_data                   = p_advertising->service_data_array;
;;;399            p_advertising->advdata.p_service_data_array               = &(p_advertising->service_data);
;;;400            p_advertising->advdata.p_service_data_array->data.p_data  = p_advertising->service_data_array;
;;;401            p_advertising->advdata.p_service_data_array->data.size    = p_init->advdata.p_service_data_array->data.size;
;;;402            p_advertising->advdata.p_service_data_array->service_uuid = p_init->advdata.p_service_data_array->service_uuid;
;;;403    
;;;404            for (uint32_t i = 0; i < p_advertising->advdata.p_service_data_array->data.size; i++)
;;;405            {
;;;406                p_advertising->service_data_array[i] = p_init->advdata.p_service_data_array->data.p_data[i];
;;;407            }
;;;408    
;;;409            p_advertising->advdata.service_data_count = p_init->advdata.service_data_count;
;;;410        }
;;;411    
;;;412        if (p_init->advdata.p_slave_conn_int != NULL)
;;;413        {
;;;414            p_advertising->advdata.p_slave_conn_int                    = &(p_advertising->slave_conn_int);
;;;415            p_advertising->advdata.p_slave_conn_int->max_conn_interval = p_init->advdata.p_slave_conn_int->max_conn_interval;
;;;416            p_advertising->advdata.p_slave_conn_int->min_conn_interval = p_init->advdata.p_slave_conn_int->min_conn_interval;
;;;417        }
;;;418    
;;;419        if (p_init->advdata.p_tx_power_level != NULL)
;;;420        {
;;;421            p_advertising->advdata.p_tx_power_level = p_init->advdata.p_tx_power_level;
;;;422        }
;;;423    
;;;424    #if (NRF_SD_BLE_API_VERSION <= 2)
;;;425            for (int i = 0; i <BLE_GAP_WHITELIST_ADDR_MAX_COUNT ; i++)
;;;426            {
;;;427                p_advertising->whitelist.pp_addrs[i] = &p_advertising->whitelist_addrs[i];
;;;428            }
;;;429    
;;;430            for (int i = 0; i <BLE_GAP_WHITELIST_IRK_MAX_COUNT ; i++)
;;;431            {
;;;432                p_advertising->whitelist.pp_irks[i] = &p_advertising->whitelist_irks[i];
;;;433            }
;;;434    #endif
;;;435        ret = ble_advdata_set(&(p_advertising->advdata), &(p_init->srdata));
;;;436        return ret;
;;;437    }
00000c  bd70              POP      {r4-r6,pc}
                  |L5.14|
00000e  2001              MOVS     r0,#1                 ;360
000010  7020              STRB     r0,[r4,#0]            ;360
000012  2000              MOVS     r0,#0                 ;361
000014  70e0              STRB     r0,[r4,#3]            ;361
000016  2220              MOVS     r2,#0x20              ;362
000018  f1050178          ADD      r1,r5,#0x78           ;362
00001c  1d20              ADDS     r0,r4,#4              ;362
00001e  f7fffffe          BL       __aeabi_memcpy4
000022  2000              MOVS     r0,#0                 ;363
000024  348c              ADDS     r4,r4,#0x8c           ;363
000026  f8040c68          STRB     r0,[r4,#-0x68]        ;363
00002a  f8d50098          LDR      r0,[r5,#0x98]         ;364
00002e  6420              STR      r0,[r4,#0x40]         ;364
000030  f8d5009c          LDR      r0,[r5,#0x9c]         ;365
000034  6460              STR      r0,[r4,#0x44]         ;365
000036  f64f70ff          MOV      r0,#0xffff            ;366
00003a  87a0              STRH     r0,[r4,#0x3c]         ;366
00003c  3c67              SUBS     r4,r4,#0x67           ;366
00003e  2000              MOVS     r0,#0                 ;368
000040  6020              STR      r0,[r4,#0]            ;368
000042  80a0              STRH     r0,[r4,#4]            ;368
000044  71a0              STRB     r0,[r4,#6]            ;368
000046  3c25              SUBS     r4,r4,#0x25           ;368
000048  213c              MOVS     r1,#0x3c              ;369
00004a  f1040030          ADD      r0,r4,#0x30           ;369
00004e  f7fffffe          BL       __aeabi_memclr4
000052  7828              LDRB     r0,[r5,#0]            ;372
000054  f8840030          STRB     r0,[r4,#0x30]         ;372
000058  78a9              LDRB     r1,[r5,#2]            ;373
00005a  2032              MOVS     r0,#0x32              ;373
00005c  5501              STRB     r1,[r0,r4]            ;373
00005e  78e9              LDRB     r1,[r5,#3]            ;374
000060  2033              MOVS     r0,#0x33              ;374
000062  5501              STRB     r1,[r0,r4]            ;374
000064  7869              LDRB     r1,[r5,#1]            ;375
000066  2031              MOVS     r0,#0x31              ;375
000068  5501              STRB     r1,[r0,r4]            ;375
00006a  e9d51204          LDRD     r1,r2,[r5,#0x10]      ;377
00006e  e9c41210          STRD     r1,r2,[r4,#0x40]      ;377
000072  e9d51202          LDRD     r1,r2,[r5,#8]         ;378
000076  e9c4120e          STRD     r1,r2,[r4,#0x38]      ;378
00007a  e9d51206          LDRD     r1,r2,[r5,#0x18]      ;379
00007e  e9c41212          STRD     r1,r2,[r4,#0x48]      ;379
000082  f895102d          LDRB     r1,[r5,#0x2d]         ;380
000086  f884105d          STRB     r1,[r4,#0x5d]         ;380
00008a  6a68              LDR      r0,[r5,#0x24]         ;382
00008c  b1d0              CBZ      r0,|L5.196|
00008e  f104006c          ADD      r0,r4,#0x6c           ;384
000092  6560              STR      r0,[r4,#0x54]         ;384
000094  f1040178          ADD      r1,r4,#0x78           ;385
000098  6761              STR      r1,[r4,#0x74]         ;385
00009a  6a68              LDR      r0,[r5,#0x24]         ;386
00009c  8801              LDRH     r1,[r0,#0]            ;386
00009e  6d60              LDR      r0,[r4,#0x54]         ;386
0000a0  8001              STRH     r1,[r0,#0]            ;386
0000a2  6a68              LDR      r0,[r5,#0x24]         ;388
0000a4  8881              LDRH     r1,[r0,#4]            ;388
0000a6  6d60              LDR      r0,[r4,#0x54]         ;388
0000a8  8081              STRH     r1,[r0,#4]            ;388
0000aa  2000              MOVS     r0,#0                 ;390
0000ac  e006              B        |L5.188|
                  |L5.174|
0000ae  6a69              LDR      r1,[r5,#0x24]         ;392
0000b0  6889              LDR      r1,[r1,#8]            ;392
0000b2  5c0a              LDRB     r2,[r1,r0]            ;392
0000b4  f1040178          ADD      r1,r4,#0x78           ;392
0000b8  540a              STRB     r2,[r1,r0]            ;392
0000ba  1c40              ADDS     r0,r0,#1              ;390
                  |L5.188|
0000bc  6d61              LDR      r1,[r4,#0x54]         ;390
0000be  8889              LDRH     r1,[r1,#4]            ;390
0000c0  4281              CMP      r1,r0                 ;390
0000c2  d8f4              BHI      |L5.174|
                  |L5.196|
0000c4  6aa8              LDR      r0,[r5,#0x28]         ;396
0000c6  b310              CBZ      r0,|L5.270|
0000c8  f10401a4          ADD      r1,r4,#0xa4           ;398
0000cc  f8c410a0          STR      r1,[r4,#0xa0]         ;398
0000d0  f1040098          ADD      r0,r4,#0x98           ;399
0000d4  65a0              STR      r0,[r4,#0x58]         ;399
0000d6  300c              ADDS     r0,r0,#0xc            ;400
0000d8  6da1              LDR      r1,[r4,#0x58]         ;400
0000da  6088              STR      r0,[r1,#8]            ;400
0000dc  6aa8              LDR      r0,[r5,#0x28]         ;401
0000de  8881              LDRH     r1,[r0,#4]            ;401
0000e0  6da0              LDR      r0,[r4,#0x58]         ;401
0000e2  8081              STRH     r1,[r0,#4]            ;401
0000e4  6aa8              LDR      r0,[r5,#0x28]         ;402
0000e6  8801              LDRH     r1,[r0,#0]            ;402
0000e8  6da0              LDR      r0,[r4,#0x58]         ;402
0000ea  8001              STRH     r1,[r0,#0]            ;402
0000ec  2000              MOVS     r0,#0                 ;404
0000ee  e006              B        |L5.254|
                  |L5.240|
0000f0  6aa9              LDR      r1,[r5,#0x28]         ;406
0000f2  6889              LDR      r1,[r1,#8]            ;406
0000f4  5c0a              LDRB     r2,[r1,r0]            ;406
0000f6  f10401a4          ADD      r1,r4,#0xa4           ;406
0000fa  540a              STRB     r2,[r1,r0]            ;406
0000fc  1c40              ADDS     r0,r0,#1              ;404
                  |L5.254|
0000fe  6da1              LDR      r1,[r4,#0x58]         ;404
000100  8889              LDRH     r1,[r1,#4]            ;404
000102  4281              CMP      r1,r0                 ;404
000104  d8f4              BHI      |L5.240|
000106  f895102c          LDRB     r1,[r5,#0x2c]         ;409
00010a  f884105c          STRB     r1,[r4,#0x5c]         ;409
                  |L5.270|
00010e  6a28              LDR      r0,[r5,#0x20]         ;412
000110  b150              CBZ      r0,|L5.296|
000112  f10400c4          ADD      r0,r4,#0xc4           ;414
000116  6520              STR      r0,[r4,#0x50]         ;414
000118  6a28              LDR      r0,[r5,#0x20]         ;415
00011a  8841              LDRH     r1,[r0,#2]            ;415
00011c  6d20              LDR      r0,[r4,#0x50]         ;415
00011e  8041              STRH     r1,[r0,#2]            ;415
000120  6a28              LDR      r0,[r5,#0x20]         ;416
000122  8801              LDRH     r1,[r0,#0]            ;416
000124  6d20              LDR      r0,[r4,#0x50]         ;416
000126  8001              STRH     r1,[r0,#0]            ;416
                  |L5.296|
000128  6868              LDR      r0,[r5,#4]            ;419
00012a  b108              CBZ      r0,|L5.304|
00012c  6869              LDR      r1,[r5,#4]            ;421
00012e  6361              STR      r1,[r4,#0x34]         ;421
                  |L5.304|
000130  f105013c          ADD      r1,r5,#0x3c           ;435
000134  f1040030          ADD      r0,r4,#0x30           ;435
000138  f7fffffe          BL       ble_advdata_set
00013c  4606              MOV      r6,r0                 ;435
00013e  4630              MOV      r0,r6                 ;436
000140  e764              B        |L5.12|
;;;438    
                          ENDP


                          AREA ||i.ble_advertising_modes_config_set||, CODE, READONLY, ALIGN=1

                  ble_advertising_modes_config_set PROC
;;;687    
;;;688    void ble_advertising_modes_config_set(ble_advertising_t            * const p_advertising,
000000  b570              PUSH     {r4-r6,lr}
;;;689                                          ble_adv_modes_config_t const * const p_adv_modes_config)
;;;690    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;691        p_advertising->adv_modes_config = *p_adv_modes_config;
000006  2220              MOVS     r2,#0x20
000008  4629              MOV      r1,r5
00000a  1d20              ADDS     r0,r4,#4
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;692    }
000010  bd70              POP      {r4-r6,pc}
;;;693    
                          ENDP


                          AREA ||i.ble_advertising_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_advertising_on_ble_evt PROC
;;;547    
;;;548    void ble_advertising_on_ble_evt(ble_evt_t const * p_ble_evt, void * p_context)
000000  b570              PUSH     {r4-r6,lr}
;;;549    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;550        ble_advertising_t * p_advertising = (ble_advertising_t *)p_context;
000006  462e              MOV      r6,r5
;;;551    
;;;552        switch (p_ble_evt->header.evt_id)
000008  8820              LDRH     r0,[r4,#0]
00000a  2810              CMP      r0,#0x10
00000c  d004              BEQ      |L7.24|
00000e  2811              CMP      r0,#0x11
000010  d007              BEQ      |L7.34|
000012  281b              CMP      r0,#0x1b
000014  d10f              BNE      |L7.54|
000016  e009              B        |L7.44|
                  |L7.24|
;;;553        {
;;;554            case BLE_GAP_EVT_CONNECTED:
;;;555                on_connected(p_advertising, p_ble_evt);
000018  4621              MOV      r1,r4
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       on_connected
;;;556                break;
000020  e00a              B        |L7.56|
                  |L7.34|
;;;557    
;;;558            // Upon disconnection, whitelist will be activated and direct advertising is started.
;;;559            case BLE_GAP_EVT_DISCONNECTED:
;;;560                on_disconnected(p_advertising, p_ble_evt);
000022  4621              MOV      r1,r4
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       on_disconnected
;;;561                break;
00002a  e005              B        |L7.56|
                  |L7.44|
;;;562    
;;;563            // Upon time-out, the next advertising mode is started.
;;;564            case BLE_GAP_EVT_TIMEOUT:
;;;565                on_timeout(p_advertising, p_ble_evt);
00002c  4621              MOV      r1,r4
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       on_timeout
;;;566                break;
000034  e000              B        |L7.56|
                  |L7.54|
;;;567    
;;;568            default:
;;;569                break;
000036  bf00              NOP      
                  |L7.56|
000038  bf00              NOP                            ;556
;;;570        }
;;;571    }
00003a  bd70              POP      {r4-r6,pc}
;;;572    
                          ENDP


                          AREA ||i.ble_advertising_on_sys_evt||, CODE, READONLY, ALIGN=1

                  ble_advertising_on_sys_evt PROC
;;;573    
;;;574    void ble_advertising_on_sys_evt(uint32_t evt_id, void * p_context)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;575    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;576        ble_advertising_t * p_advertising = (ble_advertising_t *)p_context;
000008  4634              MOV      r4,r6
;;;577    
;;;578        switch (evt_id)
00000a  2d02              CMP      r5,#2
00000c  d002              BEQ      |L8.20|
00000e  2d03              CMP      r5,#3
000010  d114              BNE      |L8.60|
000012  e000              B        |L8.22|
                  |L8.20|
;;;579        {
;;;580            //When a flash operation finishes, re-attempt to start advertising operations.
;;;581            case NRF_EVT_FLASH_OPERATION_SUCCESS:
;;;582            case NRF_EVT_FLASH_OPERATION_ERROR:
000014  bf00              NOP      
                  |L8.22|
;;;583            {
;;;584                if (p_advertising->advertising_start_pending)
000016  7860              LDRB     r0,[r4,#1]
000018  b178              CBZ      r0,|L8.58|
;;;585                {
;;;586                    p_advertising->advertising_start_pending = false;
00001a  2000              MOVS     r0,#0
00001c  7060              STRB     r0,[r4,#1]
;;;587                    ret_code_t ret = ble_advertising_start(p_advertising,
00001e  78e1              LDRB     r1,[r4,#3]
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       ble_advertising_start
000026  4607              MOV      r7,r0
;;;588                                                           p_advertising->adv_mode_current);
;;;589    
;;;590                    if ((ret != NRF_SUCCESS) && (p_advertising->error_handler != NULL))
000028  b137              CBZ      r7,|L8.56|
00002a  f8d400d0          LDR      r0,[r4,#0xd0]
00002e  b118              CBZ      r0,|L8.56|
;;;591                    {
;;;592                        p_advertising->error_handler(ret);
000030  4638              MOV      r0,r7
000032  f8d410d0          LDR      r1,[r4,#0xd0]
000036  4788              BLX      r1
                  |L8.56|
;;;593                    }
;;;594                }
000038  bf00              NOP      
                  |L8.58|
;;;595            } break;
00003a  e000              B        |L8.62|
                  |L8.60|
;;;596    
;;;597            default:
;;;598                // No implementation needed.
;;;599                break;
00003c  bf00              NOP      
                  |L8.62|
00003e  bf00              NOP                            ;595
;;;600        }
;;;601    }
000040  e8bd81f0          POP      {r4-r8,pc}
;;;602    
                          ENDP


                          AREA ||i.ble_advertising_peer_addr_reply||, CODE, READONLY, ALIGN=1

                  ble_advertising_peer_addr_reply PROC
;;;603    
;;;604    uint32_t ble_advertising_peer_addr_reply(ble_advertising_t * const p_advertising,
000000  4602              MOV      r2,r0
;;;605                                             ble_gap_addr_t          * p_peer_address)
;;;606    {
;;;607        if (!p_advertising->peer_addr_reply_expected)
000002  f892002c          LDRB     r0,[r2,#0x2c]
000006  b908              CBNZ     r0,|L9.12|
;;;608        {
;;;609            return NRF_ERROR_INVALID_STATE;
000008  2008              MOVS     r0,#8
                  |L9.10|
;;;610        }
;;;611    
;;;612        p_advertising->peer_addr_reply_expected = false;
;;;613    
;;;614        memcpy(&p_advertising->peer_address, p_peer_address, sizeof(p_advertising->peer_address));
;;;615    
;;;616        return NRF_SUCCESS;
;;;617    }
00000a  4770              BX       lr
                  |L9.12|
00000c  2000              MOVS     r0,#0                 ;612
00000e  3225              ADDS     r2,r2,#0x25           ;612
000010  71d0              STRB     r0,[r2,#7]            ;612
000012  6808              LDR      r0,[r1,#0]            ;614
000014  6010              STR      r0,[r2,#0]            ;614
000016  8888              LDRH     r0,[r1,#4]            ;614
000018  8090              STRH     r0,[r2,#4]            ;614
00001a  7988              LDRB     r0,[r1,#6]            ;614
00001c  7190              STRB     r0,[r2,#6]            ;614
00001e  3a25              SUBS     r2,r2,#0x25           ;614
000020  2000              MOVS     r0,#0                 ;616
000022  e7f2              B        |L9.10|
;;;618    
                          ENDP


                          AREA ||i.ble_advertising_restart_without_whitelist||, CODE, READONLY, ALIGN=1

                  ble_advertising_restart_without_whitelist PROC
;;;657    
;;;658    uint32_t ble_advertising_restart_without_whitelist(ble_advertising_t * const p_advertising)
000000  b570              PUSH     {r4-r6,lr}
;;;659    {
000002  4604              MOV      r4,r0
;;;660        uint32_t ret;
;;;661    
;;;662        (void) sd_ble_gap_adv_stop();
000004  df74              SVC      #0x74
;;;663    
;;;664        p_advertising->whitelist_temporarily_disabled = true;
000006  2001              MOVS     r0,#1
000008  f88400d4          STRB     r0,[r4,#0xd4]
;;;665    
;;;666        #if (NRF_SD_BLE_API_VERSION >= 3)
;;;667            p_advertising->whitelist_in_use = false;
00000c  2000              MOVS     r0,#0
00000e  f88400d6          STRB     r0,[r4,#0xd6]
;;;668        #endif
;;;669    
;;;670        p_advertising->advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
000012  2106              MOVS     r1,#6
000014  2033              MOVS     r0,#0x33
000016  5501              STRB     r1,[r0,r4]
;;;671    
;;;672        ret = ble_advdata_set(&(p_advertising->advdata), NULL);
000018  2100              MOVS     r1,#0
00001a  f1040030          ADD      r0,r4,#0x30
00001e  f7fffffe          BL       ble_advdata_set
000022  4605              MOV      r5,r0
;;;673        if (ret != NRF_SUCCESS)
000024  b10d              CBZ      r5,|L10.42|
;;;674        {
;;;675            return ret;
000026  4628              MOV      r0,r5
                  |L10.40|
;;;676        }
;;;677    
;;;678        ret = ble_advertising_start(p_advertising, p_advertising->adv_mode_current);
;;;679        if ((ret != NRF_SUCCESS) && (p_advertising->error_handler != NULL))
;;;680        {
;;;681            p_advertising->error_handler(ret);
;;;682        }
;;;683    
;;;684        return NRF_SUCCESS;
;;;685    }
000028  bd70              POP      {r4-r6,pc}
                  |L10.42|
00002a  78e1              LDRB     r1,[r4,#3]            ;678
00002c  4620              MOV      r0,r4                 ;678
00002e  f7fffffe          BL       ble_advertising_start
000032  4605              MOV      r5,r0                 ;678
000034  b135              CBZ      r5,|L10.68|
000036  f8d400d0          LDR      r0,[r4,#0xd0]         ;679
00003a  b118              CBZ      r0,|L10.68|
00003c  4628              MOV      r0,r5                 ;681
00003e  f8d410d0          LDR      r1,[r4,#0xd0]         ;681
000042  4788              BLX      r1                    ;681
                  |L10.68|
000044  2000              MOVS     r0,#0                 ;684
000046  e7ef              B        |L10.40|
;;;686    
                          ENDP


                          AREA ||i.ble_advertising_start||, CODE, READONLY, ALIGN=1

                  ble_advertising_start PROC
;;;439    
;;;440    uint32_t ble_advertising_start(ble_advertising_t * const p_advertising,
000000  b57f              PUSH     {r0-r6,lr}
;;;441                                   ble_adv_mode_t            advertising_mode)
;;;442    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;443        uint32_t             ret;
;;;444        ble_gap_adv_params_t adv_params;
;;;445    
;;;446        if (p_advertising->initialized == false)
000006  7820              LDRB     r0,[r4,#0]
000008  b910              CBNZ     r0,|L11.16|
;;;447        {
;;;448            return NRF_ERROR_INVALID_STATE;
00000a  2008              MOVS     r0,#8
                  |L11.12|
;;;449        }
;;;450    
;;;451        p_advertising->adv_mode_current = advertising_mode;
;;;452    
;;;453        // Delay starting advertising until the flash operations are complete.
;;;454        if (flash_access_in_progress())
;;;455        {
;;;456            p_advertising->advertising_start_pending = true;
;;;457            return NRF_SUCCESS;
;;;458        }
;;;459    
;;;460       memset(&p_advertising->peer_address, 0, sizeof(p_advertising->peer_address));
;;;461    
;;;462        if (  ((p_advertising->adv_modes_config.ble_adv_directed_enabled)      && (p_advertising->adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;463            ||((p_advertising->adv_modes_config.ble_adv_directed_slow_enabled) && (p_advertising->adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;464            ||((p_advertising->adv_modes_config.ble_adv_directed_slow_enabled) && (p_advertising->adv_mode_current == BLE_ADV_MODE_DIRECTED_SLOW))
;;;465           )
;;;466        {
;;;467            if (p_advertising->evt_handler != NULL)
;;;468            {
;;;469                p_advertising->peer_addr_reply_expected = true;
;;;470                p_advertising->evt_handler(BLE_ADV_EVT_PEER_ADDR_REQUEST);
;;;471            }
;;;472            else
;;;473            {
;;;474                p_advertising->peer_addr_reply_expected = false;
;;;475            }
;;;476        }
;;;477    
;;;478        p_advertising->adv_mode_current = adv_mode_next_avail_get(p_advertising, advertising_mode);
;;;479    
;;;480        // Fetch the whitelist.
;;;481        if ((p_advertising->evt_handler != NULL) &&
;;;482            (p_advertising->adv_mode_current == BLE_ADV_MODE_FAST || p_advertising->adv_mode_current == BLE_ADV_MODE_SLOW) &&
;;;483            (p_advertising->adv_modes_config.ble_adv_whitelist_enabled) &&
;;;484            (!p_advertising->whitelist_temporarily_disabled))
;;;485        {
;;;486            #if (NRF_SD_BLE_API_VERSION >= 3)
;;;487                p_advertising->whitelist_in_use = false;
;;;488            #endif
;;;489            p_advertising->whitelist_reply_expected = true;
;;;490            p_advertising->evt_handler(BLE_ADV_EVT_WHITELIST_REQUEST);
;;;491        }
;;;492        else
;;;493        {
;;;494            p_advertising->whitelist_reply_expected = false;
;;;495        }
;;;496    
;;;497        // Initialize advertising parameters with default values.
;;;498        memset(&adv_params, 0, sizeof(adv_params));
;;;499    
;;;500        adv_params.type = BLE_GAP_ADV_TYPE_ADV_IND;
;;;501        adv_params.fp   = BLE_GAP_ADV_FP_ANY;
;;;502    
;;;503        // Set advertising parameters and events according to selected advertising mode.
;;;504        switch (p_advertising->adv_mode_current)
;;;505        {
;;;506            case BLE_ADV_MODE_DIRECTED:
;;;507                ret = set_adv_mode_directed(p_advertising, &adv_params);
;;;508                break;
;;;509    
;;;510            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;511                ret = set_adv_mode_directed_slow(p_advertising, &adv_params);
;;;512                break;
;;;513    
;;;514            case BLE_ADV_MODE_FAST:
;;;515                ret = set_adv_mode_fast(p_advertising, &adv_params);
;;;516                break;
;;;517    
;;;518            case BLE_ADV_MODE_SLOW:
;;;519                ret = set_adv_mode_slow(p_advertising, &adv_params);
;;;520                break;
;;;521    
;;;522            case BLE_ADV_MODE_IDLE:
;;;523                p_advertising->adv_evt = BLE_ADV_EVT_IDLE;
;;;524                break;
;;;525    
;;;526            default:
;;;527                break;
;;;528        }
;;;529    
;;;530        if (p_advertising->adv_mode_current != BLE_ADV_MODE_IDLE)
;;;531        {
;;;532            ret = sd_ble_gap_adv_start(&adv_params, p_advertising->conn_cfg_tag);
;;;533            if (ret != NRF_SUCCESS)
;;;534            {
;;;535                return ret;
;;;536            }
;;;537        }
;;;538    
;;;539        if (p_advertising->evt_handler != NULL)
;;;540        {
;;;541            p_advertising->evt_handler(p_advertising->adv_evt);
;;;542        }
;;;543    
;;;544        return NRF_SUCCESS;
;;;545    }
00000c  b004              ADD      sp,sp,#0x10
00000e  bd70              POP      {r4-r6,pc}
                  |L11.16|
000010  70e6              STRB     r6,[r4,#3]            ;451
000012  f7fffffe          BL       flash_access_in_progress
000016  b118              CBZ      r0,|L11.32|
000018  2001              MOVS     r0,#1                 ;456
00001a  7060              STRB     r0,[r4,#1]            ;456
00001c  2000              MOVS     r0,#0                 ;457
00001e  e7f5              B        |L11.12|
                  |L11.32|
000020  2000              MOVS     r0,#0                 ;460
000022  f8440f25          STR      r0,[r4,#0x25]!        ;460
000026  80a0              STRH     r0,[r4,#4]            ;460
000028  71a0              STRB     r0,[r4,#6]            ;460
00002a  3c25              SUBS     r4,r4,#0x25           ;460
00002c  79a0              LDRB     r0,[r4,#6]            ;462
00002e  b110              CBZ      r0,|L11.54|
000030  78e0              LDRB     r0,[r4,#3]            ;462
000032  2801              CMP      r0,#1                 ;462
000034  d009              BEQ      |L11.74|
                  |L11.54|
000036  79e0              LDRB     r0,[r4,#7]            ;463
000038  b110              CBZ      r0,|L11.64|
00003a  78e0              LDRB     r0,[r4,#3]            ;463
00003c  2801              CMP      r0,#1                 ;463
00003e  d004              BEQ      |L11.74|
                  |L11.64|
000040  79e0              LDRB     r0,[r4,#7]            ;464
000042  b180              CBZ      r0,|L11.102|
000044  78e0              LDRB     r0,[r4,#3]            ;464
000046  2802              CMP      r0,#2                 ;464
000048  d10d              BNE      |L11.102|
                  |L11.74|
00004a  f8d400cc          LDR      r0,[r4,#0xcc]         ;467
00004e  b138              CBZ      r0,|L11.96|
000050  2001              MOVS     r0,#1                 ;469
000052  f884002c          STRB     r0,[r4,#0x2c]         ;469
000056  2008              MOVS     r0,#8                 ;470
000058  f8d410cc          LDR      r1,[r4,#0xcc]         ;470
00005c  4788              BLX      r1                    ;470
00005e  e002              B        |L11.102|
                  |L11.96|
000060  2000              MOVS     r0,#0                 ;474
000062  f884002c          STRB     r0,[r4,#0x2c]         ;474
                  |L11.102|
000066  4631              MOV      r1,r6                 ;478
000068  4620              MOV      r0,r4                 ;478
00006a  f7fffffe          BL       adv_mode_next_avail_get
00006e  70e0              STRB     r0,[r4,#3]            ;478
000070  f8d400cc          LDR      r0,[r4,#0xcc]         ;481
000074  b1a0              CBZ      r0,|L11.160|
000076  78e0              LDRB     r0,[r4,#3]            ;482
000078  2803              CMP      r0,#3                 ;482
00007a  d002              BEQ      |L11.130|
00007c  78e0              LDRB     r0,[r4,#3]            ;482
00007e  2804              CMP      r0,#4                 ;482
000080  d10e              BNE      |L11.160|
                  |L11.130|
000082  7960              LDRB     r0,[r4,#5]            ;483
000084  b160              CBZ      r0,|L11.160|
000086  f89400d4          LDRB     r0,[r4,#0xd4]         ;484
00008a  b948              CBNZ     r0,|L11.160|
00008c  2000              MOVS     r0,#0                 ;487
00008e  34cc              ADDS     r4,r4,#0xcc           ;487
000090  72a0              STRB     r0,[r4,#0xa]          ;487
000092  2001              MOVS     r0,#1                 ;489
000094  7260              STRB     r0,[r4,#9]            ;489
000096  f85419cc          LDR      r1,[r4],#-0xcc        ;490
00009a  2007              MOVS     r0,#7                 ;490
00009c  4788              BLX      r1                    ;490
00009e  e002              B        |L11.166|
                  |L11.160|
0000a0  2000              MOVS     r0,#0                 ;494
0000a2  f88400d5          STRB     r0,[r4,#0xd5]         ;494
                  |L11.166|
0000a6  2000              MOVS     r0,#0                 ;498
0000a8  9000              STR      r0,[sp,#0]            ;498
0000aa  9001              STR      r0,[sp,#4]            ;498
0000ac  9002              STR      r0,[sp,#8]            ;498
0000ae  9003              STR      r0,[sp,#0xc]          ;498
0000b0  f88d0000          STRB     r0,[sp,#0]            ;500
0000b4  f88d0008          STRB     r0,[sp,#8]            ;501
0000b8  78e0              LDRB     r0,[r4,#3]            ;504
0000ba  2805              CMP      r0,#5                 ;504
0000bc  d21f              BCS      |L11.254|
0000be  e8dff000          TBB      [pc,r0]               ;504
0000c2  1b03              DCB      0x1b,0x03
0000c4  090f1500          DCB      0x09,0x0f,0x15,0x00
0000c8  4669              MOV      r1,sp                 ;507
0000ca  4620              MOV      r0,r4                 ;507
0000cc  f7fffffe          BL       set_adv_mode_directed
0000d0  4605              MOV      r5,r0                 ;507
0000d2  e015              B        |L11.256|
0000d4  4669              MOV      r1,sp                 ;511
0000d6  4620              MOV      r0,r4                 ;511
0000d8  f7fffffe          BL       set_adv_mode_directed_slow
0000dc  4605              MOV      r5,r0                 ;511
0000de  e00f              B        |L11.256|
0000e0  4669              MOV      r1,sp                 ;515
0000e2  4620              MOV      r0,r4                 ;515
0000e4  f7fffffe          BL       set_adv_mode_fast
0000e8  4605              MOV      r5,r0                 ;515
0000ea  e009              B        |L11.256|
0000ec  4669              MOV      r1,sp                 ;519
0000ee  4620              MOV      r0,r4                 ;519
0000f0  f7fffffe          BL       set_adv_mode_slow
0000f4  4605              MOV      r5,r0                 ;519
0000f6  e003              B        |L11.256|
0000f8  2000              MOVS     r0,#0                 ;523
0000fa  70a0              STRB     r0,[r4,#2]            ;523
0000fc  e000              B        |L11.256|
                  |L11.254|
0000fe  bf00              NOP                            ;527
                  |L11.256|
000100  bf00              NOP                            ;508
000102  78e0              LDRB     r0,[r4,#3]            ;530
000104  b138              CBZ      r0,|L11.278|
000106  f8941024          LDRB     r1,[r4,#0x24]         ;532
00010a  4668              MOV      r0,sp                 ;532
00010c  df73              SVC      #0x73                 ;532
00010e  4605              MOV      r5,r0                 ;532
000110  b10d              CBZ      r5,|L11.278|
000112  4628              MOV      r0,r5                 ;535
000114  e77a              B        |L11.12|
                  |L11.278|
000116  f8d400cc          LDR      r0,[r4,#0xcc]         ;539
00011a  b118              CBZ      r0,|L11.292|
00011c  78a0              LDRB     r0,[r4,#2]            ;541
00011e  f8d410cc          LDR      r1,[r4,#0xcc]         ;541
000122  4788              BLX      r1                    ;541
                  |L11.292|
000124  2000              MOVS     r0,#0                 ;544
000126  e771              B        |L11.12|
;;;546    
                          ENDP


                          AREA ||i.ble_advertising_whitelist_reply||, CODE, READONLY, ALIGN=1

                  ble_advertising_whitelist_reply PROC
;;;619    
;;;620    uint32_t ble_advertising_whitelist_reply(ble_advertising_t * const p_advertising,
000000  b530              PUSH     {r4,r5,lr}
;;;621                                             ble_gap_addr_t    const * p_gap_addrs,
;;;622                                             uint32_t               addr_cnt,
;;;623                                             ble_gap_irk_t  const * p_gap_irks,
;;;624                                             uint32_t               irk_cnt)
;;;625    {
000002  4604              MOV      r4,r0
000004  9d03              LDR      r5,[sp,#0xc]
;;;626        if (!p_advertising->whitelist_reply_expected)
000006  f89400d5          LDRB     r0,[r4,#0xd5]
00000a  b908              CBNZ     r0,|L12.16|
;;;627        {
;;;628            return NRF_ERROR_INVALID_STATE;
00000c  2008              MOVS     r0,#8
                  |L12.14|
;;;629        }
;;;630    
;;;631        p_advertising->whitelist_reply_expected = false;
;;;632    
;;;633        #if (NRF_SD_BLE_API_VERSION <= 2)
;;;634    
;;;635            p_advertising->whitelist.addr_count = addr_cnt;
;;;636            p_advertising->whitelist.irk_count  = irk_cnt;
;;;637    
;;;638            for (uint32_t i = 0; i < addr_cnt; i++)
;;;639            {
;;;640                *p_advertising->whitelist.pp_addrs[i] = p_gap_addrs[i];
;;;641            }
;;;642    
;;;643            for (uint32_t i = 0; i < irk_cnt; i++)
;;;644            {
;;;645                *p_advertising->whitelist.pp_irks[i] = p_gap_irks[i];
;;;646            }
;;;647    
;;;648        #else
;;;649    
;;;650            p_advertising->whitelist_in_use = ((addr_cnt > 0) || (irk_cnt > 0));
;;;651    
;;;652        #endif
;;;653    
;;;654        return NRF_SUCCESS;
;;;655    }
00000e  bd30              POP      {r4,r5,pc}
                  |L12.16|
000010  2000              MOVS     r0,#0                 ;631
000012  f88400d5          STRB     r0,[r4,#0xd5]         ;631
000016  b902              CBNZ     r2,|L12.26|
000018  b10d              CBZ      r5,|L12.30|
                  |L12.26|
00001a  2001              MOVS     r0,#1                 ;650
00001c  e000              B        |L12.32|
                  |L12.30|
00001e  2000              MOVS     r0,#0                 ;650
                  |L12.32|
000020  f88400d6          STRB     r0,[r4,#0xd6]         ;650
000024  2000              MOVS     r0,#0                 ;654
000026  e7f2              B        |L12.14|
;;;656    
                          ENDP


                          AREA ||i.flash_access_in_progress||, CODE, READONLY, ALIGN=1

                  flash_access_in_progress PROC
;;;157     */
;;;158    static bool flash_access_in_progress()
000000  b510              PUSH     {r4,lr}
;;;159    {
;;;160        return nrf_fstorage_is_busy(NULL);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       nrf_fstorage_is_busy
;;;161    }
000008  bd10              POP      {r4,pc}
;;;162    
                          ENDP


                          AREA ||i.on_connected||, CODE, READONLY, ALIGN=1

                  on_connected PROC
;;;96      */
;;;97     static void on_connected(ble_advertising_t * const p_advertising, ble_evt_t const * p_ble_evt)
000000  7bca              LDRB     r2,[r1,#0xf]
;;;98     {
;;;99         if (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_PERIPH)
000002  2a01              CMP      r2,#1
000004  d102              BNE      |L14.12|
;;;100        {
;;;101            p_advertising->current_slave_link_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000006  888a              LDRH     r2,[r1,#4]
000008  f8a020c8          STRH     r2,[r0,#0xc8]
                  |L14.12|
;;;102        }
;;;103    }
00000c  4770              BX       lr
;;;104    
                          ENDP


                          AREA ||i.on_disconnected||, CODE, READONLY, ALIGN=1

                  on_disconnected PROC
;;;110     */
;;;111    static void on_disconnected(ble_advertising_t * const p_advertising, ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;113        uint32_t ret;
;;;114    
;;;115        p_advertising->whitelist_temporarily_disabled = false;
000006  2000              MOVS     r0,#0
000008  f88400d4          STRB     r0,[r4,#0xd4]
;;;116    
;;;117        if (p_ble_evt->evt.gap_evt.conn_handle == p_advertising->current_slave_link_conn_handle &&
00000c  88b0              LDRH     r0,[r6,#4]
00000e  f8b410c8          LDRH     r1,[r4,#0xc8]
000012  4288              CMP      r0,r1
000014  d10e              BNE      |L15.52|
;;;118            p_advertising->adv_modes_config.ble_adv_on_disconnect_disabled == false)
000016  7920              LDRB     r0,[r4,#4]
000018  b960              CBNZ     r0,|L15.52|
;;;119        {
;;;120           ret = ble_advertising_start(p_advertising, BLE_ADV_MODE_DIRECTED);
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       ble_advertising_start
000022  4605              MOV      r5,r0
;;;121           if ((ret != NRF_SUCCESS) && (p_advertising->error_handler != NULL))
000024  b135              CBZ      r5,|L15.52|
000026  f8d400d0          LDR      r0,[r4,#0xd0]
00002a  b118              CBZ      r0,|L15.52|
;;;122           {
;;;123               p_advertising->error_handler(ret);
00002c  4628              MOV      r0,r5
00002e  f8d410d0          LDR      r1,[r4,#0xd0]
000032  4788              BLX      r1
                  |L15.52|
;;;124           }
;;;125        }
;;;126    }
000034  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP


                          AREA ||i.on_timeout||, CODE, READONLY, ALIGN=1

                  on_timeout PROC
;;;133     */
;;;134    static void on_timeout(ble_advertising_t * const p_advertising, ble_evt_t const * p_ble_evt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;135    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;136        ret_code_t ret;
;;;137    
;;;138        if (p_ble_evt->evt.gap_evt.params.timeout.src != BLE_GAP_TIMEOUT_SRC_ADVERTISING)
000008  7a30              LDRB     r0,[r6,#8]
00000a  b108              CBZ      r0,|L16.16|
                  |L16.12|
;;;139        {
;;;140            // Nothing to do.
;;;141            return;
;;;142        }
;;;143    
;;;144        // Start advertising in the next mode.
;;;145        ret = ble_advertising_start(p_advertising, adv_mode_next_get(p_advertising->adv_mode_current));
;;;146    
;;;147        if ((ret != NRF_SUCCESS) && (p_advertising->error_handler != NULL))
;;;148        {
;;;149            p_advertising->error_handler(ret);
;;;150        }
;;;151    }
00000c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.16|
000010  78e0              LDRB     r0,[r4,#3]            ;145
000012  f7fffffe          BL       adv_mode_next_get
000016  4607              MOV      r7,r0                 ;145
000018  4639              MOV      r1,r7                 ;145
00001a  4620              MOV      r0,r4                 ;145
00001c  f7fffffe          BL       ble_advertising_start
000020  4605              MOV      r5,r0                 ;145
000022  b135              CBZ      r5,|L16.50|
000024  f8d400d0          LDR      r0,[r4,#0xd0]         ;147
000028  b118              CBZ      r0,|L16.50|
00002a  4628              MOV      r0,r5                 ;149
00002c  f8d410d0          LDR      r1,[r4,#0xd0]         ;149
000030  4788              BLX      r1                    ;149
                  |L16.50|
000032  bf00              NOP      
000034  e7ea              B        |L16.12|
;;;152    
                          ENDP


                          AREA ||i.set_adv_mode_directed||, CODE, READONLY, ALIGN=1

                  set_adv_mode_directed PROC
;;;220     */
;;;221    static ret_code_t set_adv_mode_directed(ble_advertising_t * const p_advertising,
000000  4602              MOV      r2,r0
;;;222                                            ble_gap_adv_params_t    * p_adv_params)
;;;223    {
;;;224        p_advertising->adv_evt  = BLE_ADV_EVT_DIRECTED;
000002  2001              MOVS     r0,#1
000004  7090              STRB     r0,[r2,#2]
;;;225    
;;;226        p_adv_params->p_peer_addr = &(p_advertising->peer_address);
000006  f1020025          ADD      r0,r2,#0x25
00000a  6048              STR      r0,[r1,#4]
;;;227        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;228        p_adv_params->timeout     = 0;
000010  2000              MOVS     r0,#0
000012  8188              STRH     r0,[r1,#0xc]
;;;229        p_adv_params->interval    = 0;
000014  8148              STRH     r0,[r1,#0xa]
;;;230    
;;;231        return NRF_SUCCESS;
;;;232    }
000016  4770              BX       lr
;;;233    
                          ENDP


                          AREA ||i.set_adv_mode_directed_slow||, CODE, READONLY, ALIGN=1

                  set_adv_mode_directed_slow PROC
;;;241     */
;;;242    static ret_code_t set_adv_mode_directed_slow(ble_advertising_t * const p_advertising,
000000  4602              MOV      r2,r0
;;;243                                                 ble_gap_adv_params_t    * p_adv_params)
;;;244    {
;;;245        p_advertising->adv_evt = BLE_ADV_EVT_DIRECTED_SLOW;
000002  2002              MOVS     r0,#2
000004  7090              STRB     r0,[r2,#2]
;;;246    
;;;247        p_adv_params->p_peer_addr = &p_advertising->peer_address;
000006  f1020025          ADD      r0,r2,#0x25
00000a  6048              STR      r0,[r1,#4]
;;;248        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;249        p_adv_params->timeout     = p_advertising->adv_modes_config.ble_adv_directed_slow_timeout;
000010  8a10              LDRH     r0,[r2,#0x10]
000012  8188              STRH     r0,[r1,#0xc]
;;;250        p_adv_params->interval    = p_advertising->adv_modes_config.ble_adv_directed_slow_interval;
000014  8990              LDRH     r0,[r2,#0xc]
000016  8148              STRH     r0,[r1,#0xa]
;;;251    
;;;252        return NRF_SUCCESS;
000018  2000              MOVS     r0,#0
;;;253    }
00001a  4770              BX       lr
;;;254    
                          ENDP


                          AREA ||i.set_adv_mode_fast||, CODE, READONLY, ALIGN=1

                  set_adv_mode_fast PROC
;;;262     */
;;;263    static ret_code_t set_adv_mode_fast(ble_advertising_t * const p_advertising,
000000  b570              PUSH     {r4-r6,lr}
;;;264                                        ble_gap_adv_params_t    * p_adv_params)
;;;265    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;266        ret_code_t ret;
;;;267    
;;;268        p_adv_params->interval = p_advertising->adv_modes_config.ble_adv_fast_interval;
000006  8aa0              LDRH     r0,[r4,#0x14]
000008  8168              STRH     r0,[r5,#0xa]
;;;269        p_adv_params->timeout  = p_advertising->adv_modes_config.ble_adv_fast_timeout;
00000a  8b20              LDRH     r0,[r4,#0x18]
00000c  81a8              STRH     r0,[r5,#0xc]
;;;270    
;;;271        if ((p_advertising->adv_modes_config.ble_adv_whitelist_enabled) &&
00000e  7960              LDRB     r0,[r4,#5]
000010  b1b8              CBZ      r0,|L19.66|
;;;272            (!p_advertising->whitelist_temporarily_disabled) &&
000012  f89400d4          LDRB     r0,[r4,#0xd4]
000016  b9a0              CBNZ     r0,|L19.66|
;;;273            (whitelist_has_entries(p_advertising)))
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       whitelist_has_entries
00001e  b180              CBZ      r0,|L19.66|
;;;274        {
;;;275            #if (NRF_SD_BLE_API_VERSION <= 2)
;;;276                p_adv_params->p_whitelist = &m_whitelist;
;;;277            #endif
;;;278    
;;;279            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
000020  2002              MOVS     r0,#2
000022  7228              STRB     r0,[r5,#8]
;;;280            p_advertising->advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000024  2104              MOVS     r1,#4
000026  2033              MOVS     r0,#0x33
000028  5501              STRB     r1,[r0,r4]
;;;281    
;;;282            ret = ble_advdata_set(&(p_advertising->advdata), NULL);
00002a  2100              MOVS     r1,#0
00002c  f1040030          ADD      r0,r4,#0x30
000030  f7fffffe          BL       ble_advdata_set
000034  4606              MOV      r6,r0
;;;283            if (ret != NRF_SUCCESS)
000036  b10e              CBZ      r6,|L19.60|
;;;284            {
;;;285                return ret;
000038  4630              MOV      r0,r6
                  |L19.58|
;;;286            }
;;;287    
;;;288            p_advertising->adv_evt = BLE_ADV_EVT_FAST_WHITELIST;
;;;289        }
;;;290        else
;;;291        {
;;;292            p_advertising->adv_evt = BLE_ADV_EVT_FAST;
;;;293        }
;;;294    
;;;295        return NRF_SUCCESS;
;;;296    }
00003a  bd70              POP      {r4-r6,pc}
                  |L19.60|
00003c  2005              MOVS     r0,#5                 ;288
00003e  70a0              STRB     r0,[r4,#2]            ;288
000040  e001              B        |L19.70|
                  |L19.66|
000042  2003              MOVS     r0,#3                 ;292
000044  70a0              STRB     r0,[r4,#2]            ;292
                  |L19.70|
000046  2000              MOVS     r0,#0                 ;295
000048  e7f7              B        |L19.58|
;;;297    
                          ENDP


                          AREA ||i.set_adv_mode_slow||, CODE, READONLY, ALIGN=1

                  set_adv_mode_slow PROC
;;;305     */
;;;306    static ret_code_t set_adv_mode_slow(ble_advertising_t * const p_advertising,
000000  b570              PUSH     {r4-r6,lr}
;;;307                                        ble_gap_adv_params_t    * p_adv_params)
;;;308    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;309        ret_code_t ret;
;;;310    
;;;311        p_adv_params->interval = p_advertising->adv_modes_config.ble_adv_slow_interval;
000006  8ba0              LDRH     r0,[r4,#0x1c]
000008  8168              STRH     r0,[r5,#0xa]
;;;312        p_adv_params->timeout  = p_advertising->adv_modes_config.ble_adv_slow_timeout;
00000a  8c20              LDRH     r0,[r4,#0x20]
00000c  81a8              STRH     r0,[r5,#0xc]
;;;313    
;;;314        if ((p_advertising->adv_modes_config.ble_adv_whitelist_enabled) &&
00000e  7960              LDRB     r0,[r4,#5]
000010  b1b8              CBZ      r0,|L20.66|
;;;315            (!p_advertising->whitelist_temporarily_disabled) &&
000012  f89400d4          LDRB     r0,[r4,#0xd4]
000016  b9a0              CBNZ     r0,|L20.66|
;;;316            (whitelist_has_entries(p_advertising)))
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       whitelist_has_entries
00001e  b180              CBZ      r0,|L20.66|
;;;317        {
;;;318            #if (NRF_SD_BLE_API_VERSION <= 2)
;;;319            {
;;;320                p_adv_params->p_whitelist = &p_advertising->whitelist;
;;;321            }
;;;322            #endif
;;;323    
;;;324            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
000020  2002              MOVS     r0,#2
000022  7228              STRB     r0,[r5,#8]
;;;325            p_advertising->advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000024  2104              MOVS     r1,#4
000026  2033              MOVS     r0,#0x33
000028  5501              STRB     r1,[r0,r4]
;;;326    
;;;327            ret = ble_advdata_set(&(p_advertising->advdata), NULL);
00002a  2100              MOVS     r1,#0
00002c  f1040030          ADD      r0,r4,#0x30
000030  f7fffffe          BL       ble_advdata_set
000034  4606              MOV      r6,r0
;;;328            if (ret != NRF_SUCCESS)
000036  b10e              CBZ      r6,|L20.60|
;;;329            {
;;;330                return ret;
000038  4630              MOV      r0,r6
                  |L20.58|
;;;331            }
;;;332    
;;;333            p_advertising->adv_evt = BLE_ADV_EVT_SLOW_WHITELIST;
;;;334        }
;;;335        else
;;;336        {
;;;337            p_advertising->adv_evt = BLE_ADV_EVT_SLOW;
;;;338        }
;;;339    
;;;340        return NRF_SUCCESS;
;;;341    }
00003a  bd70              POP      {r4-r6,pc}
                  |L20.60|
00003c  2006              MOVS     r0,#6                 ;333
00003e  70a0              STRB     r0,[r4,#2]            ;333
000040  e001              B        |L20.70|
                  |L20.66|
000042  2004              MOVS     r0,#4                 ;337
000044  70a0              STRB     r0,[r4,#2]            ;337
                  |L20.70|
000046  2000              MOVS     r0,#0                 ;340
000048  e7f7              B        |L20.58|
;;;342    
                          ENDP


                          AREA ||i.whitelist_has_entries||, CODE, READONLY, ALIGN=1

                  whitelist_has_entries PROC
;;;62     
;;;63         static bool whitelist_has_entries(ble_advertising_t * const p_advertising)
000000  4601              MOV      r1,r0
;;;64         {
;;;65             return p_advertising->whitelist_in_use;
000002  f89100d6          LDRB     r0,[r1,#0xd6]
;;;66         }
000006  4770              BX       lr
;;;67     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_advertising\\ble_advertising.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_59383d5e____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_ble_advertising_c_59383d5e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_59383d5e____REVSH|
#line 402
|__asm___17_ble_advertising_c_59383d5e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_59383d5e____RRX|
#line 587
|__asm___17_ble_advertising_c_59383d5e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
