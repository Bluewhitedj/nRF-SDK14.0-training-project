L 1 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.c"
N/**
N * Copyright (c) 2016 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N#include "sdk_config.h"
L 1 "..\config\sdk_config.h" 1
N/**
N * Copyright (c) 2017 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N
N
N
N#ifndef SDK_CONFIG_H
N#define SDK_CONFIG_H
N// <<< Use Configuration Wizard in Context Menu >>>\n
N#ifdef USE_APP_CONFIG
S#include "app_config.h"
N#endif
N// <h> Board Support 
N
N//==========================================================
N// <q> BSP_BTN_BLE_ENABLED  - bsp_btn_ble - Button Control for BLE
N 
N
N#ifndef BSP_BTN_BLE_ENABLED
N#define BSP_BTN_BLE_ENABLED 1
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_BLE 
N
N//==========================================================
N// <q> BLE_ADVERTISING_ENABLED  - ble_advertising - Advertising module
N 
N
N#ifndef BLE_ADVERTISING_ENABLED
N#define BLE_ADVERTISING_ENABLED 1
N#endif
N
N// <e> NRF_BLE_CONN_PARAMS_ENABLED - ble_conn_params - Initiating and executing a connection parameters negotiation procedure
N//==========================================================
N#ifndef NRF_BLE_CONN_PARAMS_ENABLED
N#define NRF_BLE_CONN_PARAMS_ENABLED 1
N#endif
N// <o> NRF_BLE_CONN_PARAMS_MAX_SLAVE_LATENCY_DEVIATION - The largest acceptable deviation in slave latency. 
N// <i> The largest deviation (+ or -) from the requested slave latency that will not be renegotiated.
N
N#ifndef NRF_BLE_CONN_PARAMS_MAX_SLAVE_LATENCY_DEVIATION
N#define NRF_BLE_CONN_PARAMS_MAX_SLAVE_LATENCY_DEVIATION 499
N#endif
N
N// <o> NRF_BLE_CONN_PARAMS_MAX_SUPERVISION_TIMEOUT_DEVIATION - The largest acceptable deviation (in 10 ms units) in supervision timeout. 
N// <i> The largest deviation (+ or -, in 10 ms units) from the requested supervision timeout that will not be renegotiated.
N
N#ifndef NRF_BLE_CONN_PARAMS_MAX_SUPERVISION_TIMEOUT_DEVIATION
N#define NRF_BLE_CONN_PARAMS_MAX_SUPERVISION_TIMEOUT_DEVIATION 65535
N#endif
N
N// </e>
N
N// <q> NRF_BLE_GATT_ENABLED  - nrf_ble_gatt - GATT module
N 
N
N#ifndef NRF_BLE_GATT_ENABLED
N#define NRF_BLE_GATT_ENABLED 1
N#endif
N
N// <e> PEER_MANAGER_ENABLED - peer_manager - Peer Manager
N//==========================================================
N#ifndef PEER_MANAGER_ENABLED
N#define PEER_MANAGER_ENABLED 1
N#endif
N// <o> PM_MAX_REGISTRANTS  
N// <i> Number of event handlers that can be registered.
N
N#ifndef PM_MAX_REGISTRANTS
N#define PM_MAX_REGISTRANTS 3
N#endif
N
N// <o> PM_FLASH_BUFFERS  
N// <i> Number of internal buffers for flash operations.
N// <i> Decrease this value to lower RAM usage.
N
N#ifndef PM_FLASH_BUFFERS
N#define PM_FLASH_BUFFERS 8
N#endif
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> nRF_BLE_Services 
N
N//==========================================================
N// <q> BLE_ANCS_C_ENABLED  - ble_ancs_c - Apple Notification Service Client
N 
N
N#ifndef BLE_ANCS_C_ENABLED
N#define BLE_ANCS_C_ENABLED 0
N#endif
N
N// <q> BLE_ANS_C_ENABLED  - ble_ans_c - Alert Notification Service Client
N 
N
N#ifndef BLE_ANS_C_ENABLED
N#define BLE_ANS_C_ENABLED 0
N#endif
N
N// <q> BLE_BAS_C_ENABLED  - ble_bas_c - Battery Service Client
N 
N
N#ifndef BLE_BAS_C_ENABLED
N#define BLE_BAS_C_ENABLED 0
N#endif
N
N// <q> BLE_BAS_ENABLED  - ble_bas - Battery Service
N 
N
N#ifndef BLE_BAS_ENABLED
N#define BLE_BAS_ENABLED 1
N#endif
N
N// <q> BLE_CSCS_ENABLED  - ble_cscs - Cycling Speed and Cadence Service
N 
N
N#ifndef BLE_CSCS_ENABLED
N#define BLE_CSCS_ENABLED 0
N#endif
N
N// <q> BLE_CTS_C_ENABLED  - ble_cts_c - Current Time Service Client
N 
N
N#ifndef BLE_CTS_C_ENABLED
N#define BLE_CTS_C_ENABLED 0
N#endif
N
N// <q> BLE_DIS_ENABLED  - ble_dis - Device Information Service
N 
N
N#ifndef BLE_DIS_ENABLED
N#define BLE_DIS_ENABLED 1
N#endif
N
N// <q> BLE_GLS_ENABLED  - ble_gls - Glucose Service
N 
N
N#ifndef BLE_GLS_ENABLED
N#define BLE_GLS_ENABLED 0
N#endif
N
N// <q> BLE_HIDS_ENABLED  - ble_hids - Human Interface Device Service
N 
N
N#ifndef BLE_HIDS_ENABLED
N#define BLE_HIDS_ENABLED 0
N#endif
N
N// <q> BLE_HRS_C_ENABLED  - ble_hrs_c - Heart Rate Service Client
N 
N
N#ifndef BLE_HRS_C_ENABLED
N#define BLE_HRS_C_ENABLED 0
N#endif
N
N// <q> BLE_HRS_ENABLED  - ble_hrs - Heart Rate Service
N 
N
N#ifndef BLE_HRS_ENABLED
N#define BLE_HRS_ENABLED 0
N#endif
N
N// <q> BLE_HTS_ENABLED  - ble_hts - Health Thermometer Service
N 
N
N#ifndef BLE_HTS_ENABLED
N#define BLE_HTS_ENABLED 0
N#endif
N
N// <q> BLE_IAS_C_ENABLED  - ble_ias_c - Immediate Alert Service Client
N 
N
N#ifndef BLE_IAS_C_ENABLED
N#define BLE_IAS_C_ENABLED 0
N#endif
N
N// <q> BLE_IAS_ENABLED  - ble_ias - Immediate Alert Service
N 
N
N#ifndef BLE_IAS_ENABLED
N#define BLE_IAS_ENABLED 0
N#endif
N
N// <q> BLE_LBS_C_ENABLED  - ble_lbs_c - Nordic LED Button Service Client
N 
N
N#ifndef BLE_LBS_C_ENABLED
N#define BLE_LBS_C_ENABLED 0
N#endif
N
N// <q> BLE_LBS_ENABLED  - ble_lbs - LED Button Service
N 
N
N#ifndef BLE_LBS_ENABLED
N#define BLE_LBS_ENABLED 0
N#endif
N
N// <q> BLE_LLS_ENABLED  - ble_lls - Link Loss Service
N 
N
N#ifndef BLE_LLS_ENABLED
N#define BLE_LLS_ENABLED 0
N#endif
N
N// <q> BLE_NUS_C_ENABLED  - ble_nus_c - Nordic UART Central Service
N 
N
N#ifndef BLE_NUS_C_ENABLED
N#define BLE_NUS_C_ENABLED 0
N#endif
N
N// <q> BLE_NUS_ENABLED  - ble_nus - Nordic UART Service
N 
N
N#ifndef BLE_NUS_ENABLED
N#define BLE_NUS_ENABLED 1
N#endif
N
N// <q> BLE_RSCS_C_ENABLED  - ble_rscs_c - Running Speed and Cadence Client
N 
N
N#ifndef BLE_RSCS_C_ENABLED
N#define BLE_RSCS_C_ENABLED 0
N#endif
N
N// <q> BLE_RSCS_ENABLED  - ble_rscs - Running Speed and Cadence Service
N 
N
N#ifndef BLE_RSCS_ENABLED
N#define BLE_RSCS_ENABLED 0
N#endif
N
N// <q> BLE_TPS_ENABLED  - ble_tps - TX Power Service
N 
N
N#ifndef BLE_TPS_ENABLED
N#define BLE_TPS_ENABLED 0
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_DFU 
N
N//==========================================================
N// <h> ble_dfu - Device Firmware Update
N
N//==========================================================
N// <q> BLE_DFU_ENABLED  - Enable DFU Service.
N 
N
N#ifndef BLE_DFU_ENABLED
N#define BLE_DFU_ENABLED 1
N#endif
N
N// <q> NRF_DFU_BLE_BUTTONLESS_SUPPORTS_BONDS  - Buttonless DFU supports bonds.
N 
N
N#ifndef NRF_DFU_BLE_BUTTONLESS_SUPPORTS_BONDS
N#define NRF_DFU_BLE_BUTTONLESS_SUPPORTS_BONDS 0
N
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Drivers 
N
N//==========================================================
N// <e> CLOCK_ENABLED - nrf_drv_clock - CLOCK peripheral driver
N//==========================================================
N#ifndef CLOCK_ENABLED
N#define CLOCK_ENABLED 1
N#endif
N// <o> CLOCK_CONFIG_XTAL_FREQ  - HF XTAL Frequency
N 
N// <0=> Default (64 MHz) 
N
N#ifndef CLOCK_CONFIG_XTAL_FREQ
N#define CLOCK_CONFIG_XTAL_FREQ 0
N#endif
N
N// <o> CLOCK_CONFIG_LF_SRC  - LF Clock Source
N 
N// <0=> RC 
N// <1=> XTAL 
N// <2=> Synth 
N
N#ifndef CLOCK_CONFIG_LF_SRC
N#define CLOCK_CONFIG_LF_SRC 1
N#endif
N
N// <o> CLOCK_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef CLOCK_CONFIG_IRQ_PRIORITY
N#define CLOCK_CONFIG_IRQ_PRIORITY 7
N#endif
N
N// </e>
N
N// <e> GPIOTE_ENABLED - nrf_drv_gpiote - GPIOTE peripheral driver
N//==========================================================
N#ifndef GPIOTE_ENABLED
N#define GPIOTE_ENABLED 1
N#endif
N// <o> GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS - Number of lower power input pins 
N#ifndef GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS
N#define GPIOTE_CONFIG_NUM_OF_LOW_POWER_EVENTS 4
N#endif
N
N// <o> GPIOTE_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef GPIOTE_CONFIG_IRQ_PRIORITY
N#define GPIOTE_CONFIG_IRQ_PRIORITY 7
N#endif
N
N// </e>
N
N// <q> PERIPHERAL_RESOURCE_SHARING_ENABLED  - nrf_drv_common - Peripheral drivers common module
N 
N
N#ifndef PERIPHERAL_RESOURCE_SHARING_ENABLED
N#define PERIPHERAL_RESOURCE_SHARING_ENABLED 0
N#endif
N
N// <e> UART_ENABLED - nrf_drv_uart - UART/UARTE peripheral driver
N//==========================================================
N#ifndef UART_ENABLED
N#define UART_ENABLED 1
N#endif
N// <o> UART_DEFAULT_CONFIG_HWFC  - Hardware Flow Control
N 
N// <0=> Disabled 
N// <1=> Enabled 
N
N#ifndef UART_DEFAULT_CONFIG_HWFC
N#define UART_DEFAULT_CONFIG_HWFC 0
N#endif
N
N// <o> UART_DEFAULT_CONFIG_PARITY  - Parity
N 
N// <0=> Excluded 
N// <14=> Included 
N
N#ifndef UART_DEFAULT_CONFIG_PARITY
N#define UART_DEFAULT_CONFIG_PARITY 0
N#endif
N
N// <o> UART_DEFAULT_CONFIG_BAUDRATE  - Default Baudrate
N 
N// <323584=> 1200 baud 
N// <643072=> 2400 baud 
N// <1290240=> 4800 baud 
N// <2576384=> 9600 baud 
N// <3862528=> 14400 baud 
N// <5152768=> 19200 baud 
N// <7716864=> 28800 baud 
N// <10289152=> 38400 baud 
N// <15400960=> 57600 baud 
N// <20615168=> 76800 baud 
N// <30801920=> 115200 baud 
N// <61865984=> 230400 baud 
N// <67108864=> 250000 baud 
N// <121634816=> 460800 baud 
N// <251658240=> 921600 baud 
N// <268435456=> 1000000 baud 
N
N#ifndef UART_DEFAULT_CONFIG_BAUDRATE
N#define UART_DEFAULT_CONFIG_BAUDRATE 30801920
N#endif
N
N// <o> UART_DEFAULT_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef UART_DEFAULT_CONFIG_IRQ_PRIORITY
N#define UART_DEFAULT_CONFIG_IRQ_PRIORITY 7
N#endif
N
N// <q> UART_EASY_DMA_SUPPORT  - Driver supporting EasyDMA
N 
N
N#ifndef UART_EASY_DMA_SUPPORT
N#define UART_EASY_DMA_SUPPORT 1
N#endif
N
N// <q> UART_LEGACY_SUPPORT  - Driver supporting Legacy mode
N 
N
N#ifndef UART_LEGACY_SUPPORT
N#define UART_LEGACY_SUPPORT 1
N#endif
N
N// <e> UART0_ENABLED - Enable UART0 instance
N//==========================================================
N#ifndef UART0_ENABLED
N#define UART0_ENABLED 1
N#endif
N// <q> UART0_CONFIG_USE_EASY_DMA  - Default setting for using EasyDMA
N 
N
N#ifndef UART0_CONFIG_USE_EASY_DMA
N#define UART0_CONFIG_USE_EASY_DMA 1
N#endif
N
N// </e>
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Libraries 
N
N//==========================================================
N// <e> APP_SCHEDULER_ENABLED - app_scheduler - Events scheduler
N//==========================================================
N#ifndef APP_SCHEDULER_ENABLED
N#define APP_SCHEDULER_ENABLED 1
N#endif
N// <q> APP_SCHEDULER_WITH_PAUSE  - Enabling pause feature
N 
N
N#ifndef APP_SCHEDULER_WITH_PAUSE
N#define APP_SCHEDULER_WITH_PAUSE 0
N#endif
N
N// <q> APP_SCHEDULER_WITH_PROFILER  - Enabling scheduler profiling
N 
N
N#ifndef APP_SCHEDULER_WITH_PROFILER
N#define APP_SCHEDULER_WITH_PROFILER 0
N#endif
N
N// </e>
N
N// <e> APP_TIMER_ENABLED - app_timer - Application timer functionality
N//==========================================================
N#ifndef APP_TIMER_ENABLED
N#define APP_TIMER_ENABLED 1
N#endif
N// <o> APP_TIMER_CONFIG_RTC_FREQUENCY  - Configure RTC prescaler.
N 
N// <0=> 32768 Hz 
N// <1=> 16384 Hz 
N// <3=> 8192 Hz 
N// <7=> 4096 Hz 
N// <15=> 2048 Hz 
N// <31=> 1024 Hz 
N
N#ifndef APP_TIMER_CONFIG_RTC_FREQUENCY
N#define APP_TIMER_CONFIG_RTC_FREQUENCY 0
N#endif
N
N// <o> APP_TIMER_CONFIG_IRQ_PRIORITY  - Interrupt priority
N 
N
N// <i> Priorities 0,2 (nRF51) and 0,1,4,5 (nRF52) are reserved for SoftDevice
N// <0=> 0 (highest) 
N// <1=> 1 
N// <2=> 2 
N// <3=> 3 
N// <4=> 4 
N// <5=> 5 
N// <6=> 6 
N// <7=> 7 
N
N#ifndef APP_TIMER_CONFIG_IRQ_PRIORITY
N#define APP_TIMER_CONFIG_IRQ_PRIORITY 7
N#endif
N
N// <o> APP_TIMER_CONFIG_OP_QUEUE_SIZE - Capacity of timer requests queue. 
N// <i> Size of the queue depends on how many timers are used
N// <i> in the system, how often timers are started and overall
N// <i> system latency. If queue size is too small app_timer calls
N// <i> will fail.
N
N#ifndef APP_TIMER_CONFIG_OP_QUEUE_SIZE
N#define APP_TIMER_CONFIG_OP_QUEUE_SIZE 10
N#endif
N
N// <q> APP_TIMER_CONFIG_USE_SCHEDULER  - Enable scheduling app_timer events to app_scheduler
N 
N
N#ifndef APP_TIMER_CONFIG_USE_SCHEDULER
N#define APP_TIMER_CONFIG_USE_SCHEDULER 0
N#endif
N
N// <q> APP_TIMER_WITH_PROFILER  - Enable app_timer profiling
N 
N
N#ifndef APP_TIMER_WITH_PROFILER
N#define APP_TIMER_WITH_PROFILER 0
N#endif
N
N// <q> APP_TIMER_KEEPS_RTC_ACTIVE  - Enable RTC always on
N 
N
N// <i> If option is enabled RTC is kept running even if there is no active timers.
N// <i> This option can be used when app_timer is used for timestamping.
N
N#ifndef APP_TIMER_KEEPS_RTC_ACTIVE
N#define APP_TIMER_KEEPS_RTC_ACTIVE 0
N#endif
N
N// <o> APP_TIMER_CONFIG_SWI_NUMBER  - Configure SWI instance used.
N 
N// <0=> 0 
N// <1=> 1 
N
N#ifndef APP_TIMER_CONFIG_SWI_NUMBER
N#define APP_TIMER_CONFIG_SWI_NUMBER 0
N#endif
N
N// </e>
N
N// <q> BUTTON_ENABLED  - app_button - buttons handling module
N 
N
N#ifndef BUTTON_ENABLED
N#define BUTTON_ENABLED 1
N#endif
N
N// <q> CRC16_ENABLED  - crc16 - CRC16 calculation routines
N 
N
N#ifndef CRC16_ENABLED
N#define CRC16_ENABLED 1
N#endif
N
N// <q> APP_TWI_ENABLED  - app_twi - TWI transaction manager
N 
N
N#ifndef APP_TWI_ENABLED
N#define APP_TWI_ENABLED 1
N#endif
N
N// <e> APP_UART_ENABLED - app_uart - UART driver
N//==========================================================
N#ifndef APP_UART_ENABLED
N#define APP_UART_ENABLED 1
N#endif
N// <o> APP_UART_DRIVER_INSTANCE  - UART instance used
N 
N// <0=> 0 
N
N#ifndef APP_UART_DRIVER_INSTANCE
N#define APP_UART_DRIVER_INSTANCE 0
N#endif
N
N// </e>
N
N// <q> APP_FIFO_ENABLED  - app_fifo - Software FIFO implementation
N 
N
N#ifndef APP_FIFO_ENABLED
N#define APP_FIFO_ENABLED 1
N#endif
N
N// <e> FDS_ENABLED - fds - Flash data storage module
N//==========================================================
N#ifndef FDS_ENABLED
N#define FDS_ENABLED 1
N#endif
N// <h> Pages - Virtual page settings
N
N// <i> Configure the number of virtual pages to use and their size.
N//==========================================================
N// <o> FDS_VIRTUAL_PAGES - Number of virtual flash pages to use. 
N// <i> One of the virtual pages is reserved by the system for garbage collection.
N// <i> Therefore, the minimum is two virtual pages: one page to store data and one page to be used by the system for garbage collection.
N// <i> The total amount of flash memory that is used by FDS amounts to @ref FDS_VIRTUAL_PAGES * @ref FDS_VIRTUAL_PAGE_SIZE * 4 bytes.
N
N#ifndef FDS_VIRTUAL_PAGES
N#define FDS_VIRTUAL_PAGES 3
N#endif
N
N// <o> FDS_VIRTUAL_PAGE_SIZE  - The size of a virtual flash page.
N 
N
N// <i> Expressed in number of 4-byte words.
N// <i> By default, a virtual page is the same size as a physical page.
N// <i> The size of a virtual page must be a multiple of the size of a physical page.
N// <1024=> 1024 
N// <2048=> 2048 
N
N#ifndef FDS_VIRTUAL_PAGE_SIZE
N#define FDS_VIRTUAL_PAGE_SIZE 1024
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> Backend - Backend configuration
N
N// <i> Configure which nrf_fstorage backend is used by FDS to write to flash.
N//==========================================================
N// <o> FDS_BACKEND  - FDS flash backend.
N 
N
N// <i> NRF_FSTORAGE_SD uses the nrf_fstorage_sd backend implementation using the SoftDevice API. Use this if you have a SoftDevice present.
N// <i> NRF_FSTORAGE_NVMC uses the nrf_fstorage_nvmc implementation. Use this setting if you don't use the SoftDevice.
N// <1=> NRF_FSTORAGE_NVMC 
N// <2=> NRF_FSTORAGE_SD 
N
N#ifndef FDS_BACKEND
N#define FDS_BACKEND 2
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> Queue - Queue settings
N
N//==========================================================
N// <o> FDS_OP_QUEUE_SIZE - Size of the internal queue. 
N// <i> Increase this value if you frequently get synchronous FDS_ERR_NO_SPACE_IN_QUEUES errors.
N
N#ifndef FDS_OP_QUEUE_SIZE
N#define FDS_OP_QUEUE_SIZE 4
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> CRC - CRC functionality
N
N//==========================================================
N// <e> FDS_CRC_CHECK_ON_READ - Enable CRC checks.
N
N// <i> Save a record's CRC when it is written to flash and check it when the record is opened.
N// <i> Records with an incorrect CRC can still be 'seen' by the user using FDS functions, but they cannot be opened.
N// <i> Additionally, they will not be garbage collected until they are deleted.
N//==========================================================
N#ifndef FDS_CRC_CHECK_ON_READ
N#define FDS_CRC_CHECK_ON_READ 0
N#endif
N// <o> FDS_CRC_CHECK_ON_WRITE  - Perform a CRC check on newly written records.
N 
N
N// <i> Perform a CRC check on newly written records.
N// <i> This setting can be used to make sure that the record data was not altered while being written to flash.
N// <1=> Enabled 
N// <0=> Disabled 
N
N#ifndef FDS_CRC_CHECK_ON_WRITE
N#define FDS_CRC_CHECK_ON_WRITE 0
N#endif
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> Users - Number of users
N
N//==========================================================
N// <o> FDS_MAX_USERS - Maximum number of callbacks that can be registered. 
N#ifndef FDS_MAX_USERS
N#define FDS_MAX_USERS 4
N#endif
N
N// </h> 
N//==========================================================
N
N// </e>
N
N// <e> NRF_BALLOC_ENABLED - nrf_balloc - Block allocator module
N//==========================================================
N#ifndef NRF_BALLOC_ENABLED
N#define NRF_BALLOC_ENABLED 1
N#endif
N// <e> NRF_BALLOC_CONFIG_DEBUG_ENABLED - Enables debug mode in the module.
N//==========================================================
N#ifndef NRF_BALLOC_CONFIG_DEBUG_ENABLED
N#define NRF_BALLOC_CONFIG_DEBUG_ENABLED 0
N#endif
N// <o> NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS - Number of words used as head guard.  <0-255> 
N
N
N#ifndef NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS
N#define NRF_BALLOC_CONFIG_HEAD_GUARD_WORDS 1
N#endif
N
N// <o> NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS - Number of words used as tail guard.  <0-255> 
N
N
N#ifndef NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS
N#define NRF_BALLOC_CONFIG_TAIL_GUARD_WORDS 1
N#endif
N
N// <q> NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED  - Enables basic checks in this module.
N 
N
N#ifndef NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED
N#define NRF_BALLOC_CONFIG_BASIC_CHECKS_ENABLED 0
N#endif
N
N// <q> NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED  - Enables double memory free check in this module.
N 
N
N#ifndef NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED
N#define NRF_BALLOC_CONFIG_DOUBLE_FREE_CHECK_ENABLED 0
N#endif
N
N// <q> NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED  - Enables free memory corruption check in this module.
N 
N
N#ifndef NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED
N#define NRF_BALLOC_CONFIG_DATA_TRASHING_CHECK_ENABLED 0
N#endif
N
N// </e>
N
N// </e>
N
N// <q> NRF_FPRINTF_ENABLED  - nrf_fprintf - fprintf function.
N 
N
N#ifndef NRF_FPRINTF_ENABLED
N#define NRF_FPRINTF_ENABLED 1
N#endif
N
N// <e> NRF_FSTORAGE_ENABLED - nrf_fstorage - Flash abstraction library
N//==========================================================
N#ifndef NRF_FSTORAGE_ENABLED
N#define NRF_FSTORAGE_ENABLED 1
N#endif
N// <h> nrf_fstorage_sd - Implementation using the SoftDevice.
N
N// <i> Configuration options for the fstorage implementation using the SoftDevice.
N//==========================================================
N// <o> NRF_FSTORAGE_SD_QUEUE_SIZE - Size of the internal queue of operations. 
N// <i> Increase this value if API calls frequently return the error @ref NRF_ERROR_NO_MEM.
N
N#ifndef NRF_FSTORAGE_SD_QUEUE_SIZE
N#define NRF_FSTORAGE_SD_QUEUE_SIZE 4
N#endif
N
N// <o> NRF_FSTORAGE_SD_MAX_RETRIES - Maximum number of attempts at executing an operation when the SoftDevice is busy. 
N// <i> Increase this value if events frequently return the @ref NRF_ERROR_TIMEOUT error.
N// <i> The SoftDevice might fail to schedule flash access due to high BLE activity.
N
N#ifndef NRF_FSTORAGE_SD_MAX_RETRIES
N#define NRF_FSTORAGE_SD_MAX_RETRIES 8
N#endif
N
N// <o> NRF_FSTORAGE_SD_MAX_WRITE_SIZE - Maximum number of bytes to be written to flash in a single operation. 
N// <i> This value must be a multiple of four.
N// <i> Lowering this value can increase the chances of the SoftDevice being able to execute flash operations in between radio activity.
N// <i> This value is bound by the maximum number of bytes that can be written to flash in a single call to @ref sd_flash_write.
N// <i> That is 1024 bytes for nRF51 ICs and 4096 bytes for nRF52 ICs.
N
N#ifndef NRF_FSTORAGE_SD_MAX_WRITE_SIZE
N#define NRF_FSTORAGE_SD_MAX_WRITE_SIZE 4096
N#endif
N
N// </h> 
N//==========================================================
N
N// </e>
N
N// <q> NRF_MEMOBJ_ENABLED  - nrf_memobj - Linked memory allocator module
N 
N
N#ifndef NRF_MEMOBJ_ENABLED
N#define NRF_MEMOBJ_ENABLED 1
N#endif
N
N// <e> NRF_PWR_MGMT_ENABLED - nrf_pwr_mgmt - Power management module
N//==========================================================
N#ifndef NRF_PWR_MGMT_ENABLED
N#define NRF_PWR_MGMT_ENABLED 1
N#endif
N// <e> NRF_PWR_MGMT_CONFIG_DEBUG_PIN_ENABLED - Enables pin debug in the module.
N
N// <i> Selected pin will be set when CPU is in sleep mode.
N//==========================================================
N#ifndef NRF_PWR_MGMT_CONFIG_DEBUG_PIN_ENABLED
N#define NRF_PWR_MGMT_CONFIG_DEBUG_PIN_ENABLED 0
N#endif
N// <o> NRF_PWR_MGMT_SLEEP_DEBUG_PIN  - Pin number
N 
N// <0=> 0 (P0.0) 
N// <1=> 1 (P0.1) 
N// <2=> 2 (P0.2) 
N// <3=> 3 (P0.3) 
N// <4=> 4 (P0.4) 
N// <5=> 5 (P0.5) 
N// <6=> 6 (P0.6) 
N// <7=> 7 (P0.7) 
N// <8=> 8 (P0.8) 
N// <9=> 9 (P0.9) 
N// <10=> 10 (P0.10) 
N// <11=> 11 (P0.11) 
N// <12=> 12 (P0.12) 
N// <13=> 13 (P0.13) 
N// <14=> 14 (P0.14) 
N// <15=> 15 (P0.15) 
N// <16=> 16 (P0.16) 
N// <17=> 17 (P0.17) 
N// <18=> 18 (P0.18) 
N// <19=> 19 (P0.19) 
N// <20=> 20 (P0.20) 
N// <21=> 21 (P0.21) 
N// <22=> 22 (P0.22) 
N// <23=> 23 (P0.23) 
N// <24=> 24 (P0.24) 
N// <25=> 25 (P0.25) 
N// <26=> 26 (P0.26) 
N// <27=> 27 (P0.27) 
N// <28=> 28 (P0.28) 
N// <29=> 29 (P0.29) 
N// <30=> 30 (P0.30) 
N// <31=> 31 (P0.31) 
N// <4294967295=> Not connected 
N
N#ifndef NRF_PWR_MGMT_SLEEP_DEBUG_PIN
N#define NRF_PWR_MGMT_SLEEP_DEBUG_PIN 31
N#endif
N
N// </e>
N
N// <q> NRF_PWR_MGMT_CONFIG_CPU_USAGE_MONITOR_ENABLED  - Enables CPU usage monitor.
N 
N
N// <i> Module will trace percentage of CPU usage in one second intervals.
N
N#ifndef NRF_PWR_MGMT_CONFIG_CPU_USAGE_MONITOR_ENABLED
N#define NRF_PWR_MGMT_CONFIG_CPU_USAGE_MONITOR_ENABLED 0
N#endif
N
N// <e> NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_ENABLED - Enable standby timeout.
N//==========================================================
N#ifndef NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_ENABLED
N#define NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_ENABLED 0
N#endif
N// <o> NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_S - Standby timeout (in seconds). 
N// <i> Shutdown procedure will begin no earlier than after this number of seconds.
N
N#ifndef NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_S
N#define NRF_PWR_MGMT_CONFIG_STANDBY_TIMEOUT_S 3
N#endif
N
N// </e>
N
N// <q> NRF_PWR_MGMT_CONFIG_FPU_SUPPORT_ENABLED  - Enables FPU event cleaning.
N 
N
N#ifndef NRF_PWR_MGMT_CONFIG_FPU_SUPPORT_ENABLED
N#define NRF_PWR_MGMT_CONFIG_FPU_SUPPORT_ENABLED 1
N#endif
N
N// <q> NRF_PWR_MGMT_CONFIG_AUTO_SHUTDOWN_RETRY  - Blocked shutdown procedure will be retried every second.
N 
N
N#ifndef NRF_PWR_MGMT_CONFIG_AUTO_SHUTDOWN_RETRY
N#define NRF_PWR_MGMT_CONFIG_AUTO_SHUTDOWN_RETRY 1
N#endif
N
N// <q> NRF_PWR_MGMT_CONFIG_USE_SCHEDULER  - Module will use @ref app_scheduler.
N 
N
N#ifndef NRF_PWR_MGMT_CONFIG_USE_SCHEDULER
N#define NRF_PWR_MGMT_CONFIG_USE_SCHEDULER 0
N#endif
N
N// <o> NRF_PWR_MGMT_CONFIG_HANDLER_PRIORITY_COUNT - The number of priorities for module handlers. 
N// <i> The number of stages of the shutdown process.
N
N#ifndef NRF_PWR_MGMT_CONFIG_HANDLER_PRIORITY_COUNT
N#define NRF_PWR_MGMT_CONFIG_HANDLER_PRIORITY_COUNT 3
N#endif
N
N// </e>
N
N// <q> NRF_SECTION_ITER_ENABLED  - nrf_section_iter - Section iterator
N 
N
N#ifndef NRF_SECTION_ITER_ENABLED
N#define NRF_SECTION_ITER_ENABLED 1
N#endif
N
N// <q> NRF_STRERROR_ENABLED  - nrf_strerror - Library for converting error code to string.
N 
N
N#ifndef NRF_STRERROR_ENABLED
N#define NRF_STRERROR_ENABLED 1
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Log 
N
N//==========================================================
N// <e> NRF_LOG_BACKEND_RTT_ENABLED - nrf_log_backend_rtt - Log RTT backend
N//==========================================================
N#ifndef NRF_LOG_BACKEND_RTT_ENABLED
N#define NRF_LOG_BACKEND_RTT_ENABLED 1
N#endif
N// <o> NRF_LOG_BACKEND_RTT_TEMP_BUFFER_SIZE - Size of buffer for partially processed strings. 
N// <i> Size of the buffer is a trade-off between RAM usage and processing.
N// <i> if buffer is smaller then strings will often be fragmented.
N// <i> It is recommended to use size which will fit typical log and only the
N// <i> longer one will be fragmented.
N
N#ifndef NRF_LOG_BACKEND_RTT_TEMP_BUFFER_SIZE
N#define NRF_LOG_BACKEND_RTT_TEMP_BUFFER_SIZE 64
N#endif
N
N// </e>
N
N// <e> NRF_LOG_BACKEND_UART_ENABLED - nrf_log_backend_uart - Log UART backend
N//==========================================================
N#ifndef NRF_LOG_BACKEND_UART_ENABLED
N#define NRF_LOG_BACKEND_UART_ENABLED 0
N#endif
N// <o> NRF_LOG_BACKEND_UART_TX_PIN - UART TX pin 
N#ifndef NRF_LOG_BACKEND_UART_TX_PIN
N#define NRF_LOG_BACKEND_UART_TX_PIN 6
N#endif
N
N// <o> NRF_LOG_BACKEND_UART_BAUDRATE  - Default Baudrate
N 
N// <323584=> 1200 baud 
N// <643072=> 2400 baud 
N// <1290240=> 4800 baud 
N// <2576384=> 9600 baud 
N// <3862528=> 14400 baud 
N// <5152768=> 19200 baud 
N// <7716864=> 28800 baud 
N// <10289152=> 38400 baud 
N// <15400960=> 57600 baud 
N// <20615168=> 76800 baud 
N// <30801920=> 115200 baud 
N// <61865984=> 230400 baud 
N// <67108864=> 250000 baud 
N// <121634816=> 460800 baud 
N// <251658240=> 921600 baud 
N// <268435456=> 1000000 baud 
N
N#ifndef NRF_LOG_BACKEND_UART_BAUDRATE
N#define NRF_LOG_BACKEND_UART_BAUDRATE 30801920
N#endif
N
N// <o> NRF_LOG_BACKEND_UART_TEMP_BUFFER_SIZE - Size of buffer for partially processed strings. 
N// <i> Size of the buffer is a trade-off between RAM usage and processing.
N// <i> if buffer is smaller then strings will often be fragmented.
N// <i> It is recommended to use size which will fit typical log and only the
N// <i> longer one will be fragmented.
N
N#ifndef NRF_LOG_BACKEND_UART_TEMP_BUFFER_SIZE
N#define NRF_LOG_BACKEND_UART_TEMP_BUFFER_SIZE 64
N#endif
N
N// </e>
N
N// <h> nrf_log - Logging
N
N//==========================================================
N// <e> NRF_LOG_ENABLED - Logging module for nRF5 SDK
N//==========================================================
N#ifndef NRF_LOG_ENABLED
N#define NRF_LOG_ENABLED 1
N#endif
N// <e> NRF_LOG_USES_COLORS - If enabled then ANSI escape code for colors is prefixed to every string
N//==========================================================
N#ifndef NRF_LOG_USES_COLORS
N#define NRF_LOG_USES_COLORS 0
N#endif
N// <o> NRF_LOG_COLOR_DEFAULT  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_LOG_COLOR_DEFAULT
N#define NRF_LOG_COLOR_DEFAULT 0
N#endif
N
N// <o> NRF_LOG_ERROR_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_LOG_ERROR_COLOR
N#define NRF_LOG_ERROR_COLOR 0
N#endif
N
N// <o> NRF_LOG_WARNING_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_LOG_WARNING_COLOR
N#define NRF_LOG_WARNING_COLOR 0
N#endif
N
N// </e>
N
N// <o> NRF_LOG_DEFAULT_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_LOG_DEFAULT_LEVEL
N#define NRF_LOG_DEFAULT_LEVEL 4
N#endif
N
N// <q> NRF_LOG_DEFERRED  - Enable deffered logger.
N 
N
N// <i> Log data is buffered and can be processed in idle.
N
N#ifndef NRF_LOG_DEFERRED
N#define NRF_LOG_DEFERRED 1
N#endif
N
N// <o> NRF_LOG_BUFSIZE  - Size of the buffer for storing logs (in bytes).
N 
N
N// <i> Must be power of 2 and multiple of 4.
N// <i> If NRF_LOG_DEFERRED = 0 then buffer size can be reduced to minimum.
N// <128=> 128 
N// <256=> 256 
N// <512=> 512 
N// <1024=> 1024 
N// <2048=> 2048 
N// <4096=> 4096 
N// <8192=> 8192 
N// <16384=> 16384 
N
N#ifndef NRF_LOG_BUFSIZE
N#define NRF_LOG_BUFSIZE 1024
N#endif
N
N// <q> NRF_LOG_ALLOW_OVERFLOW  - Configures behavior when circular buffer is full.
N 
N
N// <i> If set then oldest logs are overwritten. Otherwise a 
N// <i> marker is injected informing about overflow.
N
N#ifndef NRF_LOG_ALLOW_OVERFLOW
N#define NRF_LOG_ALLOW_OVERFLOW 1
N#endif
N
N// <q> NRF_LOG_USES_TIMESTAMP  - Enable timestamping
N 
N
N// <i> Function for getting the timestamp is provided by the user
N
N#ifndef NRF_LOG_USES_TIMESTAMP
N#define NRF_LOG_USES_TIMESTAMP 0
N#endif
N
N// <q> NRF_LOG_FILTERS_ENABLED  - Enable dynamic filtering of logs.
N 
N
N#ifndef NRF_LOG_FILTERS_ENABLED
N#define NRF_LOG_FILTERS_ENABLED 0
N#endif
N
N// <q> NRF_LOG_CLI_CMDS  - Enable CLI commands for the module.
N 
N
N#ifndef NRF_LOG_CLI_CMDS
N#define NRF_LOG_CLI_CMDS 0
N#endif
N
N// <h> Log message pool - Configuration of log message pool
N
N//==========================================================
N// <o> NRF_LOG_MSGPOOL_ELEMENT_SIZE - Size of a single element in the pool of memory objects. 
N// <i> If a small value is set, then performance of logs processing
N// <i> is degraded because data is fragmented. Bigger value impacts
N// <i> RAM memory utilization. The size is set to fit a message with
N// <i> a timestamp and up to 2 arguments in a single memory object.
N
N#ifndef NRF_LOG_MSGPOOL_ELEMENT_SIZE
N#define NRF_LOG_MSGPOOL_ELEMENT_SIZE 20
N#endif
N
N// <o> NRF_LOG_MSGPOOL_ELEMENT_COUNT - Number of elements in the pool of memory objects 
N// <i> If a small value is set, then it may lead to a deadlock
N// <i> in certain cases if backend has high latency and holds
N// <i> multiple messages for long time. Bigger value impacts
N// <i> RAM memory usage.
N
N#ifndef NRF_LOG_MSGPOOL_ELEMENT_COUNT
N#define NRF_LOG_MSGPOOL_ELEMENT_COUNT 8
N#endif
N
N// </h> 
N//==========================================================
N
N// </e>
N
N// <h> nrf_log module configuration 
N
N//==========================================================
N// <h> nrf_log in nRF_Core 
N
N//==========================================================
N// <e> NRF_MPU_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_MPU_CONFIG_LOG_ENABLED
N#define NRF_MPU_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_MPU_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_MPU_CONFIG_LOG_LEVEL
N#define NRF_MPU_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_MPU_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_MPU_CONFIG_INFO_COLOR
N#define NRF_MPU_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_MPU_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_MPU_CONFIG_DEBUG_COLOR
N#define NRF_MPU_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_STACK_GUARD_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_STACK_GUARD_CONFIG_LOG_ENABLED
N#define NRF_STACK_GUARD_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_STACK_GUARD_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_STACK_GUARD_CONFIG_LOG_LEVEL
N#define NRF_STACK_GUARD_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_STACK_GUARD_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_STACK_GUARD_CONFIG_INFO_COLOR
N#define NRF_STACK_GUARD_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_STACK_GUARD_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_STACK_GUARD_CONFIG_DEBUG_COLOR
N#define NRF_STACK_GUARD_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> TASK_MANAGER_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef TASK_MANAGER_CONFIG_LOG_ENABLED
N#define TASK_MANAGER_CONFIG_LOG_ENABLED 0
N#endif
N// <o> TASK_MANAGER_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef TASK_MANAGER_CONFIG_LOG_LEVEL
N#define TASK_MANAGER_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> TASK_MANAGER_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TASK_MANAGER_CONFIG_INFO_COLOR
N#define TASK_MANAGER_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> TASK_MANAGER_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TASK_MANAGER_CONFIG_DEBUG_COLOR
N#define TASK_MANAGER_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> nrf_log in nRF_Drivers 
N
N//==========================================================
N// <e> CLOCK_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef CLOCK_CONFIG_LOG_ENABLED
N#define CLOCK_CONFIG_LOG_ENABLED 0
N#endif
N// <o> CLOCK_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef CLOCK_CONFIG_LOG_LEVEL
N#define CLOCK_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> CLOCK_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef CLOCK_CONFIG_INFO_COLOR
N#define CLOCK_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> CLOCK_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef CLOCK_CONFIG_DEBUG_COLOR
N#define CLOCK_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> COMMON_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef COMMON_CONFIG_LOG_ENABLED
N#define COMMON_CONFIG_LOG_ENABLED 0
N#endif
N// <o> COMMON_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef COMMON_CONFIG_LOG_LEVEL
N#define COMMON_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> COMMON_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef COMMON_CONFIG_INFO_COLOR
N#define COMMON_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> COMMON_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef COMMON_CONFIG_DEBUG_COLOR
N#define COMMON_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> COMP_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef COMP_CONFIG_LOG_ENABLED
N#define COMP_CONFIG_LOG_ENABLED 0
N#endif
N// <o> COMP_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef COMP_CONFIG_LOG_LEVEL
N#define COMP_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> COMP_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef COMP_CONFIG_INFO_COLOR
N#define COMP_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> COMP_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef COMP_CONFIG_DEBUG_COLOR
N#define COMP_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> GPIOTE_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef GPIOTE_CONFIG_LOG_ENABLED
N#define GPIOTE_CONFIG_LOG_ENABLED 0
N#endif
N// <o> GPIOTE_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef GPIOTE_CONFIG_LOG_LEVEL
N#define GPIOTE_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> GPIOTE_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef GPIOTE_CONFIG_INFO_COLOR
N#define GPIOTE_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> GPIOTE_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef GPIOTE_CONFIG_DEBUG_COLOR
N#define GPIOTE_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> I2S_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef I2S_CONFIG_LOG_ENABLED
N#define I2S_CONFIG_LOG_ENABLED 0
N#endif
N// <o> I2S_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef I2S_CONFIG_LOG_LEVEL
N#define I2S_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> I2S_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef I2S_CONFIG_INFO_COLOR
N#define I2S_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> I2S_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef I2S_CONFIG_DEBUG_COLOR
N#define I2S_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> LPCOMP_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef LPCOMP_CONFIG_LOG_ENABLED
N#define LPCOMP_CONFIG_LOG_ENABLED 0
N#endif
N// <o> LPCOMP_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef LPCOMP_CONFIG_LOG_LEVEL
N#define LPCOMP_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> LPCOMP_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef LPCOMP_CONFIG_INFO_COLOR
N#define LPCOMP_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> LPCOMP_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef LPCOMP_CONFIG_DEBUG_COLOR
N#define LPCOMP_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> PDM_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef PDM_CONFIG_LOG_ENABLED
N#define PDM_CONFIG_LOG_ENABLED 0
N#endif
N// <o> PDM_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef PDM_CONFIG_LOG_LEVEL
N#define PDM_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> PDM_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PDM_CONFIG_INFO_COLOR
N#define PDM_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> PDM_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PDM_CONFIG_DEBUG_COLOR
N#define PDM_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> PPI_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef PPI_CONFIG_LOG_ENABLED
N#define PPI_CONFIG_LOG_ENABLED 0
N#endif
N// <o> PPI_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef PPI_CONFIG_LOG_LEVEL
N#define PPI_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> PPI_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PPI_CONFIG_INFO_COLOR
N#define PPI_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> PPI_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PPI_CONFIG_DEBUG_COLOR
N#define PPI_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> PWM_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef PWM_CONFIG_LOG_ENABLED
N#define PWM_CONFIG_LOG_ENABLED 0
N#endif
N// <o> PWM_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef PWM_CONFIG_LOG_LEVEL
N#define PWM_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> PWM_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PWM_CONFIG_INFO_COLOR
N#define PWM_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> PWM_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef PWM_CONFIG_DEBUG_COLOR
N#define PWM_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> QDEC_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef QDEC_CONFIG_LOG_ENABLED
N#define QDEC_CONFIG_LOG_ENABLED 0
N#endif
N// <o> QDEC_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef QDEC_CONFIG_LOG_LEVEL
N#define QDEC_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> QDEC_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef QDEC_CONFIG_INFO_COLOR
N#define QDEC_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> QDEC_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef QDEC_CONFIG_DEBUG_COLOR
N#define QDEC_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> RNG_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef RNG_CONFIG_LOG_ENABLED
N#define RNG_CONFIG_LOG_ENABLED 0
N#endif
N// <o> RNG_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef RNG_CONFIG_LOG_LEVEL
N#define RNG_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> RNG_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef RNG_CONFIG_INFO_COLOR
N#define RNG_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> RNG_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef RNG_CONFIG_DEBUG_COLOR
N#define RNG_CONFIG_DEBUG_COLOR 0
N#endif
N
N// <q> RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED  - Enables logging of random numbers.
N 
N
N#ifndef RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED
N#define RNG_CONFIG_RANDOM_NUMBER_LOG_ENABLED 0
N#endif
N
N// </e>
N
N// <e> RTC_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef RTC_CONFIG_LOG_ENABLED
N#define RTC_CONFIG_LOG_ENABLED 0
N#endif
N// <o> RTC_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef RTC_CONFIG_LOG_LEVEL
N#define RTC_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> RTC_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef RTC_CONFIG_INFO_COLOR
N#define RTC_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> RTC_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef RTC_CONFIG_DEBUG_COLOR
N#define RTC_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> SAADC_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef SAADC_CONFIG_LOG_ENABLED
N#define SAADC_CONFIG_LOG_ENABLED 0
N#endif
N// <o> SAADC_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef SAADC_CONFIG_LOG_LEVEL
N#define SAADC_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> SAADC_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SAADC_CONFIG_INFO_COLOR
N#define SAADC_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> SAADC_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SAADC_CONFIG_DEBUG_COLOR
N#define SAADC_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> SPIS_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef SPIS_CONFIG_LOG_ENABLED
N#define SPIS_CONFIG_LOG_ENABLED 0
N#endif
N// <o> SPIS_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef SPIS_CONFIG_LOG_LEVEL
N#define SPIS_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> SPIS_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SPIS_CONFIG_INFO_COLOR
N#define SPIS_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> SPIS_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SPIS_CONFIG_DEBUG_COLOR
N#define SPIS_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> SPI_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef SPI_CONFIG_LOG_ENABLED
N#define SPI_CONFIG_LOG_ENABLED 0
N#endif
N// <o> SPI_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef SPI_CONFIG_LOG_LEVEL
N#define SPI_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> SPI_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SPI_CONFIG_INFO_COLOR
N#define SPI_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> SPI_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SPI_CONFIG_DEBUG_COLOR
N#define SPI_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> SWI_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef SWI_CONFIG_LOG_ENABLED
N#define SWI_CONFIG_LOG_ENABLED 0
N#endif
N// <o> SWI_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef SWI_CONFIG_LOG_LEVEL
N#define SWI_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> SWI_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SWI_CONFIG_INFO_COLOR
N#define SWI_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> SWI_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef SWI_CONFIG_DEBUG_COLOR
N#define SWI_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> TIMER_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef TIMER_CONFIG_LOG_ENABLED
N#define TIMER_CONFIG_LOG_ENABLED 0
N#endif
N// <o> TIMER_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef TIMER_CONFIG_LOG_LEVEL
N#define TIMER_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> TIMER_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TIMER_CONFIG_INFO_COLOR
N#define TIMER_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> TIMER_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TIMER_CONFIG_DEBUG_COLOR
N#define TIMER_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> TWIS_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef TWIS_CONFIG_LOG_ENABLED
N#define TWIS_CONFIG_LOG_ENABLED 0
N#endif
N// <o> TWIS_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef TWIS_CONFIG_LOG_LEVEL
N#define TWIS_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> TWIS_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TWIS_CONFIG_INFO_COLOR
N#define TWIS_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> TWIS_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TWIS_CONFIG_DEBUG_COLOR
N#define TWIS_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> TWI_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef TWI_CONFIG_LOG_ENABLED
N#define TWI_CONFIG_LOG_ENABLED 0
N#endif
N// <o> TWI_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef TWI_CONFIG_LOG_LEVEL
N#define TWI_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> TWI_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TWI_CONFIG_INFO_COLOR
N#define TWI_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> TWI_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef TWI_CONFIG_DEBUG_COLOR
N#define TWI_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> UART_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef UART_CONFIG_LOG_ENABLED
N#define UART_CONFIG_LOG_ENABLED 0
N#endif
N// <o> UART_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef UART_CONFIG_LOG_LEVEL
N#define UART_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> UART_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef UART_CONFIG_INFO_COLOR
N#define UART_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> UART_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef UART_CONFIG_DEBUG_COLOR
N#define UART_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> USBD_CONFIG_LOG_ENABLED - Enable logging in the module
N//==========================================================
N#ifndef USBD_CONFIG_LOG_ENABLED
N#define USBD_CONFIG_LOG_ENABLED 0
N#endif
N// <o> USBD_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef USBD_CONFIG_LOG_LEVEL
N#define USBD_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> USBD_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef USBD_CONFIG_INFO_COLOR
N#define USBD_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> USBD_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef USBD_CONFIG_DEBUG_COLOR
N#define USBD_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> WDT_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef WDT_CONFIG_LOG_ENABLED
N#define WDT_CONFIG_LOG_ENABLED 0
N#endif
N// <o> WDT_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef WDT_CONFIG_LOG_LEVEL
N#define WDT_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> WDT_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef WDT_CONFIG_INFO_COLOR
N#define WDT_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> WDT_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef WDT_CONFIG_DEBUG_COLOR
N#define WDT_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <h> nrf_log in nRF_Libraries 
N
N//==========================================================
N// <e> APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED
N#define APP_USBD_CDC_ACM_CONFIG_LOG_ENABLED 0
N#endif
N// <o> APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL
N#define APP_USBD_CDC_ACM_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> APP_USBD_CDC_ACM_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef APP_USBD_CDC_ACM_CONFIG_INFO_COLOR
N#define APP_USBD_CDC_ACM_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR
N#define APP_USBD_CDC_ACM_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> APP_USBD_MSC_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef APP_USBD_MSC_CONFIG_LOG_ENABLED
N#define APP_USBD_MSC_CONFIG_LOG_ENABLED 0
N#endif
N// <o> APP_USBD_MSC_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef APP_USBD_MSC_CONFIG_LOG_LEVEL
N#define APP_USBD_MSC_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> APP_USBD_MSC_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef APP_USBD_MSC_CONFIG_INFO_COLOR
N#define APP_USBD_MSC_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> APP_USBD_MSC_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef APP_USBD_MSC_CONFIG_DEBUG_COLOR
N#define APP_USBD_MSC_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <q> MEM_MANAGER_ENABLE_LOGS  - Enable debug trace in the module.
N 
N
N#ifndef MEM_MANAGER_ENABLE_LOGS
N#define MEM_MANAGER_ENABLE_LOGS 0
N#endif
N
N// <e> NRF_BALLOC_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_BALLOC_CONFIG_LOG_ENABLED
N#define NRF_BALLOC_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_BALLOC_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_BALLOC_CONFIG_LOG_LEVEL
N#define NRF_BALLOC_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_BALLOC_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_BALLOC_CONFIG_INFO_COLOR
N#define NRF_BALLOC_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_BALLOC_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_BALLOC_CONFIG_DEBUG_COLOR
N#define NRF_BALLOC_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED
N#define NRF_CLI_BLE_UART_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL
N#define NRF_CLI_BLE_UART_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_CLI_BLE_UART_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_CLI_BLE_UART_CONFIG_INFO_COLOR
N#define NRF_CLI_BLE_UART_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR
N#define NRF_CLI_BLE_UART_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_CLI_UART_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_CLI_UART_CONFIG_LOG_ENABLED
N#define NRF_CLI_UART_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_CLI_UART_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_CLI_UART_CONFIG_LOG_LEVEL
N#define NRF_CLI_UART_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_CLI_UART_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_CLI_UART_CONFIG_INFO_COLOR
N#define NRF_CLI_UART_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_CLI_UART_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_CLI_UART_CONFIG_DEBUG_COLOR
N#define NRF_CLI_UART_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_MEMOBJ_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_MEMOBJ_CONFIG_LOG_ENABLED
N#define NRF_MEMOBJ_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_MEMOBJ_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_MEMOBJ_CONFIG_LOG_LEVEL
N#define NRF_MEMOBJ_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_MEMOBJ_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_MEMOBJ_CONFIG_INFO_COLOR
N#define NRF_MEMOBJ_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_MEMOBJ_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_MEMOBJ_CONFIG_DEBUG_COLOR
N#define NRF_MEMOBJ_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_PWR_MGMT_CONFIG_LOG_ENABLED - Enables logging in the module.
N//==========================================================
N#ifndef NRF_PWR_MGMT_CONFIG_LOG_ENABLED
N#define NRF_PWR_MGMT_CONFIG_LOG_ENABLED 0
N#endif
N// <o> NRF_PWR_MGMT_CONFIG_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_PWR_MGMT_CONFIG_LOG_LEVEL
N#define NRF_PWR_MGMT_CONFIG_LOG_LEVEL 3
N#endif
N
N// <o> NRF_PWR_MGMT_CONFIG_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_PWR_MGMT_CONFIG_INFO_COLOR
N#define NRF_PWR_MGMT_CONFIG_INFO_COLOR 0
N#endif
N
N// <o> NRF_PWR_MGMT_CONFIG_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_PWR_MGMT_CONFIG_DEBUG_COLOR
N#define NRF_PWR_MGMT_CONFIG_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_SDH_ANT_LOG_ENABLED - Enable logging in SoftDevice handler (ANT) module.
N//==========================================================
N#ifndef NRF_SDH_ANT_LOG_ENABLED
N#define NRF_SDH_ANT_LOG_ENABLED 0
N#endif
N// <o> NRF_SDH_ANT_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_SDH_ANT_LOG_LEVEL
N#define NRF_SDH_ANT_LOG_LEVEL 3
N#endif
N
N// <o> NRF_SDH_ANT_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_ANT_INFO_COLOR
N#define NRF_SDH_ANT_INFO_COLOR 0
N#endif
N
N// <o> NRF_SDH_ANT_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_ANT_DEBUG_COLOR
N#define NRF_SDH_ANT_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_SDH_BLE_LOG_ENABLED - Enable logging in SoftDevice handler (BLE) module.
N//==========================================================
N#ifndef NRF_SDH_BLE_LOG_ENABLED
N#define NRF_SDH_BLE_LOG_ENABLED 1
N#endif
N// <o> NRF_SDH_BLE_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_SDH_BLE_LOG_LEVEL
N#define NRF_SDH_BLE_LOG_LEVEL 3
N#endif
N
N// <o> NRF_SDH_BLE_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_BLE_INFO_COLOR
N#define NRF_SDH_BLE_INFO_COLOR 0
N#endif
N
N// <o> NRF_SDH_BLE_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_BLE_DEBUG_COLOR
N#define NRF_SDH_BLE_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_SDH_LOG_ENABLED - Enable logging in SoftDevice handler module.
N//==========================================================
N#ifndef NRF_SDH_LOG_ENABLED
N#define NRF_SDH_LOG_ENABLED 1
N#endif
N// <o> NRF_SDH_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_SDH_LOG_LEVEL
N#define NRF_SDH_LOG_LEVEL 3
N#endif
N
N// <o> NRF_SDH_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_INFO_COLOR
N#define NRF_SDH_INFO_COLOR 0
N#endif
N
N// <o> NRF_SDH_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_DEBUG_COLOR
N#define NRF_SDH_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// <e> NRF_SDH_SOC_LOG_ENABLED - Enable logging in SoftDevice handler (SoC) module.
N//==========================================================
N#ifndef NRF_SDH_SOC_LOG_ENABLED
N#define NRF_SDH_SOC_LOG_ENABLED 1
N#endif
N// <o> NRF_SDH_SOC_LOG_LEVEL  - Default Severity level
N 
N// <0=> Off 
N// <1=> Error 
N// <2=> Warning 
N// <3=> Info 
N// <4=> Debug 
N
N#ifndef NRF_SDH_SOC_LOG_LEVEL
N#define NRF_SDH_SOC_LOG_LEVEL 3
N#endif
N
N// <o> NRF_SDH_SOC_INFO_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_SOC_INFO_COLOR
N#define NRF_SDH_SOC_INFO_COLOR 0
N#endif
N
N// <o> NRF_SDH_SOC_DEBUG_COLOR  - ANSI escape code prefix.
N 
N// <0=> Default 
N// <1=> Black 
N// <2=> Red 
N// <3=> Green 
N// <4=> Yellow 
N// <5=> Blue 
N// <6=> Magenta 
N// <7=> Cyan 
N// <8=> White 
N
N#ifndef NRF_SDH_SOC_DEBUG_COLOR
N#define NRF_SDH_SOC_DEBUG_COLOR 0
N#endif
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// <h> nRF_Segger_RTT 
N
N//==========================================================
N// <h> segger_rtt - SEGGER RTT
N
N//==========================================================
N// <o> SEGGER_RTT_CONFIG_BUFFER_SIZE_UP - Size of upstream buffer. 
N// <i> Note that either @ref NRF_LOG_BACKEND_RTT_OUTPUT_BUFFER_SIZE
N// <i> or this value is actually used. It depends on which one is bigger.
N
N#ifndef SEGGER_RTT_CONFIG_BUFFER_SIZE_UP
N#define SEGGER_RTT_CONFIG_BUFFER_SIZE_UP 512
N#endif
N
N// <o> SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS - Size of upstream buffer. 
N#ifndef SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS
N#define SEGGER_RTT_CONFIG_MAX_NUM_UP_BUFFERS 2
N#endif
N
N// <o> SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN - Size of upstream buffer. 
N#ifndef SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN
N#define SEGGER_RTT_CONFIG_BUFFER_SIZE_DOWN 16
N#endif
N
N// <o> SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS - Size of upstream buffer. 
N#ifndef SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS
N#define SEGGER_RTT_CONFIG_MAX_NUM_DOWN_BUFFERS 2
N#endif
N
N// <o> SEGGER_RTT_CONFIG_DEFAULT_MODE  - RTT behavior if the buffer is full.
N 
N
N// <i> The following modes are supported:
N// <i> - SKIP  - Do not block, output nothing.
N// <i> - TRIM  - Do not block, output as much as fits.
N// <i> - BLOCK - Wait until there is space in the buffer.
N// <0=> SKIP 
N// <1=> TRIM 
N// <2=> BLOCK_IF_FIFO_FULL 
N
N#ifndef SEGGER_RTT_CONFIG_DEFAULT_MODE
N#define SEGGER_RTT_CONFIG_DEFAULT_MODE 0
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N// <h> nRF_SoftDevice 
N
N//==========================================================
N// <e> NRF_SDH_BLE_ENABLED - nrf_sdh_ble - SoftDevice BLE event handler
N//==========================================================
N#ifndef NRF_SDH_BLE_ENABLED
N#define NRF_SDH_BLE_ENABLED 1
N#endif
N// <h> BLE Stack configuration - Stack configuration parameters
N
N// <i> These values are not used directly by the SoftDevice handler but the application or other libraries might depend on them.
N// <i> Keep them up-to-date with the desired configuration.
N//==========================================================
N// <o> NRF_SDH_BLE_PERIPHERAL_LINK_COUNT - Maximum number of peripheral links. 
N#ifndef NRF_SDH_BLE_PERIPHERAL_LINK_COUNT
N#define NRF_SDH_BLE_PERIPHERAL_LINK_COUNT 1
N#endif
N
N// <o> NRF_SDH_BLE_CENTRAL_LINK_COUNT - Maximum number of central links. 
N#ifndef NRF_SDH_BLE_CENTRAL_LINK_COUNT
N#define NRF_SDH_BLE_CENTRAL_LINK_COUNT 0
N#endif
N
N// <o> NRF_SDH_BLE_TOTAL_LINK_COUNT - Maximum number of total concurrent connections using the default configuration. 
N#ifndef NRF_SDH_BLE_TOTAL_LINK_COUNT
N#define NRF_SDH_BLE_TOTAL_LINK_COUNT 1
N#endif
N
N// <o> NRF_SDH_BLE_GAP_EVENT_LENGTH - The time set aside for this connection on every connection interval in 1.25 ms units. 
N#ifndef NRF_SDH_BLE_GAP_EVENT_LENGTH
N#define NRF_SDH_BLE_GAP_EVENT_LENGTH 3
N#endif
N
N// <o> NRF_SDH_BLE_GATT_MAX_MTU_SIZE - Static maximum MTU size. 
N#ifndef NRF_SDH_BLE_GATT_MAX_MTU_SIZE
N#define NRF_SDH_BLE_GATT_MAX_MTU_SIZE 23
N#endif
N
N// <o> NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE - Attribute Table size in bytes. The size must be a multiple of 4. 
N#ifndef NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE
N#define NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE 1408
N#endif
N
N// <o> NRF_SDH_BLE_VS_UUID_COUNT - The number of vendor-specific UUIDs. 
N#ifndef NRF_SDH_BLE_VS_UUID_COUNT
N#define NRF_SDH_BLE_VS_UUID_COUNT 2
N#endif
N
N// <q> NRF_SDH_BLE_SERVICE_CHANGED  - Include the Service Changed characteristic in the Attribute Table.
N 
N
N#ifndef NRF_SDH_BLE_SERVICE_CHANGED
N#define NRF_SDH_BLE_SERVICE_CHANGED 1
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> BLE Observers - Observers and priority levels
N
N//==========================================================
N// <o> NRF_SDH_BLE_OBSERVER_PRIO_LEVELS - Total number of priority levels for BLE observers. 
N// <i> This setting configures the number of priority levels available for BLE event handlers.
N// <i> The priority level of a handler determines the order in which it receives events, with respect to other handlers.
N
N#ifndef NRF_SDH_BLE_OBSERVER_PRIO_LEVELS
N#define NRF_SDH_BLE_OBSERVER_PRIO_LEVELS 3
N#endif
N
N// <h> BLE Observers priorities - Invididual priorities
N
N//==========================================================
N// <o> BLE_ADV_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Advertising module.
N
N#ifndef BLE_ADV_BLE_OBSERVER_PRIO
N#define BLE_ADV_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_ANCS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Apple Notification Service Client.
N
N#ifndef BLE_ANCS_C_BLE_OBSERVER_PRIO
N#define BLE_ANCS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_ANS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Alert Notification Service Client.
N
N#ifndef BLE_ANS_C_BLE_OBSERVER_PRIO
N#define BLE_ANS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_BAS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Battery Service.
N
N#ifndef BLE_BAS_BLE_OBSERVER_PRIO
N#define BLE_BAS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_BAS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Battery Service Client.
N
N#ifndef BLE_BAS_C_BLE_OBSERVER_PRIO
N#define BLE_BAS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_BPS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Blood Pressure Service.
N
N#ifndef BLE_BPS_BLE_OBSERVER_PRIO
N#define BLE_BPS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_CONN_PARAMS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Connection parameters module.
N
N#ifndef BLE_CONN_PARAMS_BLE_OBSERVER_PRIO
N#define BLE_CONN_PARAMS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_CONN_STATE_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Connection State module.
N
N#ifndef BLE_CONN_STATE_BLE_OBSERVER_PRIO
N#define BLE_CONN_STATE_BLE_OBSERVER_PRIO 0
N#endif
N
N// <o> BLE_CSCS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Cycling Speed and Cadence Service.
N
N#ifndef BLE_CSCS_BLE_OBSERVER_PRIO
N#define BLE_CSCS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_CTS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Current Time Service Client.
N
N#ifndef BLE_CTS_C_BLE_OBSERVER_PRIO
N#define BLE_CTS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_DB_DISC_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Database Discovery module.
N
N#ifndef BLE_DB_DISC_BLE_OBSERVER_PRIO
N#define BLE_DB_DISC_BLE_OBSERVER_PRIO 1
N#endif
N
N// <o> BLE_DFU_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the DFU Service.
N
N#ifndef BLE_DFU_BLE_OBSERVER_PRIO
N#define BLE_DFU_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_GLS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Glucose Service.
N
N#ifndef BLE_GLS_BLE_OBSERVER_PRIO
N#define BLE_GLS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_HIDS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Human Interface Device Service.
N
N#ifndef BLE_HIDS_BLE_OBSERVER_PRIO
N#define BLE_HIDS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_HRS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Heart Rate Service.
N
N#ifndef BLE_HRS_BLE_OBSERVER_PRIO
N#define BLE_HRS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_HRS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Heart Rate Service Client.
N
N#ifndef BLE_HRS_C_BLE_OBSERVER_PRIO
N#define BLE_HRS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_HTS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Health Thermometer Service.
N
N#ifndef BLE_HTS_BLE_OBSERVER_PRIO
N#define BLE_HTS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_IAS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Immediate Alert Service.
N
N#ifndef BLE_IAS_BLE_OBSERVER_PRIO
N#define BLE_IAS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_IAS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Immediate Alert Service Client.
N
N#ifndef BLE_IAS_C_BLE_OBSERVER_PRIO
N#define BLE_IAS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_LBS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the LED Button Service.
N
N#ifndef BLE_LBS_BLE_OBSERVER_PRIO
N#define BLE_LBS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_LBS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the LED Button Service Client.
N
N#ifndef BLE_LBS_C_BLE_OBSERVER_PRIO
N#define BLE_LBS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_LLS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Link Loss Service.
N
N#ifndef BLE_LLS_BLE_OBSERVER_PRIO
N#define BLE_LLS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_LNS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Location Navigation Service.
N
N#ifndef BLE_LNS_BLE_OBSERVER_PRIO
N#define BLE_LNS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_NUS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the UART Service.
N
N#ifndef BLE_NUS_BLE_OBSERVER_PRIO
N#define BLE_NUS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_NUS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the UART Central Service.
N
N#ifndef BLE_NUS_C_BLE_OBSERVER_PRIO
N#define BLE_NUS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_OTS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Object transfer service.
N
N#ifndef BLE_OTS_BLE_OBSERVER_PRIO
N#define BLE_OTS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_OTS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Object transfer service client.
N
N#ifndef BLE_OTS_C_BLE_OBSERVER_PRIO
N#define BLE_OTS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_RSCS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Running Speed and Cadence Service.
N
N#ifndef BLE_RSCS_BLE_OBSERVER_PRIO
N#define BLE_RSCS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_RSCS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Running Speed and Cadence Client.
N
N#ifndef BLE_RSCS_C_BLE_OBSERVER_PRIO
N#define BLE_RSCS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BLE_TPS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the TX Power Service.
N
N#ifndef BLE_TPS_BLE_OBSERVER_PRIO
N#define BLE_TPS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> BSP_BTN_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Button Control module.
N
N#ifndef BSP_BTN_BLE_OBSERVER_PRIO
N#define BSP_BTN_BLE_OBSERVER_PRIO 1
N#endif
N
N// <o> NFC_BLE_PAIR_LIB_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the NFC pairing library.
N
N#ifndef NFC_BLE_PAIR_LIB_BLE_OBSERVER_PRIO
N#define NFC_BLE_PAIR_LIB_BLE_OBSERVER_PRIO 1
N#endif
N
N// <o> NRF_BLE_BMS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Bond Management Service.
N
N#ifndef NRF_BLE_BMS_BLE_OBSERVER_PRIO
N#define NRF_BLE_BMS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> NRF_BLE_CGMS_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Contiuon Glucose Monitoring Service.
N
N#ifndef NRF_BLE_CGMS_BLE_OBSERVER_PRIO
N#define NRF_BLE_CGMS_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> NRF_BLE_GATTS_C_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the GATT Service Client.
N
N#ifndef NRF_BLE_GATTS_C_BLE_OBSERVER_PRIO
N#define NRF_BLE_GATTS_C_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> NRF_BLE_GATT_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the GATT module.
N
N#ifndef NRF_BLE_GATT_BLE_OBSERVER_PRIO
N#define NRF_BLE_GATT_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> NRF_BLE_QWR_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Queued writes module.
N
N#ifndef NRF_BLE_QWR_BLE_OBSERVER_PRIO
N#define NRF_BLE_QWR_BLE_OBSERVER_PRIO 2
N#endif
N
N// <o> PM_BLE_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the Peer Manager module.
N
N#ifndef PM_BLE_OBSERVER_PRIO
N#define PM_BLE_OBSERVER_PRIO 2
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N
N// </e>
N
N// <e> NRF_SDH_ENABLED - nrf_sdh - SoftDevice handler
N//==========================================================
N#ifndef NRF_SDH_ENABLED
N#define NRF_SDH_ENABLED 1
N#endif
N// <h> Dispatch model 
N
N// <i> This setting configures how Stack events are dispatched to the application.
N//==========================================================
N// <o> NRF_SDH_DISPATCH_MODEL
N 
N
N// <i> NRF_SDH_DISPATCH_MODEL_INTERRUPT: SoftDevice events are passed to the application from the interrupt context.
N// <i> NRF_SDH_DISPATCH_MODEL_APPSH: SoftDevice events are scheduled using @ref app_scheduler.
N// <i> NRF_SDH_DISPATCH_MODEL_POLLING: SoftDevice events are to be fetched manually.
N// <0=> NRF_SDH_DISPATCH_MODEL_INTERRUPT 
N// <1=> NRF_SDH_DISPATCH_MODEL_APPSH 
N// <2=> NRF_SDH_DISPATCH_MODEL_POLLING 
N
N#ifndef NRF_SDH_DISPATCH_MODEL
N#define NRF_SDH_DISPATCH_MODEL 0
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> Clock - SoftDevice clock configuration
N
N//==========================================================
N// <o> NRF_SDH_CLOCK_LF_SRC  - SoftDevice clock source.
N 
N// <0=> NRF_CLOCK_LF_SRC_RC 
N// <1=> NRF_CLOCK_LF_SRC_XTAL 
N// <2=> NRF_CLOCK_LF_SRC_SYNTH 
N
N#ifndef NRF_SDH_CLOCK_LF_SRC
N#define NRF_SDH_CLOCK_LF_SRC 1
N#endif
N
N// <o> NRF_SDH_CLOCK_LF_RC_CTIV - SoftDevice calibration timer interval. 
N#ifndef NRF_SDH_CLOCK_LF_RC_CTIV
N#define NRF_SDH_CLOCK_LF_RC_CTIV 0
N#endif
N
N// <o> NRF_SDH_CLOCK_LF_RC_TEMP_CTIV - SoftDevice calibration timer interval under constant temperature. 
N// <i> How often (in number of calibration intervals) the RC oscillator shall be calibrated
N// <i>  if the temperature has not changed.
N
N#ifndef NRF_SDH_CLOCK_LF_RC_TEMP_CTIV
N#define NRF_SDH_CLOCK_LF_RC_TEMP_CTIV 0
N#endif
N
N// <o> NRF_SDH_CLOCK_LF_XTAL_ACCURACY  - External crystal clock accuracy used in the LL to compute timing windows.
N 
N// <0=> NRF_CLOCK_LF_XTAL_ACCURACY_250_PPM 
N// <1=> NRF_CLOCK_LF_XTAL_ACCURACY_500_PPM 
N// <2=> NRF_CLOCK_LF_XTAL_ACCURACY_150_PPM 
N// <3=> NRF_CLOCK_LF_XTAL_ACCURACY_100_PPM 
N// <4=> NRF_CLOCK_LF_XTAL_ACCURACY_75_PPM 
N// <5=> NRF_CLOCK_LF_XTAL_ACCURACY_50_PPM 
N// <6=> NRF_CLOCK_LF_XTAL_ACCURACY_30_PPM 
N// <7=> NRF_CLOCK_LF_XTAL_ACCURACY_20_PPM 
N
N#ifndef NRF_SDH_CLOCK_LF_XTAL_ACCURACY
N#define NRF_SDH_CLOCK_LF_XTAL_ACCURACY 7
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> SDH Observers - Observers and priority levels
N
N//==========================================================
N// <o> NRF_SDH_REQ_OBSERVER_PRIO_LEVELS - Total number of priority levels for request observers. 
N// <i> This setting configures the number of priority levels available for the SoftDevice request event handlers.
N// <i> The priority level of a handler determines the order in which it receives events, with respect to other handlers.
N
N#ifndef NRF_SDH_REQ_OBSERVER_PRIO_LEVELS
N#define NRF_SDH_REQ_OBSERVER_PRIO_LEVELS 2
N#endif
N
N// <o> NRF_SDH_STATE_OBSERVER_PRIO_LEVELS - Total number of priority levels for state observers. 
N// <i> This setting configures the number of priority levels available for the SoftDevice state event handlers.
N// <i> The priority level of a handler determines the order in which it receives events, with respect to other handlers.
N
N#ifndef NRF_SDH_STATE_OBSERVER_PRIO_LEVELS
N#define NRF_SDH_STATE_OBSERVER_PRIO_LEVELS 2
N#endif
N
N// <o> NRF_SDH_STACK_OBSERVER_PRIO_LEVELS - Total number of priority levels for stack event observers. 
N// <i> This setting configures the number of priority levels available for the SoftDevice stack event handlers (ANT, BLE, SoC).
N// <i> The priority level of a handler determines the order in which it receives events, with respect to other handlers.
N
N#ifndef NRF_SDH_STACK_OBSERVER_PRIO_LEVELS
N#define NRF_SDH_STACK_OBSERVER_PRIO_LEVELS 2
N#endif
N
N
N// <h> State Observers priorities - Invididual priorities
N
N//==========================================================
N// <o> CLOCK_CONFIG_STATE_OBSERVER_PRIO  
N// <i> Priority with which state events are dispatched to the Clock driver.
N
N#ifndef CLOCK_CONFIG_STATE_OBSERVER_PRIO
N#define CLOCK_CONFIG_STATE_OBSERVER_PRIO 0
N#endif
N
N// <o> POWER_CONFIG_STATE_OBSERVER_PRIO  
N// <i> Priority with which state events are dispatched to the Power driver.
N
N#ifndef POWER_CONFIG_STATE_OBSERVER_PRIO
N#define POWER_CONFIG_STATE_OBSERVER_PRIO 0
N#endif
N
N// <o> RNG_CONFIG_STATE_OBSERVER_PRIO  
N// <i> Priority with which state events are dispatched to this module.
N
N#ifndef RNG_CONFIG_STATE_OBSERVER_PRIO
N#define RNG_CONFIG_STATE_OBSERVER_PRIO 0
N#endif
N
N// </h> 
N//==========================================================
N
N// <h> Stack Event Observers priorities - Invididual priorities
N
N//==========================================================
N// <o> NRF_SDH_ANT_STACK_OBSERVER_PRIO  
N// <i> This setting configures the priority with which ANT events are processed with respect to other events coming from the stack.
N// <i> Modify this setting if you need to have ANT events dispatched before or after other stack events, such as BLE or SoC.
N// <i> Zero is the highest priority.
N
N#ifndef NRF_SDH_ANT_STACK_OBSERVER_PRIO
N#define NRF_SDH_ANT_STACK_OBSERVER_PRIO 0
N#endif
N
N// <o> NRF_SDH_BLE_STACK_OBSERVER_PRIO  
N// <i> This setting configures the priority with which BLE events are processed with respect to other events coming from the stack.
N// <i> Modify this setting if you need to have BLE events dispatched before or after other stack events, such as ANT or SoC.
N// <i> Zero is the highest priority.
N
N#ifndef NRF_SDH_BLE_STACK_OBSERVER_PRIO
N#define NRF_SDH_BLE_STACK_OBSERVER_PRIO 0
N#endif
N
N// <o> NRF_SDH_SOC_STACK_OBSERVER_PRIO  
N// <i> This setting configures the priority with which SoC events are processed with respect to other events coming from the stack.
N// <i> Modify this setting if you need to have SoC events dispatched before or after other stack events, such as ANT or BLE.
N// <i> Zero is the highest priority.
N
N#ifndef NRF_SDH_SOC_STACK_OBSERVER_PRIO
N#define NRF_SDH_SOC_STACK_OBSERVER_PRIO 0
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N
N// </e>
N
N// <e> NRF_SDH_SOC_ENABLED - nrf_sdh_soc - SoftDevice SoC event handler
N//==========================================================
N#ifndef NRF_SDH_SOC_ENABLED
N#define NRF_SDH_SOC_ENABLED 1
N#endif
N// <h> SoC Observers - Observers and priority levels
N
N//==========================================================
N// <o> NRF_SDH_SOC_OBSERVER_PRIO_LEVELS - Total number of priority levels for SoC observers. 
N// <i> This setting configures the number of priority levels available for the SoC event handlers.
N// <i> The priority level of a handler determines the order in which it receives events, with respect to other handlers.
N
N#ifndef NRF_SDH_SOC_OBSERVER_PRIO_LEVELS
N#define NRF_SDH_SOC_OBSERVER_PRIO_LEVELS 2
N#endif
N
N// <h> SoC Observers priorities - Invididual priorities
N
N//==========================================================
N// <o> BLE_ADV_SOC_OBSERVER_PRIO  
N// <i> Priority with which SoC events are dispatched to the Advertising module.
N
N#ifndef BLE_ADV_SOC_OBSERVER_PRIO
N#define BLE_ADV_SOC_OBSERVER_PRIO 1
N#endif
N
N// <o> BLE_DFU_SOC_OBSERVER_PRIO  
N// <i> Priority with which BLE events are dispatched to the DFU Service.
N
N#ifndef BLE_DFU_SOC_OBSERVER_PRIO
N#define BLE_DFU_SOC_OBSERVER_PRIO 1
N#endif
N
N// <o> CLOCK_CONFIG_SOC_OBSERVER_PRIO  
N// <i> Priority with which SoC events are dispatched to the Clock driver.
N
N#ifndef CLOCK_CONFIG_SOC_OBSERVER_PRIO
N#define CLOCK_CONFIG_SOC_OBSERVER_PRIO 0
N#endif
N
N// <o> POWER_CONFIG_SOC_OBSERVER_PRIO  
N// <i> Priority with which SoC events are dispatched to the Power driver.
N
N#ifndef POWER_CONFIG_SOC_OBSERVER_PRIO
N#define POWER_CONFIG_SOC_OBSERVER_PRIO 0
N#endif
N
N// </h> 
N//==========================================================
N
N// </h> 
N//==========================================================
N
N
N// </e>
N
N// </h> 
N//==========================================================
N
N// <<< end of configuration section >>>
N#endif //SDK_CONFIG_H
N
L 41 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.c" 2
N
N#if NRF_FSTORAGE_ENABLED
X#if 1
N
N#include "nrf_fstorage.h"
L 1 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.h" 1
N/**
N * Copyright (c) 2016 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N#ifndef NRF_FSTORAGE_H__
N#define NRF_FSTORAGE_H__
N
N/**
N * @file
N *
N * @defgroup nrf_fstorage Flash storage (fstorage)
N * @ingroup app_common
N * @{
N *
N * @brief   Flash abstraction library that provides basic read, write, and erase operations.
N *
N * @details The fstorage library can be implemented in different ways. Two implementations are provided:
N * - The @ref nrf_fstorage_sd implements flash access through the SoftDevice.
N * - The @ref nrf_fstorage_nvmc implements flash access through the non-volatile memory controller.
N *
N * You can select the implementation that should be used independently for each instance of fstorage.
N */
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 60 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.h" 2
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 61 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.h" 2
N#include "sdk_errors.h"
L 1 "..\..\..\..\..\..\components\libraries\util\sdk_errors.h" 1
N/**
N * Copyright (c) 2013 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N/**@file
N *
N * @defgroup sdk_error SDK Error codes
N * @{
N * @ingroup app_common
N * @{
N * @details Error codes are 32-bit unsigned integers with the most significant 16-bit reserved for
N *          identifying the module where the error occurred while the least least significant LSB
N *          are used to provide the cause or nature of error. Each module is assigned a 16-bit
N *          unsigned integer. Which it will use to identify all errors that occurred in it. 16-bit
N *          LSB range is with module id as the MSB in the 32-bit error code is reserved for the
N *          module. As an example, if 0x8800 identifies a certain SDK module, all values from
N *          0x88000000 - 0x8800FFFF are reserved for this module.
N *          It should be noted that common error reasons have been assigned values to make it
N *          possible to decode error reason easily. As an example, lets module uninitialized has
N *          been assigned an error code 0x000A0. Then, if application encounters an error code
N *          0xZZZZ00A0, it knows that it accessing a certain module without initializing it.
N *          Apart from this, each module is allowed to define error codes that are not covered by
N *          the common ones, however, these values are defined in a range that does not conflict
N *          with common error values. For module, specific error however, it is possible that the
N *          same error value is used by two different modules to indicated errors of very different
N *          nature. If error is already defined by the NRF common error codes, these are reused.
N *          A range is reserved for application as well, it can use this range for defining
N *          application specific errors.
N *
N * @note Success code, NRF_SUCCESS, does not include any module identifier.
N
N */
N
N#ifndef SDK_ERRORS_H__
N#define SDK_ERRORS_H__
N
N#include <stdint.h>
N#include "nrf_error.h"
L 1 "..\..\..\..\..\..\components\softdevice\s132\headers\nrf_error.h" 1
N/*
N * Copyright (c) 2014 - 2017, Nordic Semiconductor ASA
N * All rights reserved.
N *
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N *
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N *
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N *
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N *
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N *
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N *
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N */
N
N /**
N  @defgroup nrf_error SoftDevice Global Error Codes
N  @{
N
N  @brief Global Error definitions
N*/
N
N/* Header guard */
N#ifndef NRF_ERROR_H__
N#define NRF_ERROR_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/** @defgroup NRF_ERRORS_BASE Error Codes Base number definitions
N * @{ */
N#define NRF_ERROR_BASE_NUM      (0x0)       ///< Global error base
N#define NRF_ERROR_SDM_BASE_NUM  (0x1000)    ///< SDM error base
N#define NRF_ERROR_SOC_BASE_NUM  (0x2000)    ///< SoC error base
N#define NRF_ERROR_STK_BASE_NUM  (0x3000)    ///< STK error base
N/** @} */
N
N#define NRF_SUCCESS                           (NRF_ERROR_BASE_NUM + 0)  ///< Successful command
N#define NRF_ERROR_SVC_HANDLER_MISSING         (NRF_ERROR_BASE_NUM + 1)  ///< SVC handler is missing
N#define NRF_ERROR_SOFTDEVICE_NOT_ENABLED      (NRF_ERROR_BASE_NUM + 2)  ///< SoftDevice has not been enabled
N#define NRF_ERROR_INTERNAL                    (NRF_ERROR_BASE_NUM + 3)  ///< Internal Error
N#define NRF_ERROR_NO_MEM                      (NRF_ERROR_BASE_NUM + 4)  ///< No Memory for operation
N#define NRF_ERROR_NOT_FOUND                   (NRF_ERROR_BASE_NUM + 5)  ///< Not found
N#define NRF_ERROR_NOT_SUPPORTED               (NRF_ERROR_BASE_NUM + 6)  ///< Not supported
N#define NRF_ERROR_INVALID_PARAM               (NRF_ERROR_BASE_NUM + 7)  ///< Invalid Parameter
N#define NRF_ERROR_INVALID_STATE               (NRF_ERROR_BASE_NUM + 8)  ///< Invalid state, operation disallowed in this state
N#define NRF_ERROR_INVALID_LENGTH              (NRF_ERROR_BASE_NUM + 9)  ///< Invalid Length
N#define NRF_ERROR_INVALID_FLAGS               (NRF_ERROR_BASE_NUM + 10) ///< Invalid Flags
N#define NRF_ERROR_INVALID_DATA                (NRF_ERROR_BASE_NUM + 11) ///< Invalid Data
N#define NRF_ERROR_DATA_SIZE                   (NRF_ERROR_BASE_NUM + 12) ///< Invalid Data size
N#define NRF_ERROR_TIMEOUT                     (NRF_ERROR_BASE_NUM + 13) ///< Operation timed out
N#define NRF_ERROR_NULL                        (NRF_ERROR_BASE_NUM + 14) ///< Null Pointer
N#define NRF_ERROR_FORBIDDEN                   (NRF_ERROR_BASE_NUM + 15) ///< Forbidden Operation
N#define NRF_ERROR_INVALID_ADDR                (NRF_ERROR_BASE_NUM + 16) ///< Bad Memory Address
N#define NRF_ERROR_BUSY                        (NRF_ERROR_BASE_NUM + 17) ///< Busy
N#define NRF_ERROR_CONN_COUNT                  (NRF_ERROR_BASE_NUM + 18) ///< Maximum connection count exceeded.
N#define NRF_ERROR_RESOURCES                   (NRF_ERROR_BASE_NUM + 19) ///< Not enough resources for operation
N
N#ifdef __cplusplus
S}
N#endif
N#endif // NRF_ERROR_H__
N
N/**
N  @}
N*/
L 74 "..\..\..\..\..\..\components\libraries\util\sdk_errors.h" 2
N#include "sdk_config.h"
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/**
N * @defgroup sdk_err_base Base defined for SDK Modules
N * @{
N */
N#define NRF_ERROR_SDK_ERROR_BASE         (NRF_ERROR_BASE_NUM + 0x8000)   /**< Base value defined for SDK module identifiers. */
N#define NRF_ERROR_SDK_COMMON_ERROR_BASE  (NRF_ERROR_BASE_NUM + 0x0080)   /**< Base error value to be used for SDK error values. */
N/** @} */
N
N/**
N * @defgroup sdk_module_codes Codes reserved as identification for module where the error occurred.
N * @{
N */
N#define NRF_ERROR_MEMORY_MANAGER_ERR_BASE   (0x8100)
N#define NRF_ERROR_PERIPH_DRIVERS_ERR_BASE   (0x8200)
N#define NRF_ERROR_GAZELLE_ERR_BASE          (0x8300)
N/** @} */
N
N
N/**
N * @defgroup sdk_iot_errors Codes reserved as identification for IoT errors.
N * @{
N */
N#define NRF_ERROR_IOT_ERR_BASE_START        (0xA000)
N#define NRF_ERROR_IOT_ERR_BASE_STOP         (0xAFFF)
N/** @} */
N
N
N/**
N * @defgroup sdk_common_errors Codes reserved as identification for common errors.
N * @{
N */
N#define NRF_ERROR_MODULE_NOT_INITIALZED      (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0000)
N#define NRF_ERROR_MUTEX_INIT_FAILED          (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0001)
N#define NRF_ERROR_MUTEX_LOCK_FAILED          (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0002)
N#define NRF_ERROR_MUTEX_UNLOCK_FAILED        (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0003)
N#define NRF_ERROR_MUTEX_COND_INIT_FAILED     (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0004)
N#define NRF_ERROR_MODULE_ALREADY_INITIALIZED (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0005)
N#define NRF_ERROR_STORAGE_FULL               (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0006)
N#define NRF_ERROR_API_NOT_IMPLEMENTED        (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0010)
N#define NRF_ERROR_FEATURE_NOT_ENABLED        (NRF_ERROR_SDK_COMMON_ERROR_BASE + 0x0011)
N/** @} */
N
N
N/**
N * @defgroup drv_specific_errors Error / status codes specific to drivers.
N * @{
N */
N#define NRF_ERROR_DRV_TWI_ERR_OVERRUN              (NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0000)
N#define NRF_ERROR_DRV_TWI_ERR_ANACK                (NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0001)
N#define NRF_ERROR_DRV_TWI_ERR_DNACK                (NRF_ERROR_PERIPH_DRIVERS_ERR_BASE + 0x0002)
N/** @} */
N
N/**
N * @brief API Result.
N *
N * @details Indicates success or failure of an API procedure. In case of failure, a comprehensive
N *          error code indicating cause or reason for failure is provided.
N *
N *          Though called an API result, it could used in Asynchronous notifications callback along
N *          with asynchronous callback as event result. This mechanism is employed when an event
N *          marks the end of procedure initiated using API. API result, in this case, will only be
N *          an indicative of whether the procedure has been requested successfully.
N */
Ntypedef uint32_t ret_code_t;
N
N/** @} */
N/** @} */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // SDK_ERRORS_H__
L 62 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.h" 2
N#include "nrf_section.h"
L 1 "..\..\..\..\..\..\components\libraries\experimental_section_vars\nrf_section.h" 1
N/**
N * Copyright (c) 2016 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N#ifndef NRF_SECTION_H__
N#define NRF_SECTION_H__
N
N#include "nordic_common.h"
L 1 "..\..\..\..\..\..\components\libraries\util\nordic_common.h" 1
N/**
N * Copyright (c) 2008 - 2017, Nordic Semiconductor ASA
N * 
N * All rights reserved.
N * 
N * Redistribution and use in source and binary forms, with or without modification,
N * are permitted provided that the following conditions are met:
N * 
N * 1. Redistributions of source code must retain the above copyright notice, this
N *    list of conditions and the following disclaimer.
N * 
N * 2. Redistributions in binary form, except as embedded into a Nordic
N *    Semiconductor ASA integrated circuit in a product or a software update for
N *    such product, must reproduce the above copyright notice, this list of
N *    conditions and the following disclaimer in the documentation and/or other
N *    materials provided with the distribution.
N * 
N * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
N *    contributors may be used to endorse or promote products derived from this
N *    software without specific prior written permission.
N * 
N * 4. This software, with or without modification, must only be used with a
N *    Nordic Semiconductor ASA integrated circuit.
N * 
N * 5. Any software provided in binary form under this license must not be reverse
N *    engineered, decompiled, modified and/or disassembled.
N * 
N * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
N * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
N * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
N * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
N * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
N * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
N * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
N * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N * 
N */
N/** @file
N * @brief Common defines and macros for firmware developed by Nordic Semiconductor.
N */
N
N#ifndef NORDIC_COMMON_H__
N#define NORDIC_COMMON_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/**
N * @brief Check if selected module is enabled
N *
N * This is save function for driver enable checking.
N * Correct from Lint point of view (not using default of undefined value).
N *
N * Usage:
N * @code
N   #if NRF_MODULE_ENABLED(UART)
N   ...
N   #endif
N * @endcode
N *
N * @param module The module name.
N *
N * @retval 1 The macro <module>_ENABLE is defined and is non-zero.
N * @retval 0 The macro <module>_ENABLE is not defined or it equals zero.
N *
N * @note
N * This macro intentionally does not implement second expansion level.
N * The name of the module to be checked has to be given directly as a parameter.
N * And given parameter would be connected with @c _ENABLED postfix directly
N * without evaluating its value.
N */
N//lint -emacro(491,NRF_MODULE_ENABLED) // Suppers warning 491 "non-standard use of 'defined' preprocessor operator"
N#define NRF_MODULE_ENABLED(module) \
N    ((defined(module ## _ENABLED) && (module ## _ENABLED)) ? 1 : 0)
X#define NRF_MODULE_ENABLED(module)     ((defined(module ## _ENABLED) && (module ## _ENABLED)) ? 1 : 0)
N
N/** The upper 8 bits of a 32 bit value */
N//lint -emacro(572,MSB_32) // Suppress warning 572 "Excessive shift value"
N#define MSB_32(a) (((a) & 0xFF000000) >> 24)
N/** The lower 8 bits (of a 32 bit value) */
N#define LSB_32(a) ((a) & 0x000000FF)
N
N/** The upper 8 bits of a 16 bit value */
N//lint -emacro(572,MSB_16) // Suppress warning 572 "Excessive shift value"
N#define MSB_16(a) (((a) & 0xFF00) >> 8)
N/** The lower 8 bits (of a 16 bit value) */
N#define LSB_16(a) ((a) & 0x00FF)
N
N/** Leaves the minimum of the two 32-bit arguments */
N/*lint -emacro(506, MIN) */ /* Suppress "Constant value Boolean */
N#define MIN(a, b) ((a) < (b) ? (a) : (b))
N/** Leaves the maximum of the two 32-bit arguments */
N/*lint -emacro(506, MAX) */ /* Suppress "Constant value Boolean */
N#define MAX(a, b) ((a) < (b) ? (b) : (a))
N
N/**@brief Concatenates two parameters.
N *
N * It realizes two level expansion to make it sure that all the parameters
N * are actually expanded before gluing them together.
N *
N * @param p1 First parameter to concatenating
N * @param p2 Second parameter to concatenating
N *
N * @return Two parameters glued together.
N *         They have to create correct C mnemonic in other case
N *         preprocessor error would be generated.
N *
N * @sa CONCAT_3
N */
N#define CONCAT_2(p1, p2)      CONCAT_2_(p1, p2)
N/** Auxiliary macro used by @ref CONCAT_2 */
N#define CONCAT_2_(p1, p2)     p1##p2
N
N/**@brief Concatenates three parameters.
N *
N * It realizes two level expansion to make it sure that all the parameters
N * are actually expanded before gluing them together.
N *
N * @param p1 First parameter to concatenating
N * @param p2 Second parameter to concatenating
N * @param p3 Third parameter to concatenating
N *
N * @return Three parameters glued together.
N *         They have to create correct C mnemonic in other case
N *         preprocessor error would be generated.
N *
N * @sa CONCAT_2
N */
N#define CONCAT_3(p1, p2, p3)  CONCAT_3_(p1, p2, p3)
N/** Auxiliary macro used by @ref CONCAT_3 */
N#define CONCAT_3_(p1, p2, p3) p1##p2##p3
N
N#define STRINGIFY_(val) #val
N/** Converts a macro argument into a character constant.
N */
N#define STRINGIFY(val)  STRINGIFY_(val)
N
N/** Counts number of elements inside the array
N */
N#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))
N
N/**@brief Set a bit in the uint32 word.
N *
N * @param[in] W  Word whose bit is being set.
N * @param[in] B  Bit number in the word to be set.
N */
N#define SET_BIT(W, B)  ((W) |= (uint32_t)(1U << (B)))
N
N
N/**@brief Clears a bit in the uint32 word.
N *
N * @param[in] W   Word whose bit is to be cleared.
N * @param[in] B   Bit number in the word to be cleared.
N */
N#define CLR_BIT(W, B) ((W) &= (~(uint32_t)(1U << (B))))
N
N
N/**@brief Checks if a bit is set.
N *
N * @param[in] W   Word whose bit is to be checked.
N * @param[in] B   Bit number in the word to be checked.
N *
N * @retval 1 if bit is set.
N * @retval 0 if bit is not set.
N */
N#define IS_SET(W, B) (((W) >> (B)) & 1)
N
N#define BIT_0 0x01 /**< The value of bit 0 */
N#define BIT_1 0x02 /**< The value of bit 1 */
N#define BIT_2 0x04 /**< The value of bit 2 */
N#define BIT_3 0x08 /**< The value of bit 3 */
N#define BIT_4 0x10 /**< The value of bit 4 */
N#define BIT_5 0x20 /**< The value of bit 5 */
N#define BIT_6 0x40 /**< The value of bit 6 */
N#define BIT_7 0x80 /**< The value of bit 7 */
N#define BIT_8 0x0100 /**< The value of bit 8 */
N#define BIT_9 0x0200 /**< The value of bit 9 */
N#define BIT_10 0x0400 /**< The value of bit 10 */
N#define BIT_11 0x0800 /**< The value of bit 11 */
N#define BIT_12 0x1000 /**< The value of bit 12 */
N#define BIT_13 0x2000 /**< The value of bit 13 */
N#define BIT_14 0x4000 /**< The value of bit 14 */
N#define BIT_15 0x8000 /**< The value of bit 15 */
N#define BIT_16 0x00010000 /**< The value of bit 16 */
N#define BIT_17 0x00020000 /**< The value of bit 17 */
N#define BIT_18 0x00040000 /**< The value of bit 18 */
N#define BIT_19 0x00080000 /**< The value of bit 19 */
N#define BIT_20 0x00100000 /**< The value of bit 20 */
N#define BIT_21 0x00200000 /**< The value of bit 21 */
N#define BIT_22 0x00400000 /**< The value of bit 22 */
N#define BIT_23 0x00800000 /**< The value of bit 23 */
N#define BIT_24 0x01000000 /**< The value of bit 24 */
N#define BIT_25 0x02000000 /**< The value of bit 25 */
N#define BIT_26 0x04000000 /**< The value of bit 26 */
N#define BIT_27 0x08000000 /**< The value of bit 27 */
N#define BIT_28 0x10000000 /**< The value of bit 28 */
N#define BIT_29 0x20000000 /**< The value of bit 29 */
N#define BIT_30 0x40000000 /**< The value of bit 30 */
N#define BIT_31 0x80000000 /**< The value of bit 31 */
N
N#define UNUSED_VARIABLE(X)  ((void)(X))
N#define UNUSED_PARAMETER(X) UNUSED_VARIABLE(X)
N#define UNUSED_RETURN_VALUE(X) UNUSED_VARIABLE(X)
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NORDIC_COMMON_H__
L 44 "..\..\..\..\..\..\components\libraries\experimental_section_vars\nrf_section.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/**
N * @defgroup section_vars Section variables
N * @ingroup app_common
N * @{
N *
N * @brief Section variables.
N */
N
N//lint -save -e27 -esym(526,*)
N
N#if defined(__ICCARM__)
X#if 0L
S// Enable IAR language extensions
S#pragma language=extended
N#endif
N
N/**@brief   Macro for obtaining the address of the beginning of a section.
N *
N * param[in]    section_name    Name of the section.
N * @hideinitializer
N */
N#if defined(__CC_ARM)
X#if 1L
N#define NRF_SECTION_START_ADDR(section_name)       &CONCAT_2(section_name, $$Base)
N
N#elif defined(__GNUC__)
S#define NRF_SECTION_START_ADDR(section_name)       &CONCAT_2(__start_, section_name)
S
S#elif defined(__ICCARM__)
S#define NRF_SECTION_START_ADDR(section_name)       __section_begin(STRINGIFY(section_name))
N#endif
N
N
N/**@brief    Macro for obtaining the address of the end of a section.
N *
N * @param[in]   section_name    Name of the section.
N * @hideinitializer
N */
N#if defined(__CC_ARM)
X#if 1L
N#define NRF_SECTION_END_ADDR(section_name)         &CONCAT_2(section_name, $$Limit)
N
N#elif defined(__GNUC__)
S#define NRF_SECTION_END_ADDR(section_name)         &CONCAT_2(__stop_, section_name)
S
S#elif defined(__ICCARM__)
S#define NRF_SECTION_END_ADDR(section_name)         __section_end(STRINGIFY(section_name))
N#endif
N
N
N/**@brief   Macro for retrieving the length of a given section, in bytes.
N *
N * @param[in]   section_name    Name of the section.
N * @hideinitializer
N */
N#define NRF_SECTION_LENGTH(section_name)                        \
N    ((size_t)NRF_SECTION_END_ADDR(section_name) -               \
N     (size_t)NRF_SECTION_START_ADDR(section_name))
X#define NRF_SECTION_LENGTH(section_name)                            ((size_t)NRF_SECTION_END_ADDR(section_name) -                    (size_t)NRF_SECTION_START_ADDR(section_name))
N
N
N/**@brief   Macro for creating a section.
N *
N * @param[in]   section_name    Name of the section.
N * @param[in]   data_type       Data type of the variables to be registered in the section.
N *
N * @warning Data type must be word aligned to prevent padding.
N * @hideinitializer
N */
N#if defined(__CC_ARM)
X#if 1L
N#define NRF_SECTION_DEF(section_name, data_type)                \
N    extern data_type * CONCAT_2(section_name, $$Base);          \
N    extern void      * CONCAT_2(section_name, $$Limit)
X#define NRF_SECTION_DEF(section_name, data_type)                    extern data_type * CONCAT_2(section_name, $$Base);              extern void      * CONCAT_2(section_name, $$Limit)
N
N#elif defined(__GNUC__)
S#define NRF_SECTION_DEF(section_name, data_type)                \
S    extern data_type * CONCAT_2(__start_, section_name);        \
S    extern void      * CONCAT_2(__stop_,  section_name)
X#define NRF_SECTION_DEF(section_name, data_type)                    extern data_type * CONCAT_2(__start_, section_name);            extern void      * CONCAT_2(__stop_,  section_name)
S
S#elif defined(__ICCARM__)
S#define NRF_SECTION_DEF(section_name, data_type)                \
S    _Pragma(STRINGIFY(section = STRINGIFY(section_name)));
X#define NRF_SECTION_DEF(section_name, data_type)                    _Pragma(STRINGIFY(section = STRINGIFY(section_name)));
S
N#endif
N
N
N/**@brief   Macro for declaring a variable and registering it in a section.
N *
N * @details Declares a variable and registers it in a named section. This macro ensures that the
N *          variable is not stripped away when using optimizations.
N *
N * @note The order in which variables are placed in a section is dependent on the order in
N *       which the linker script encounters the variables during linking.
N *
N * @param[in]   section_name    Name of the section.
N * @param[in]   section_var     Variable to register in the given section.
N * @hideinitializer
N */
N#if defined(__CC_ARM)
X#if 1L
N#define NRF_SECTION_ITEM_REGISTER(section_name, section_var) \
N    section_var __attribute__ ((section(STRINGIFY(section_name)))) __attribute__((used))
X#define NRF_SECTION_ITEM_REGISTER(section_name, section_var)     section_var __attribute__ ((section(STRINGIFY(section_name)))) __attribute__((used))
N
N#elif defined(__GNUC__)
S#define NRF_SECTION_ITEM_REGISTER(section_name, section_var) \
S    section_var __attribute__ ((section("." STRINGIFY(section_name)))) __attribute__((used))
X#define NRF_SECTION_ITEM_REGISTER(section_name, section_var)     section_var __attribute__ ((section("." STRINGIFY(section_name)))) __attribute__((used))
S
S#elif defined(__ICCARM__)
S#define NRF_SECTION_ITEM_REGISTER(section_name, section_var) \
S    __root section_var @ STRINGIFY(section_name)
X#define NRF_SECTION_ITEM_REGISTER(section_name, section_var)     __root section_var @ STRINGIFY(section_name)
N#endif
N
N
N/**@brief   Macro for retrieving a variable from a section.
N *
N * @warning     The stored symbol can only be resolved using this macro if the
N *              type of the data is word aligned. The operation of acquiring
N *              the stored symbol relies on the size of the stored type. No
N *              padding can exist in the named section in between individual
N *              stored items or this macro will fail.
N *
N * @param[in]   section_name    Name of the section.
N * @param[in]   data_type       Data type of the variable.
N * @param[in]   i               Index of the variable in section.
N * @hideinitializer
N */
N#define NRF_SECTION_ITEM_GET(section_name, data_type, i) \
N    ((data_type*)NRF_SECTION_START_ADDR(section_name) + (i))
X#define NRF_SECTION_ITEM_GET(section_name, data_type, i)     ((data_type*)NRF_SECTION_START_ADDR(section_name) + (i))
N
N
N/**@brief   Macro for getting the number of variables in a section.
N *
N * @param[in]   section_name    Name of the section.
N * @param[in]   data_type       Data type of the variables in the section.
N * @hideinitializer
N */
N#define NRF_SECTION_ITEM_COUNT(section_name, data_type) \
N    NRF_SECTION_LENGTH(section_name) / sizeof(data_type)
X#define NRF_SECTION_ITEM_COUNT(section_name, data_type)     NRF_SECTION_LENGTH(section_name) / sizeof(data_type)
N
N/** @} */
N
N//lint -restore
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NRF_SECTION_H__
L 63 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.h" 2
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N
N/**@brief   Macro for defining an fstorage instance.
N *
N * @details Users of fstorage must define an instance variable by using this macro.
N *          Each instance variable contains an API implementation, and additional information such
N *          as the program and erase units. The instance variables are placed in the "fs_data"
N *          section of the binary.
N *
N * @param[in]   inst    A definition of an @ref nrf_fstorage_t variable.
N */
N#define NRF_FSTORAGE_DEF(inst)          NRF_SECTION_ITEM_REGISTER(fs_data, inst)
N
N/**@brief   Macro for retrieving an fstorage instance. */
N#define NRF_FSTORAGE_INSTANCE_GET(i)    NRF_SECTION_ITEM_GET(fs_data, nrf_fstorage_t, (i))
N
N/**@brief   Macro for retrieving the total number of fstorage instances. */
N#define NRF_FSTORAGE_INSTANCE_CNT       NRF_SECTION_ITEM_COUNT(fs_data, nrf_fstorage_t)
N
N
N/**@brief   Event IDs. */
Ntypedef enum
N{
N    NRF_FSTORAGE_EVT_READ_RESULT,
N    NRF_FSTORAGE_EVT_WRITE_RESULT,  //!< Event for @ref nrf_fstorage_write.
N    NRF_FSTORAGE_EVT_ERASE_RESULT   //!< Event for @ref nrf_fstorage_erase.
N} nrf_fstorage_evt_id_t;
N
N
N/**@brief   An fstorage event. */
Ntypedef struct
N{
N    nrf_fstorage_evt_id_t   id;         //!< The event ID (see @ref nrf_fstorage_evt_id_t).
N    ret_code_t              result;     //!< Result of the operation.
N    uint32_t                addr;       //!< Address at which the operation was performed.
N    uint32_t                len;        //!< Length of the operation.
N    void                  * p_param;    //!< User-defined parameter passed to the event handler.
N} nrf_fstorage_evt_t;
N
N
N/**@brief   Event handler function prototype.
N *
N * @param[in]   p_evt   The event.
N */
Ntypedef void (*nrf_fstorage_evt_handler_t)(nrf_fstorage_evt_t * p_evt);
N
N
N/* Necessary forward declaration. */
Nstruct nrf_fstorage_api_t;
N
N
N/**@brief   Information about the implementation and the flash peripheral. */
Ntypedef struct
N{
N    uint32_t erase_unit;        //!< Size of a flash page (in bytes). A flash page is the smallest unit that can be erased.
N    uint32_t program_unit;      //!< Size of the smallest programmable unit (in bytes).
N    // uint32_t erased_value;      //!< Value contained in erased flash.
N    // uint8_t  synchronous  : 1;  //!< True if write and erase operations are synchronous.
N} const nrf_fstorage_info_t;
N
N
N/**@brief   An fstorage instance.
N *
N * @details Use the @ref NRF_FSTORAGE_DEF macro to define an fstorage instance.
N *          Each instance must have a unique memory buffer, which is implementation-dependent and
N *          defined in the implementation header file.
N *
N *          An instance contains information about the flash, such as the program and erase units,
N *          and implementation-specific functionality. In addition, every instance must specify the
N *          boundaries of the flash in which the instance is allowed to operate. These boundaries
N *          must be set manually by the user. They provide additional safety
N *          when performing flash operations. However, they do not provide any form of automatic
N *          partitioning of the flash.
N */
Ntypedef struct
N{
N    /**@brief   The API implementation used by this instance. */
N    struct nrf_fstorage_api_t * p_api;
N
N    /**@brief   Information about the implementation functionality and the flash peripheral. */
N    nrf_fstorage_info_t * p_flash_info;
N
N    /**@brief   The event handler function.
N     *
N     * @details If set to NULL, no events will be sent.
N     */
N    nrf_fstorage_evt_handler_t evt_handler;
N
N    /**@brief   The beginning of the flash space on which this fstorage instance should operate.
N     *          All flash operations must be within the address specified in
N     *          this field and @ref end_addr.
N     *
N     * @details This field must be set manually.
N     */
N    uint32_t start_addr;
N
N    /**@brief   The last address (exclusive) of flash on which this fstorage instance should operate.
N     *          All flash operations must be within the address specified in
N     *          this field and @ref start_addr.
N     *
N     * @details   This field must be set manually.
N     */
N    uint32_t end_addr;
N} nrf_fstorage_t;
N
N
N/**@brief Functions provided by the API implementation. */
Ntypedef struct
N{
N    /**@brief Function for initializing the flash peripheral. */
N    ret_code_t (*init)(nrf_fstorage_t * p_fs, void * p_param);
N    /**@brief Function for uninitializing the flash peripheral. */
N    ret_code_t (*uninit)(nrf_fstorage_t * p_fs, void * p_param);
N    /**@brief Function for reading data from flash. */
N    ret_code_t (*read)(nrf_fstorage_t const * p_fs, uint32_t src, void * p_dest, uint32_t len);
N    /**@brief Function for writing bytes to flash. */
N    ret_code_t (*write)(nrf_fstorage_t const * p_fs, uint32_t dest, void const * p_src, uint32_t len, void * p_param);
N    /**@brief Function for erasing flash pages. */
N    ret_code_t (*erase)(nrf_fstorage_t const * p_fs, uint32_t addr, uint32_t len, void * p_param);
N    /**@brief Function for checking if there are any pending flash operations. */
N    bool (*is_busy)(nrf_fstorage_t const * p_fs);
X    _Bool (*is_busy)(nrf_fstorage_t const * p_fs);
N} const nrf_fstorage_api_t;
N
N
N/**@brief   Function for initializing fstorage.
N *
N * @param[in]   p_fs        The fstorage instance to initialize.
N * @param[in]   p_api       The API implementation to use.
N * @param[in]   p_param     An optional parameter to pass to the implementation-specific API call.
N *
N * @retval  NRF_SUCCESS         If initialization was successful.
N * @retval  NRF_ERROR_NULL      If @p p_fs or @p p_api or the @p p_mem field in @p p_fs is NULL.
N * @retval  NRF_ERROR_INTERNAL  If another error occurred.
N */
Nret_code_t nrf_fstorage_init(nrf_fstorage_t     * p_fs,
N                             nrf_fstorage_api_t * p_api,
N                             void               * p_param);
N
N
N/**@brief   Function for uninitializing an fstorage instance.
N *
N * @param[in]   p_fs        The fstorage instance to uninitialize.
N * @param[in]   p_param     An optional parameter to pass to the implementation-specific API call.
N *
N * @retval  NRF_SUCCESS                 If uninitialization was successful.
N * @retval  NRF_ERROR_NULL              If @p p_fs is NULL.
N * @retval  NRF_ERROR_INVALID_STATE     If the module is not initialized.
N * @retval  NRF_ERROR_INTERNAL          If another error occurred.
N */
Nret_code_t nrf_fstorage_uninit(nrf_fstorage_t * p_fs, void * p_param);
N
N
N/**@brief   Function for reading data from flash.
N *
N * @details This function copies @p len bytes from @p addr to @p p_dest.
N *
N * @param[in]   p_fs    The fstorage instance.
N * @param[in]   addr    Address in flash where to read from.
N * @param[in]   p_dest  Buffer where the data should be copied.
N * @param[in]   len     Length of the data to be copied (in bytes).
N *
N * @retval  NRF_SUCCESS                 If the operation was successful.
N * @retval  NRF_ERROR_NULL              If @p p_fs or @p p_dest is NULL.
N * @retval  NRF_ERROR_INVALID_STATE     If the module is not initialized.
N * @retval  NRF_ERROR_INVALID_LENGTH    If @p len is zero or otherwise invalid.
N * @retval  NRF_ERROR_INVALID_ADDR      If the address @p addr is outside the flash memory
N *                                      boundaries specified in @p p_fs, or if it is unaligned.
N */
Nret_code_t nrf_fstorage_read(nrf_fstorage_t const * p_fs,
N                             uint32_t               addr,
N                             void                 * p_dest,
N                             uint32_t               len);
N
N
N/**@brief   Function for writing data to flash.
N *
N * @details This function writes @p len bytes from @p p_src to @p dest.
N *
N * When using @ref nrf_fstorage_sd, the data is written by several calls to @ref sd_flash_write if
N * the length of the data exceeds @ref NRF_FSTORAGE_SD_MAX_WRITE_SIZE bytes.
N * Only one event is sent upon completion.
N *
N * @note The data to be written to flash must be kept in memory until the operation has
N *       terminated and an event is received.
N *
N * @param[in]   p_fs        The fstorage instance.
N * @param[in]   dest        Address in flash memory where to write the data.
N * @param[in]   p_src       Data to be written.
N * @param[in]   len         Length of the data (in bytes).
N * @param[in]   p_param     User-defined parameter passed to the event handler (may be NULL).
N *
N * @retval  NRF_SUCCESS                 If the operation was accepted.
N * @retval  NRF_ERROR_NULL              If @p p_fs or @p p_src is NULL.
N * @retval  NRF_ERROR_INVALID_STATE     If the module is not initialized.
N * @retval  NRF_ERROR_INVALID_LENGTH    If @p len is zero or not a multiple of the program unit,
N *                                      or if it is otherwise invalid.
N * @retval  NRF_ERROR_INVALID_ADDR      If the address @p dest is outside the flash memory
N *                                      boundaries specified in @p p_fs, or if it is unaligned.
N * @retval  NRF_ERROR_NO_MEM            If no memory is available to accept the operation.
N *                                      When using the @ref nrf_fstorage_sd, this error
N *                                      indicates that the internal queue of operations is full.
N */
Nret_code_t nrf_fstorage_write(nrf_fstorage_t const * p_fs,
N                              uint32_t               dest,
N                              void           const * p_src,
N                              uint32_t               len,
N                              void                 * p_param);
N
N
N/**@brief   Function for erasing flash pages.
N *
N * @details This function erases @p len pages starting from the page at address @p page_addr.
N *          The erase operation must be initiated on a page boundary.
N *
N * @param[in]   p_fs        The fstorage instance.
N * @param[in]   page_addr   Address of the page to erase.
N * @param[in]   len         Number of pages to erase.
N * @param[in]   p_param     User-defined parameter passed to the event handler (may be NULL).
N *
N * @retval  NRF_SUCCESS                 If the operation was accepted.
N * @retval  NRF_ERROR_NULL              If @p p_fs is NULL.
N * @retval  NRF_ERROR_INVALID_STATE     If the module is not initialized.
N * @retval  NRF_ERROR_INVALID_LENGTH    If @p len is zero.
N * @retval  NRF_ERROR_INVALID_ADDR      If the address @p page_addr is outside the flash memory
N *                                      boundaries specified in @p p_fs, or if it is unaligned.
N * @retval  NRF_ERROR_NO_MEM            If no memory is available to accept the operation.
N *                                      When using the @ref nrf_fstorage_sd, this error
N *                                      indicates that the internal queue of operations is full.
N */
Nret_code_t nrf_fstorage_erase(nrf_fstorage_t const * p_fs,
N                              uint32_t               page_addr,
N                              uint32_t               len,
N                              void                 * p_param);
N
N
N/**@brief   Function for querying the status of fstorage.
N *
N * @details An uninitialized instance of fstorage is treated as not busy.
N *
N * @param[in]   p_fs    The fstorage instance. Pass NULL to query all instances.
N *
N * @returns If @p p_fs is @c NULL, this function returns true if any fstorage instance is busy or false otherwise.
N * @returns If @p p_fs is not @c NULL, this function returns true if the fstorage instance is busy or false otherwise.
N */
N bool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs);
X _Bool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs);
N
N/** @} */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif // NRF_FSTORAGE_H__
L 45 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.c" 2
N#include <stddef.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stddef.h" 1
N/* stddef.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.1.4 */
N
N/* Copyright (C) ARM Ltd., 1999
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright 1991 ARM Limited. All rights reserved.             */
N/* version 0.05 */
N
N/*
N * The following types and macros are defined in several headers referred to in
N * the descriptions of the functions declared in that header. They are also
N * defined in this header file.
N */
N
N#ifndef __stddef_h
N#define __stddef_h
N#define __ARMCLIB_VERSION 5060019
N
N  #ifndef __STDDEF_DECLS
N  #define __STDDEF_DECLS
N    #undef __CLIBNS
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS ::std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if __sizeof_ptr == 8
X#if 4 == 8
S  typedef signed long ptrdiff_t;
N#else
N  typedef signed int ptrdiff_t;
N#endif
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  #if __sizeof_ptr == 8
X  #if 4 == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
N  #else
N    typedef unsigned int size_t;   /* see <stddef.h> */
N  #endif
N#elif !defined(__size_t)
S  #define __size_t 1
S  #if __sizeof_ptr == 8
S    typedef unsigned long size_t;   /* see <stddef.h> */
S  #else
S    typedef unsigned int size_t;   /* see <stddef.h> */
S  #endif
S   /* the unsigned integral type of the result of the sizeof operator. */
N#endif
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N  /* unconditional in non-strict C for consistency of debug info */
N    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X    #if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #else
N      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
N    #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S    #if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
S      typedef unsigned int wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #else
S      typedef unsigned short wchar_t; /* also in <stdlib.h> and <inttypes.h> */
S    #endif
S   /*
S    * An integral type whose range of values can represent distinct codes for
S    * all members of the largest extended character set specified among the
S    * supported locales; the null character shall have the code value zero and
S    * each member of the basic character set shall have a code value when used
S    * as the lone character in an integer character constant.
S    */
N  #endif
N#endif
N
N#undef NULL  /* others (e.g. <stdio.h>) also define */
N#define NULL 0
N   /* null pointer constant. */
N
N#ifdef __clang__
S  #define offsetof(t, d) __builtin_offsetof(t, d)
N#else
N  /* EDG uses __INTADDR__ to avoid errors when strict */
N  #define offsetof(t, memb) ((__CLIBNS size_t)__INTADDR__(&(((t *)0)->memb)))
N#endif
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 201112L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X#if !0L || (1L && 201112L <= 199901L) || (0L && 201103L <= __cplusplus)
N  typedef long double max_align_t;
N#endif
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDDEF_DECLS */
N
N
N  #ifdef __cplusplus
S    #ifndef __STDDEF_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::ptrdiff_t;
S      #if !defined(__STRICT_ANSI__) || (defined(__cplusplus) && 201103L <= __cplusplus)
S        using ::std::max_align_t;
S      #endif
S    #endif 
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stddef.h */
N
L 46 "..\..\..\..\..\..\components\libraries\fstorage\nrf_fstorage.c" 2
N#include <stdint.h>
N#include "sdk_errors.h"
N#include "nrf_section.h"
N
N
N/* Create the section "fs_data". */
NNRF_SECTION_DEF(fs_data, nrf_fstorage_t);
Xextern nrf_fstorage_t * fs_data$$Base; extern void * fs_data$$Limit;
N
Nstatic bool addr_within_bounds(nrf_fstorage_t const * p_fs, uint32_t addr, uint32_t len);
Xstatic _Bool addr_within_bounds(nrf_fstorage_t const * p_fs, uint32_t addr, uint32_t len);
Nstatic bool addr_is_aligned32(uint32_t addr);
Xstatic _Bool addr_is_aligned32(uint32_t addr);
N
N
Nret_code_t nrf_fstorage_init(nrf_fstorage_t     * p_fs,
N                             nrf_fstorage_api_t * p_api,
N                             void               * p_param)
N{
N    if ((p_fs == NULL) || (p_api == NULL))
X    if ((p_fs == 0) || (p_api == 0))
N    {
N        return NRF_ERROR_NULL;
X        return ((0x0) + 14);
N    }
N
N    p_fs->p_api = (struct nrf_fstorage_api_t *) p_api;
N
N    return ((nrf_fstorage_api_t*)p_fs->p_api)->init(p_fs, p_param);
N}
N
N
Nret_code_t nrf_fstorage_uninit(nrf_fstorage_t * p_fs,
N                               void           * p_param)
N{
N    ret_code_t rc;
N
N    if (p_fs == NULL)
X    if (p_fs == 0)
N    {
N        return NRF_ERROR_NULL;
X        return ((0x0) + 14);
N    }
N
N    if (p_fs->p_api == NULL)
X    if (p_fs->p_api == 0)
N    {
N        return NRF_ERROR_INVALID_STATE;
X        return ((0x0) + 8);
N    }
N
N    rc = ((nrf_fstorage_api_t *)p_fs->p_api)->uninit(p_fs, p_param);
N
N    /* Uninitialize the API. */
N    p_fs->p_api        = NULL;
X    p_fs->p_api        = 0;
N    p_fs->p_flash_info = NULL;
X    p_fs->p_flash_info = 0;
N
N    return rc;
N}
N
N
Nret_code_t nrf_fstorage_read(nrf_fstorage_t const * p_fs,
N                             uint32_t               src,
N                             void                 * p_dest,
N                             uint32_t               len)
N{
N    if ((p_fs == NULL) || (p_dest == NULL))
X    if ((p_fs == 0) || (p_dest == 0))
N    {
N        return NRF_ERROR_NULL;
X        return ((0x0) + 14);
N    }
N
N    if (p_fs->p_api == NULL)
X    if (p_fs->p_api == 0)
N    {
N        return NRF_ERROR_INVALID_STATE;
X        return ((0x0) + 8);
N    }
N
N    if (len == 0)
N    {
N        return NRF_ERROR_INVALID_LENGTH;
X        return ((0x0) + 9);
N    }
N
N    /* Source addres must be word-aligned. */
N    if (    !addr_is_aligned32(src)
N        ||  !addr_within_bounds(p_fs, src, len))
N    {
N        return NRF_ERROR_INVALID_ADDR;
X        return ((0x0) + 16);
N    }
N
N    return ((nrf_fstorage_api_t *)p_fs->p_api)->read(p_fs, src, p_dest, len);
N}
N
N
Nret_code_t nrf_fstorage_write(nrf_fstorage_t const * p_fs,
N                              uint32_t               dest,
N                              void           const * p_src,
N                              uint32_t               len,
N                              void                 * p_context)
N{
N    if ((p_fs == NULL) || (p_src == NULL))
X    if ((p_fs == 0) || (p_src == 0))
N    {
N        return NRF_ERROR_NULL;
X        return ((0x0) + 14);
N    }
N
N    if (p_fs->p_api == NULL)
X    if (p_fs->p_api == 0)
N    {
N        return NRF_ERROR_INVALID_STATE;
X        return ((0x0) + 8);
N    }
N
N    /* Length must be a multiple of the program unit. */
N    if ((len == 0) || ((len % p_fs->p_flash_info->program_unit) != 0))
N    {
N        return NRF_ERROR_INVALID_LENGTH;
X        return ((0x0) + 9);
N    }
N
N    /* Source and destination addresses must be word-aligned. */
N    if (    !addr_is_aligned32(dest)
N        ||  !addr_is_aligned32((uint32_t)p_src)
N        ||  !addr_within_bounds(p_fs, dest, len))
N    {
N        return NRF_ERROR_INVALID_ADDR;
X        return ((0x0) + 16);
N    }
N
N    return ((nrf_fstorage_api_t *)p_fs->p_api)->write(p_fs, dest, p_src, len, p_context);
N}
N
N
Nret_code_t nrf_fstorage_erase(nrf_fstorage_t const * p_fs,
N                              uint32_t               page_addr,
N                              uint32_t               len,
N                              void                 * p_context)
N{
N    if (p_fs == NULL)
X    if (p_fs == 0)
N    {
N        return NRF_ERROR_NULL;
X        return ((0x0) + 14);
N    }
N
N    if (p_fs->p_api == NULL)
X    if (p_fs->p_api == 0)
N    {
N        return NRF_ERROR_INVALID_STATE;
X        return ((0x0) + 8);
N    }
N
N    if (len == 0)
N    {
N        return NRF_ERROR_INVALID_LENGTH;
X        return ((0x0) + 9);
N    }
N
N    /* Address must be aligned to a page boundary. */
N    if (    ((page_addr & (p_fs->p_flash_info->erase_unit - 1)) != 0)
N        ||  !addr_within_bounds(p_fs, page_addr, (len * p_fs->p_flash_info->erase_unit)))
N    {
N        return NRF_ERROR_INVALID_ADDR;
X        return ((0x0) + 16);
N    }
N
N    return ((nrf_fstorage_api_t *)p_fs->p_api)->erase(p_fs, page_addr, len, p_context);
N}
N
N
Nbool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs)
X_Bool nrf_fstorage_is_busy(nrf_fstorage_t const * p_fs)
N{
N    nrf_fstorage_api_t const * p_api;
N
N    /* If a NULL instance is provided, return true if any instance is busy.
N     * Uninitialized instances are considered not busy. */
N    if ((p_fs == NULL) || (p_fs->p_api == NULL))
X    if ((p_fs == 0) || (p_fs->p_api == 0))
N    {
N        for (uint32_t i = 0; i < NRF_FSTORAGE_INSTANCE_CNT; i++)
X        for (uint32_t i = 0; i < ((size_t)&fs_data$$Limit - (size_t)&fs_data$$Base) / sizeof(nrf_fstorage_t); i++)
N        {
N            p_fs  = NRF_FSTORAGE_INSTANCE_GET(i);   /* cannot be NULL. */
X            p_fs  = ((nrf_fstorage_t*)&fs_data$$Base + ((i)));    
N            p_api = (nrf_fstorage_api_t*)p_fs->p_api;
N
N            if (p_api != NULL)
X            if (p_api != 0)
N            {
N                /* p_api->is_busy() cannot be NULL. */
N                if (p_api->is_busy(p_fs))
N                {
N                    return true;
X                    return 1;
N                }
N            }
N        }
N
N        return false;
X        return 0;
N    }
N
N    p_api = (nrf_fstorage_api_t*)p_fs->p_api;
N
N    return p_api->is_busy(p_fs);
N}
N
N
Nstatic bool addr_within_bounds(nrf_fstorage_t const * p_fs,
Xstatic _Bool addr_within_bounds(nrf_fstorage_t const * p_fs,
N                               uint32_t               addr,
N                               uint32_t               len)
N{
N    return ((addr           >= p_fs->start_addr) &&
N            (addr + len - 1 <= p_fs->end_addr));
N}
N
N
Nstatic bool addr_is_aligned32(uint32_t addr)
Xstatic _Bool addr_is_aligned32(uint32_t addr)
N{
N    return !(addr & 0x03);
N}
N
N
N#endif // NRF_FSTORAGE_ENABLED
