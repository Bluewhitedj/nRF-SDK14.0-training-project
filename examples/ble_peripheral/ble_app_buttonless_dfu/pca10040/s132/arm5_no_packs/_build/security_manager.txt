; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\security_manager.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\security_manager.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\security_manager.crf ..\..\..\..\..\..\components\ble\peer_manager\security_manager.c]
                          THUMB

                          AREA ||i.events_send_from_err_code||, CODE, READONLY, ALIGN=1

                  events_send_from_err_code PROC
;;;141    
;;;142    static void events_send_from_err_code(uint16_t conn_handle, ret_code_t err_code)
000000  b53e              PUSH     {r1-r5,lr}
;;;143    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;144         if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_BUSY))
000006  b1dc              CBZ      r4,|L1.64|
000008  2c11              CMP      r4,#0x11
00000a  d019              BEQ      |L1.64|
;;;145         {
;;;146            sm_evt_t evt =
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
000012  9002              STR      r0,[sp,#8]
000014  f8ad5002          STRH     r5,[sp,#2]
000018  9401              STR      r4,[sp,#4]
;;;147            {
;;;148                .conn_handle = conn_handle,
;;;149                .params = {.error_unexpected = {
;;;150                    .error = err_code
;;;151                }}
;;;152            };
;;;153            if (err_code == NRF_ERROR_TIMEOUT)
00001a  2c0d              CMP      r4,#0xd
00001c  d103              BNE      |L1.38|
;;;154            {
;;;155                evt.evt_id = SM_EVT_ERROR_SMP_TIMEOUT;
00001e  200b              MOVS     r0,#0xb
000020  f88d0000          STRB     r0,[sp,#0]
000024  e008              B        |L1.56|
                  |L1.38|
;;;156            }
;;;157            else if (err_code == NRF_ERROR_STORAGE_FULL)
000026  2c86              CMP      r4,#0x86
000028  d103              BNE      |L1.50|
;;;158            {
;;;159                evt.evt_id = SM_EVT_ERROR_NO_MEM;
00002a  200a              MOVS     r0,#0xa
00002c  f88d0000          STRB     r0,[sp,#0]
000030  e002              B        |L1.56|
                  |L1.50|
;;;160            }
;;;161            else
;;;162            {
;;;163                evt.evt_id = SM_EVT_ERROR_UNEXPECTED;
000032  2009              MOVS     r0,#9
000034  f88d0000          STRB     r0,[sp,#0]
                  |L1.56|
;;;164            }
;;;165            evt_send(&evt);
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       evt_send
;;;166         }
00003e  bf00              NOP      
                  |L1.64|
;;;167    }
000040  bd3e              POP      {r1-r5,pc}
;;;168    
                          ENDP


                          AREA ||i.evt_send||, CODE, READONLY, ALIGN=2

                  evt_send PROC
;;;79     
;;;80     static void evt_send(sm_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
000002  4605              MOV      r5,r0
;;;82         for (uint32_t i = 0; i < SM_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L2.20|
                  |L2.8|
;;;83         {
;;;84             m_evt_handlers[i](p_event);
000008  4804              LDR      r0,|L2.28|
00000a  f8501024          LDR      r1,[r0,r4,LSL #2]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;82
                  |L2.20|
000014  2c00              CMP      r4,#0                 ;82
000016  d0f7              BEQ      |L2.8|
;;;85         }
;;;86     }
000018  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      m_evt_handlers

                          AREA ||i.flag_id_init||, CODE, READONLY, ALIGN=1

                  flag_id_init PROC
;;;392     */
;;;393    static void flag_id_init(ble_conn_state_user_flag_id_t * p_flag_id)
000000  b510              PUSH     {r4,lr}
;;;394    {
000002  4604              MOV      r4,r0
;;;395        if (*p_flag_id == BLE_CONN_STATE_USER_FLAG_INVALID)
000004  7820              LDRB     r0,[r4,#0]
000006  2818              CMP      r0,#0x18
000008  d102              BNE      |L3.16|
;;;396        {
;;;397            *p_flag_id = ble_conn_state_user_flag_acquire();
00000a  f7fffffe          BL       ble_conn_state_user_flag_acquire
00000e  7020              STRB     r0,[r4,#0]
                  |L3.16|
;;;398        }
;;;399    }
000010  bd10              POP      {r4,pc}
;;;400    
                          ENDP


                          AREA ||i.flags_set_from_err_code||, CODE, READONLY, ALIGN=2

                  flags_set_from_err_code PROC
;;;88     
;;;89     static void flags_set_from_err_code(uint16_t conn_handle, ret_code_t err_code, bool params_reply)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;90     {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;91         bool flag_value_flash_full = false;
00000a  2700              MOVS     r7,#0
;;;92         bool flag_value_busy       = false;
00000c  46b8              MOV      r8,r7
;;;93     
;;;94         if (    (err_code == NRF_ERROR_STORAGE_FULL)
00000e  2c86              CMP      r4,#0x86
000010  d003              BEQ      |L4.26|
;;;95              || (err_code == NRF_ERROR_BUSY)
000012  2c11              CMP      r4,#0x11
000014  d001              BEQ      |L4.26|
;;;96              || (err_code == NRF_SUCCESS))
000016  2c00              CMP      r4,#0
000018  d135              BNE      |L4.134|
                  |L4.26|
;;;97         {
;;;98             if ((err_code == NRF_ERROR_STORAGE_FULL))
00001a  2c86              CMP      r4,#0x86
00001c  d103              BNE      |L4.38|
;;;99             {
;;;100                flag_value_busy       = false;
00001e  f04f0800          MOV      r8,#0
;;;101                flag_value_flash_full = true;
000022  2701              MOVS     r7,#1
000024  e009              B        |L4.58|
                  |L4.38|
;;;102            }
;;;103            else if (err_code == NRF_ERROR_BUSY)
000026  2c11              CMP      r4,#0x11
000028  d103              BNE      |L4.50|
;;;104            {
;;;105                flag_value_busy       = true;
00002a  f04f0801          MOV      r8,#1
;;;106                flag_value_flash_full = false;
00002e  2700              MOVS     r7,#0
000030  e003              B        |L4.58|
                  |L4.50|
;;;107            }
;;;108            else if (err_code == NRF_SUCCESS)
000032  b914              CBNZ     r4,|L4.58|
;;;109            {
;;;110                flag_value_busy       = false;
000034  f04f0800          MOV      r8,#0
;;;111                flag_value_flash_full = false;
000038  2700              MOVS     r7,#0
                  |L4.58|
;;;112            }
;;;113    
;;;114            if (params_reply)
00003a  b1c5              CBZ      r5,|L4.110|
;;;115            {
;;;116                ble_conn_state_user_flag_set(conn_handle,
00003c  463a              MOV      r2,r7
00003e  4813              LDR      r0,|L4.140|
000040  7801              LDRB     r1,[r0,#0]  ; m_flag_params_reply_pending_flash_full
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       ble_conn_state_user_flag_set
;;;117                                             m_flag_params_reply_pending_flash_full,
;;;118                                             flag_value_flash_full);
;;;119                ble_conn_state_user_flag_set(conn_handle,
000048  4642              MOV      r2,r8
00004a  4811              LDR      r0,|L4.144|
00004c  7801              LDRB     r1,[r0,#0]  ; m_flag_params_reply_pending_busy
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       ble_conn_state_user_flag_set
;;;120                                             m_flag_params_reply_pending_busy,
;;;121                                             flag_value_busy);
;;;122                ble_conn_state_user_flag_set(conn_handle,
000054  2200              MOVS     r2,#0
000056  480f              LDR      r0,|L4.148|
000058  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_flash_full
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       ble_conn_state_user_flag_set
;;;123                                             m_flag_link_secure_pending_flash_full,
;;;124                                             false);
;;;125                ble_conn_state_user_flag_set(conn_handle,
000060  2200              MOVS     r2,#0
000062  480d              LDR      r0,|L4.152|
000064  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_busy
000066  4630              MOV      r0,r6
000068  f7fffffe          BL       ble_conn_state_user_flag_set
00006c  e00b              B        |L4.134|
                  |L4.110|
;;;126                                             m_flag_link_secure_pending_busy,
;;;127                                             false);
;;;128            }
;;;129            else
;;;130            {
;;;131                ble_conn_state_user_flag_set(conn_handle,
00006e  463a              MOV      r2,r7
000070  4808              LDR      r0,|L4.148|
000072  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_flash_full
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       ble_conn_state_user_flag_set
;;;132                                             m_flag_link_secure_pending_flash_full,
;;;133                                             flag_value_flash_full);
;;;134                ble_conn_state_user_flag_set(conn_handle,
00007a  4642              MOV      r2,r8
00007c  4806              LDR      r0,|L4.152|
00007e  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_busy
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       ble_conn_state_user_flag_set
                  |L4.134|
;;;135                                             m_flag_link_secure_pending_busy,
;;;136                                             flag_value_busy);
;;;137            }
;;;138        }
;;;139    }
000086  e8bd81f0          POP      {r4-r8,pc}
;;;140    
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L4.144|
                          DCD      m_flag_params_reply_pending_busy
                  |L4.148|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L4.152|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.link_secure||, CODE, READONLY, ALIGN=2

                  link_secure PROC
;;;169    
;;;170    static ret_code_t link_secure(uint16_t conn_handle, bool null_params, bool force_repairing, bool send_events)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;171    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
;;;172        ret_code_t err_code;
;;;173    
;;;174        if (!null_params && !m_sec_params_valid)
00000c  b92d              CBNZ     r5,|L5.26|
00000e  4829              LDR      r0,|L5.180|
000010  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
000012  b910              CBNZ     r0,|L5.26|
;;;175        {
;;;176            return NRF_ERROR_NOT_FOUND;
000014  2005              MOVS     r0,#5
                  |L5.22|
;;;177        }
;;;178    
;;;179        if (null_params)
;;;180        {
;;;181            err_code = smd_link_secure(conn_handle, NULL, force_repairing);
;;;182        }
;;;183        else
;;;184        {
;;;185            err_code = smd_link_secure(conn_handle, &m_sec_params, force_repairing);
;;;186        }
;;;187    
;;;188        flags_set_from_err_code(conn_handle, err_code, false);
;;;189    
;;;190        if (send_events)
;;;191        {
;;;192            events_send_from_err_code(conn_handle, err_code);
;;;193        }
;;;194    
;;;195        switch (err_code)
;;;196        {
;;;197            case NRF_ERROR_BUSY:
;;;198                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_null_params, null_params);
;;;199                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_force_repairing, force_repairing);
;;;200                err_code = NRF_SUCCESS;
;;;201                break;
;;;202            case NRF_ERROR_STORAGE_FULL:
;;;203                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_null_params, null_params);
;;;204                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_force_repairing, force_repairing);
;;;205                break;
;;;206            case NRF_SUCCESS:
;;;207            case NRF_ERROR_TIMEOUT:
;;;208            case BLE_ERROR_INVALID_CONN_HANDLE:
;;;209            case NRF_ERROR_INVALID_STATE:
;;;210                /* No action */
;;;211                break;
;;;212            default:
;;;213                err_code = NRF_ERROR_INTERNAL;
;;;214                break;
;;;215        }
;;;216    
;;;217        return err_code;
;;;218    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L5.26|
00001a  b135              CBZ      r5,|L5.42|
00001c  4642              MOV      r2,r8                 ;181
00001e  2100              MOVS     r1,#0                 ;181
000020  4638              MOV      r0,r7                 ;181
000022  f7fffffe          BL       smd_link_secure
000026  4604              MOV      r4,r0                 ;181
000028  e005              B        |L5.54|
                  |L5.42|
00002a  4642              MOV      r2,r8                 ;185
00002c  4922              LDR      r1,|L5.184|
00002e  4638              MOV      r0,r7                 ;185
000030  f7fffffe          BL       smd_link_secure
000034  4604              MOV      r4,r0                 ;185
                  |L5.54|
000036  2200              MOVS     r2,#0                 ;188
000038  4621              MOV      r1,r4                 ;188
00003a  4638              MOV      r0,r7                 ;188
00003c  f7fffffe          BL       flags_set_from_err_code
000040  b11e              CBZ      r6,|L5.74|
000042  4621              MOV      r1,r4                 ;192
000044  4638              MOV      r0,r7                 ;192
000046  f7fffffe          BL       events_send_from_err_code
                  |L5.74|
00004a  2c11              CMP      r4,#0x11              ;195
00004c  d00d              BEQ      |L5.106|
00004e  dc05              BGT      |L5.92|
000050  b334              CBZ      r4,|L5.160|
000052  2c08              CMP      r4,#8                 ;195
000054  d027              BEQ      |L5.166|
000056  2c0d              CMP      r4,#0xd               ;195
000058  d126              BNE      |L5.168|
00005a  e022              B        |L5.162|
                  |L5.92|
00005c  2c86              CMP      r4,#0x86              ;195
00005e  d012              BEQ      |L5.134|
000060  f5a45040          SUB      r0,r4,#0x3000         ;195
000064  3802              SUBS     r0,#2                 ;195
000066  b9f8              CBNZ     r0,|L5.168|
000068  e01c              B        |L5.164|
                  |L5.106|
00006a  462a              MOV      r2,r5                 ;198
00006c  4813              LDR      r0,|L5.188|
00006e  7801              LDRB     r1,[r0,#0]            ;198  ; m_flag_link_secure_null_params
000070  4638              MOV      r0,r7                 ;198
000072  f7fffffe          BL       ble_conn_state_user_flag_set
000076  4642              MOV      r2,r8                 ;199
000078  4811              LDR      r0,|L5.192|
00007a  7801              LDRB     r1,[r0,#0]            ;199  ; m_flag_link_secure_force_repairing
00007c  4638              MOV      r0,r7                 ;199
00007e  f7fffffe          BL       ble_conn_state_user_flag_set
000082  2400              MOVS     r4,#0                 ;200
000084  e012              B        |L5.172|
                  |L5.134|
000086  462a              MOV      r2,r5                 ;203
000088  480c              LDR      r0,|L5.188|
00008a  7801              LDRB     r1,[r0,#0]            ;203  ; m_flag_link_secure_null_params
00008c  4638              MOV      r0,r7                 ;203
00008e  f7fffffe          BL       ble_conn_state_user_flag_set
000092  4642              MOV      r2,r8                 ;204
000094  480a              LDR      r0,|L5.192|
000096  7801              LDRB     r1,[r0,#0]            ;204  ; m_flag_link_secure_force_repairing
000098  4638              MOV      r0,r7                 ;204
00009a  f7fffffe          BL       ble_conn_state_user_flag_set
00009e  e005              B        |L5.172|
                  |L5.160|
0000a0  bf00              NOP                            ;207
                  |L5.162|
0000a2  bf00              NOP                            ;208
                  |L5.164|
0000a4  bf00              NOP                            ;209
                  |L5.166|
0000a6  e001              B        |L5.172|
                  |L5.168|
0000a8  2403              MOVS     r4,#3                 ;213
0000aa  bf00              NOP                            ;214
                  |L5.172|
0000ac  bf00              NOP                            ;201
0000ae  4620              MOV      r0,r4                 ;217
0000b0  e7b1              B        |L5.22|
;;;219    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L5.180|
                          DCD      m_sec_params_valid
                  |L5.184|
                          DCD      m_sec_params
                  |L5.188|
                          DCD      m_flag_link_secure_null_params
                  |L5.192|
                          DCD      m_flag_link_secure_force_repairing

                          AREA ||i.link_secure_pending_process||, CODE, READONLY, ALIGN=2

                  link_secure_pending_process PROC
;;;316    
;;;317    static void link_secure_pending_process(ble_conn_state_user_flag_id_t flag_id)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;318    {
000004  b092              SUB      sp,sp,#0x48
000006  4605              MOV      r5,r0
;;;319        sdk_mapped_flags_t flag_collection = ble_conn_state_user_flag_collection(flag_id);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       ble_conn_state_user_flag_collection
00000e  4680              MOV      r8,r0
;;;320        if (sdk_mapped_flags_any_set(flag_collection))
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       sdk_mapped_flags_any_set
000016  b358              CBZ      r0,|L6.112|
;;;321        {
;;;322            sdk_mapped_flags_key_list_t conn_handle_list = ble_conn_state_conn_handles();
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       ble_conn_state_conn_handles
;;;323    
;;;324            for (uint32_t i = 0; i < conn_handle_list.len; i++)
00001e  2400              MOVS     r4,#0
000020  e022              B        |L6.104|
                  |L6.34|
;;;325            {
;;;326                bool pending = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], flag_id);
000022  a902              ADD      r1,sp,#8
000024  f8310014          LDRH     r0,[r1,r4,LSL #1]
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       ble_conn_state_user_flag_get
00002e  4606              MOV      r6,r0
;;;327                if (pending)
000030  b1ce              CBZ      r6,|L6.102|
;;;328                {
;;;329                    bool force_repairing = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], m_flag_link_secure_force_repairing);
000032  a902              ADD      r1,sp,#8
000034  f8310014          LDRH     r0,[r1,r4,LSL #1]
000038  490f              LDR      r1,|L6.120|
00003a  7809              LDRB     r1,[r1,#0]  ; m_flag_link_secure_force_repairing
00003c  f7fffffe          BL       ble_conn_state_user_flag_get
000040  4681              MOV      r9,r0
;;;330                    bool null_params     = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], m_flag_link_secure_null_params);
000042  a902              ADD      r1,sp,#8
000044  f8310014          LDRH     r0,[r1,r4,LSL #1]
000048  490c              LDR      r1,|L6.124|
00004a  7809              LDRB     r1,[r1,#0]  ; m_flag_link_secure_null_params
00004c  f7fffffe          BL       ble_conn_state_user_flag_get
000050  4682              MOV      r10,r0
;;;331    
;;;332                    ret_code_t err_code = link_secure(conn_handle_list.flag_keys[i], null_params, force_repairing, true); // If this fails, it will be automatically retried.
000052  a902              ADD      r1,sp,#8
000054  f8310014          LDRH     r0,[r1,r4,LSL #1]
000058  2301              MOVS     r3,#1
00005a  464a              MOV      r2,r9
00005c  4651              MOV      r1,r10
00005e  f7fffffe          BL       link_secure
000062  4607              MOV      r7,r0
;;;333                    UNUSED_VARIABLE(err_code);
;;;334                }
000064  bf00              NOP      
                  |L6.102|
000066  1c64              ADDS     r4,r4,#1              ;324
                  |L6.104|
000068  9801              LDR      r0,[sp,#4]            ;324
00006a  42a0              CMP      r0,r4                 ;324
00006c  d8d9              BHI      |L6.34|
;;;335            }
;;;336        }
00006e  bf00              NOP      
                  |L6.112|
;;;337    }
000070  b012              ADD      sp,sp,#0x48
000072  e8bd87f0          POP      {r4-r10,pc}
;;;338    
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      m_flag_link_secure_force_repairing
                  |L6.124|
                          DCD      m_flag_link_secure_null_params

                          AREA ||i.params_reply_pending_process||, CODE, READONLY, ALIGN=1

                  params_reply_pending_process PROC
;;;339    
;;;340    static void params_reply_pending_process(ble_conn_state_user_flag_id_t flag_id)
000000  b5f0              PUSH     {r4-r7,lr}
;;;341    {
000002  b091              SUB      sp,sp,#0x44
000004  4605              MOV      r5,r0
;;;342        sdk_mapped_flags_t flag_collection = ble_conn_state_user_flag_collection(flag_id);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ble_conn_state_user_flag_collection
00000c  4607              MOV      r7,r0
;;;343        if (sdk_mapped_flags_any_set(flag_collection))
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       sdk_mapped_flags_any_set
000014  b1b0              CBZ      r0,|L7.68|
;;;344        {
;;;345            sdk_mapped_flags_key_list_t conn_handle_list = ble_conn_state_conn_handles();
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       ble_conn_state_conn_handles
;;;346    
;;;347            for (uint32_t i = 0; i < conn_handle_list.len; i++)
00001c  2400              MOVS     r4,#0
00001e  e00d              B        |L7.60|
                  |L7.32|
;;;348            {
;;;349                bool pending = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], flag_id);
000020  a901              ADD      r1,sp,#4
000022  f8310014          LDRH     r0,[r1,r4,LSL #1]
000026  4629              MOV      r1,r5
000028  f7fffffe          BL       ble_conn_state_user_flag_get
00002c  4606              MOV      r6,r0
;;;350                if (pending)
00002e  b126              CBZ      r6,|L7.58|
;;;351                {
;;;352                    smd_params_reply_perform(conn_handle_list.flag_keys[i]);
000030  a901              ADD      r1,sp,#4
000032  f8310014          LDRH     r0,[r1,r4,LSL #1]
000036  f7fffffe          BL       smd_params_reply_perform
                  |L7.58|
00003a  1c64              ADDS     r4,r4,#1              ;347
                  |L7.60|
00003c  9800              LDR      r0,[sp,#0]            ;347
00003e  42a0              CMP      r0,r4                 ;347
000040  d8ee              BHI      |L7.32|
;;;353                }
;;;354            }
;;;355        }
000042  bf00              NOP      
                  |L7.68|
;;;356    }
000044  b011              ADD      sp,sp,#0x44
000046  bdf0              POP      {r4-r7,pc}
;;;357    
                          ENDP


                          AREA ||i.sdk_mapped_flags_any_set||, CODE, READONLY, ALIGN=1

                  sdk_mapped_flags_any_set PROC
;;;191     */
;;;192    static __INLINE bool sdk_mapped_flags_any_set(sdk_mapped_flags_t flags)
000000  4601              MOV      r1,r0
;;;193    {
;;;194        return (flags != 0);
000002  b109              CBZ      r1,|L8.8|
000004  2001              MOVS     r0,#1
                  |L8.6|
;;;195    }
000006  4770              BX       lr
                  |L8.8|
000008  2000              MOVS     r0,#0                 ;194
00000a  e7fc              B        |L8.6|
;;;196    
                          ENDP


                          AREA ||i.sec_params_verify||, CODE, READONLY, ALIGN=1

                  sec_params_verify PROC
;;;433    
;;;434    static bool sec_params_verify(ble_gap_sec_params_t * p_sec_params)
000000  4601              MOV      r1,r0
;;;435    {
;;;436        // NULL check.
;;;437        if (p_sec_params == NULL)
000002  b909              CBNZ     r1,|L9.8|
;;;438        {
;;;439            return false;
000004  2000              MOVS     r0,#0
                  |L9.6|
;;;440        }
;;;441    
;;;442        // OOB not allowed unless MITM.
;;;443        if (!p_sec_params->mitm && p_sec_params->oob)
;;;444        {
;;;445            return false;
;;;446        }
;;;447    
;;;448        // IO Capabilities must be one of the valid values from @ref BLE_GAP_IO_CAPS.
;;;449        if (p_sec_params->io_caps > BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY)
;;;450        {
;;;451            return false;
;;;452        }
;;;453    
;;;454        // Must have either IO capabilities or OOB if MITM.
;;;455        if (p_sec_params->mitm && (p_sec_params->io_caps == BLE_GAP_IO_CAPS_NONE) && !p_sec_params->oob)
;;;456        {
;;;457            return false;
;;;458        }
;;;459    
;;;460        // Minimum key size cannot be larger than maximum key size.
;;;461        if (p_sec_params->min_key_size > p_sec_params->max_key_size)
;;;462        {
;;;463            return false;
;;;464        }
;;;465    
;;;466        // Key size cannot be below 7 bytes.
;;;467        if (p_sec_params->min_key_size < 7)
;;;468        {
;;;469            return false;
;;;470        }
;;;471    
;;;472        // Key size cannot be above 16 bytes.
;;;473        if (p_sec_params->max_key_size > 16)
;;;474        {
;;;475            return false;
;;;476        }
;;;477    
;;;478        // Signing is not supported.
;;;479        if (p_sec_params->kdist_own.sign || p_sec_params->kdist_peer.sign)
;;;480        {
;;;481            return false;
;;;482        }
;;;483    
;;;484        // link bit must be 0.
;;;485        if (p_sec_params->kdist_own.link || p_sec_params->kdist_peer.link)
;;;486        {
;;;487            return false;
;;;488        }
;;;489    
;;;490        // If bonding is not enabled, no keys can be distributed.
;;;491        if (!p_sec_params->bond && (   p_sec_params->kdist_own.enc
;;;492                                    || p_sec_params->kdist_own.id
;;;493                                    || p_sec_params->kdist_peer.enc
;;;494                                    || p_sec_params->kdist_peer.id))
;;;495        {
;;;496            return false;
;;;497        }
;;;498    
;;;499        // If bonding is enabled, one or more keys must be distributed.
;;;500        if (    p_sec_params->bond
;;;501            && !p_sec_params->kdist_own.enc
;;;502            && !p_sec_params->kdist_own.id
;;;503            && !p_sec_params->kdist_peer.enc
;;;504            && !p_sec_params->kdist_peer.id)
;;;505        {
;;;506            return false;
;;;507        }
;;;508    
;;;509        return true;
;;;510    }
000006  4770              BX       lr
                  |L9.8|
000008  7808              LDRB     r0,[r1,#0]            ;443
00000a  f3c00040          UBFX     r0,r0,#1,#1           ;443
00000e  b920              CBNZ     r0,|L9.26|
000010  7808              LDRB     r0,[r1,#0]            ;443
000012  09c0              LSRS     r0,r0,#7              ;443
000014  b108              CBZ      r0,|L9.26|
000016  2000              MOVS     r0,#0                 ;445
000018  e7f5              B        |L9.6|
                  |L9.26|
00001a  7808              LDRB     r0,[r1,#0]            ;449
00001c  f3c01002          UBFX     r0,r0,#4,#3           ;449
000020  2804              CMP      r0,#4                 ;449
000022  dd01              BLE      |L9.40|
000024  2000              MOVS     r0,#0                 ;451
000026  e7ee              B        |L9.6|
                  |L9.40|
000028  7808              LDRB     r0,[r1,#0]            ;455
00002a  f3c00040          UBFX     r0,r0,#1,#1           ;455
00002e  b148              CBZ      r0,|L9.68|
000030  7808              LDRB     r0,[r1,#0]            ;455
000032  f3c01002          UBFX     r0,r0,#4,#3           ;455
000036  2803              CMP      r0,#3                 ;455
000038  d104              BNE      |L9.68|
00003a  7808              LDRB     r0,[r1,#0]            ;455
00003c  09c0              LSRS     r0,r0,#7              ;455
00003e  b908              CBNZ     r0,|L9.68|
000040  2000              MOVS     r0,#0                 ;457
000042  e7e0              B        |L9.6|
                  |L9.68|
000044  7848              LDRB     r0,[r1,#1]            ;461
000046  788a              LDRB     r2,[r1,#2]            ;461
000048  4290              CMP      r0,r2                 ;461
00004a  dd01              BLE      |L9.80|
00004c  2000              MOVS     r0,#0                 ;463
00004e  e7da              B        |L9.6|
                  |L9.80|
000050  7848              LDRB     r0,[r1,#1]            ;467
000052  2807              CMP      r0,#7                 ;467
000054  da01              BGE      |L9.90|
000056  2000              MOVS     r0,#0                 ;469
000058  e7d5              B        |L9.6|
                  |L9.90|
00005a  7888              LDRB     r0,[r1,#2]            ;473
00005c  2810              CMP      r0,#0x10              ;473
00005e  dd01              BLE      |L9.100|
000060  2000              MOVS     r0,#0                 ;475
000062  e7d0              B        |L9.6|
                  |L9.100|
000064  78c8              LDRB     r0,[r1,#3]            ;479
000066  f3c00080          UBFX     r0,r0,#2,#1           ;479
00006a  b918              CBNZ     r0,|L9.116|
00006c  7908              LDRB     r0,[r1,#4]            ;479
00006e  f3c00080          UBFX     r0,r0,#2,#1           ;479
000072  b108              CBZ      r0,|L9.120|
                  |L9.116|
000074  2000              MOVS     r0,#0                 ;481
000076  e7c6              B        |L9.6|
                  |L9.120|
000078  78c8              LDRB     r0,[r1,#3]            ;485
00007a  f3c000c0          UBFX     r0,r0,#3,#1           ;485
00007e  b918              CBNZ     r0,|L9.136|
000080  7908              LDRB     r0,[r1,#4]            ;485
000082  f3c000c0          UBFX     r0,r0,#3,#1           ;485
000086  b108              CBZ      r0,|L9.140|
                  |L9.136|
000088  2000              MOVS     r0,#0                 ;487
00008a  e7bc              B        |L9.6|
                  |L9.140|
00008c  7808              LDRB     r0,[r1,#0]            ;491
00008e  f0000001          AND      r0,r0,#1              ;491
000092  b988              CBNZ     r0,|L9.184|
000094  78c8              LDRB     r0,[r1,#3]            ;491
000096  f0000001          AND      r0,r0,#1              ;491
00009a  b958              CBNZ     r0,|L9.180|
00009c  78c8              LDRB     r0,[r1,#3]            ;492
00009e  f3c00040          UBFX     r0,r0,#1,#1           ;492
0000a2  b938              CBNZ     r0,|L9.180|
0000a4  7908              LDRB     r0,[r1,#4]            ;493
0000a6  f0000001          AND      r0,r0,#1              ;493
0000aa  b918              CBNZ     r0,|L9.180|
0000ac  7908              LDRB     r0,[r1,#4]            ;494
0000ae  f3c00040          UBFX     r0,r0,#1,#1           ;494
0000b2  b108              CBZ      r0,|L9.184|
                  |L9.180|
0000b4  2000              MOVS     r0,#0                 ;496
0000b6  e7a6              B        |L9.6|
                  |L9.184|
0000b8  7808              LDRB     r0,[r1,#0]            ;500
0000ba  f0000001          AND      r0,r0,#1              ;500
0000be  b188              CBZ      r0,|L9.228|
0000c0  78c8              LDRB     r0,[r1,#3]            ;501
0000c2  f0000001          AND      r0,r0,#1              ;501
0000c6  b968              CBNZ     r0,|L9.228|
0000c8  78c8              LDRB     r0,[r1,#3]            ;502
0000ca  f3c00040          UBFX     r0,r0,#1,#1           ;502
0000ce  b948              CBNZ     r0,|L9.228|
0000d0  7908              LDRB     r0,[r1,#4]            ;503
0000d2  f0000001          AND      r0,r0,#1              ;503
0000d6  b928              CBNZ     r0,|L9.228|
0000d8  7908              LDRB     r0,[r1,#4]            ;504
0000da  f3c00040          UBFX     r0,r0,#1,#1           ;504
0000de  b908              CBNZ     r0,|L9.228|
0000e0  2000              MOVS     r0,#0                 ;506
0000e2  e790              B        |L9.6|
                  |L9.228|
0000e4  2001              MOVS     r0,#1                 ;509
0000e6  e78e              B        |L9.6|
;;;511    
                          ENDP


                          AREA ||i.send_config_req||, CODE, READONLY, ALIGN=1

                  send_config_req PROC
;;;220    
;;;221    static void send_config_req(uint16_t conn_handle)
000000  b53e              PUSH     {r1-r5,lr}
;;;222    {
000002  4604              MOV      r4,r0
;;;223        sm_evt_t sm_evt;
;;;224        memset(&sm_evt, 0, sizeof(sm_evt));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
00000a  9002              STR      r0,[sp,#8]
;;;225    
;;;226        sm_evt.evt_id      = SM_EVT_CONN_SEC_CONFIG_REQ;
00000c  200c              MOVS     r0,#0xc
00000e  f88d0000          STRB     r0,[sp,#0]
;;;227        sm_evt.conn_handle = conn_handle;
000012  f8ad4002          STRH     r4,[sp,#2]
;;;228    
;;;229        evt_send(&sm_evt);
000016  4668              MOV      r0,sp
000018  f7fffffe          BL       evt_send
;;;230    }
00001c  bd3e              POP      {r1-r5,pc}
;;;231    
                          ENDP


                          AREA ||i.sm_ble_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_ble_evt_handler PROC
;;;424    
;;;425    void sm_ble_evt_handler(ble_evt_t const * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;426    {
000002  4604              MOV      r4,r0
;;;427        NRF_PM_DEBUG_CHECK(p_ble_evt != NULL);
;;;428    
;;;429        smd_ble_evt_handler(p_ble_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       smd_ble_evt_handler
;;;430        link_secure_pending_process(m_flag_link_secure_pending_busy);
00000a  4802              LDR      r0,|L11.20|
00000c  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_busy
00000e  f7fffffe          BL       link_secure_pending_process
;;;431    }
000012  bd10              POP      {r4,pc}
;;;432    
                          ENDP

                  |L11.20|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.sm_conn_sec_config_reply||, CODE, READONLY, ALIGN=2

                  sm_conn_sec_config_reply PROC
;;;534    
;;;535    void sm_conn_sec_config_reply(uint16_t conn_handle, pm_conn_sec_config_t * p_conn_sec_config)
000000  b570              PUSH     {r4-r6,lr}
;;;536    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;537        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;538        NRF_PM_DEBUG_CHECK(p_conn_sec_config != NULL);
;;;539    
;;;540        ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, !p_conn_sec_config->allow_repairing);
000006  7820              LDRB     r0,[r4,#0]
000008  b908              CBNZ     r0,|L12.14|
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L12.16|
                  |L12.14|
00000e  2000              MOVS     r0,#0
                  |L12.16|
000010  4602              MOV      r2,r0
000012  4803              LDR      r0,|L12.32|
000014  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       ble_conn_state_user_flag_set
;;;541    }
00001c  bd70              POP      {r4-r6,pc}
;;;542    
                          ENDP

00001e  0000              DCW      0x0000
                  |L12.32|
                          DCD      m_flag_reject_pairing

                          AREA ||i.sm_init||, CODE, READONLY, ALIGN=2

                  sm_init PROC
;;;401    
;;;402    ret_code_t sm_init(void)
000000  b510              PUSH     {r4,lr}
;;;403    {
;;;404        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;405    
;;;406        flag_id_init(&m_flag_link_secure_pending_busy);
000002  4810              LDR      r0,|L13.68|
000004  f7fffffe          BL       flag_id_init
;;;407        flag_id_init(&m_flag_link_secure_pending_flash_full);
000008  480f              LDR      r0,|L13.72|
00000a  f7fffffe          BL       flag_id_init
;;;408        flag_id_init(&m_flag_link_secure_force_repairing);
00000e  480f              LDR      r0,|L13.76|
000010  f7fffffe          BL       flag_id_init
;;;409        flag_id_init(&m_flag_link_secure_null_params);
000014  480e              LDR      r0,|L13.80|
000016  f7fffffe          BL       flag_id_init
;;;410        flag_id_init(&m_flag_params_reply_pending_busy);
00001a  480e              LDR      r0,|L13.84|
00001c  f7fffffe          BL       flag_id_init
;;;411        flag_id_init(&m_flag_params_reply_pending_flash_full);
000020  480d              LDR      r0,|L13.88|
000022  f7fffffe          BL       flag_id_init
;;;412        flag_id_init(&m_flag_reject_pairing);
000026  480d              LDR      r0,|L13.92|
000028  f7fffffe          BL       flag_id_init
;;;413    
;;;414        if (m_flag_reject_pairing == BLE_CONN_STATE_USER_FLAG_INVALID)
00002c  480b              LDR      r0,|L13.92|
00002e  7800              LDRB     r0,[r0,#0]  ; m_flag_reject_pairing
000030  2818              CMP      r0,#0x18
000032  d101              BNE      |L13.56|
;;;415        {
;;;416            return NRF_ERROR_INTERNAL;
000034  2003              MOVS     r0,#3
                  |L13.54|
;;;417        }
;;;418    
;;;419        m_module_initialized = true;
;;;420    
;;;421        return NRF_SUCCESS;
;;;422    }
000036  bd10              POP      {r4,pc}
                  |L13.56|
000038  2001              MOVS     r0,#1                 ;419
00003a  4909              LDR      r1,|L13.96|
00003c  7008              STRB     r0,[r1,#0]            ;419
00003e  2000              MOVS     r0,#0                 ;421
000040  e7f9              B        |L13.54|
;;;423    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      m_flag_link_secure_pending_busy
                  |L13.72|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L13.76|
                          DCD      m_flag_link_secure_force_repairing
                  |L13.80|
                          DCD      m_flag_link_secure_null_params
                  |L13.84|
                          DCD      m_flag_params_reply_pending_busy
                  |L13.88|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L13.92|
                          DCD      m_flag_reject_pairing
                  |L13.96|
                          DCD      m_module_initialized

                          AREA ||i.sm_lesc_public_key_set||, CODE, READONLY, ALIGN=2

                  sm_lesc_public_key_set PROC
;;;543    
;;;544    ret_code_t sm_lesc_public_key_set(ble_gap_lesc_p256_pk_t * p_public_key)
000000  4601              MOV      r1,r0
;;;545    {
;;;546        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;547    
;;;548        m_p_public_key = p_public_key;
000002  4802              LDR      r0,|L14.12|
000004  6001              STR      r1,[r0,#0]  ; m_p_public_key
;;;549    
;;;550        return NRF_SUCCESS;
000006  2000              MOVS     r0,#0
;;;551    }
000008  4770              BX       lr
;;;552    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      m_p_public_key

                          AREA ||i.sm_link_secure||, CODE, READONLY, ALIGN=1

                  sm_link_secure PROC
;;;560    
;;;561    ret_code_t sm_link_secure(uint16_t conn_handle, bool force_repairing)
000000  b570              PUSH     {r4-r6,lr}
;;;562    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;563        ret_code_t ret;
;;;564    
;;;565        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;566    
;;;567        ret = link_secure(conn_handle, false, force_repairing, false);
000006  2300              MOVS     r3,#0
000008  4622              MOV      r2,r4
00000a  4619              MOV      r1,r3
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       link_secure
000012  4606              MOV      r6,r0
;;;568        return ret;
000014  4630              MOV      r0,r6
;;;569    }
000016  bd70              POP      {r4-r6,pc}
;;;570    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.sm_pdb_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_pdb_evt_handler PROC
;;;363     */
;;;364    void sm_pdb_evt_handler(pdb_evt_t const * p_event)
000000  b510              PUSH     {r4,lr}
;;;365    {
000002  4604              MOV      r4,r0
;;;366        switch (p_event->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  280a              CMP      r0,#0xa
000008  d220              BCS      |L16.76|
00000a  e8dff000          TBB      [pc,r0]
00000e  0e0f              DCB      0x0e,0x0f
000010  10111213          DCB      0x10,0x11,0x12,0x13
000014  14051d1e          DCB      0x14,0x05,0x1d,0x1e
;;;367        {
;;;368            case PDB_EVT_COMPRESSED:
;;;369                params_reply_pending_process(m_flag_params_reply_pending_flash_full);
000018  480d              LDR      r0,|L16.80|
00001a  7800              LDRB     r0,[r0,#0]  ; m_flag_params_reply_pending_flash_full
00001c  f7fffffe          BL       params_reply_pending_process
;;;370                link_secure_pending_process(m_flag_link_secure_pending_flash_full);
000020  480c              LDR      r0,|L16.84|
000022  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_flash_full
000024  f7fffffe          BL       link_secure_pending_process
;;;371                /* fallthrough */
;;;372            case PDB_EVT_WRITE_BUF_STORED:
000028  bf00              NOP      
;;;373            case PDB_EVT_RAW_STORED:
00002a  bf00              NOP      
;;;374            case PDB_EVT_RAW_STORE_FAILED:
00002c  bf00              NOP      
;;;375            case PDB_EVT_CLEARED:
00002e  bf00              NOP      
;;;376            case PDB_EVT_CLEAR_FAILED:
000030  bf00              NOP      
;;;377            case PDB_EVT_PEER_FREED:
000032  bf00              NOP      
;;;378            case PDB_EVT_PEER_FREE_FAILED:
000034  bf00              NOP      
;;;379                params_reply_pending_process(m_flag_params_reply_pending_busy);
000036  4808              LDR      r0,|L16.88|
000038  7800              LDRB     r0,[r0,#0]  ; m_flag_params_reply_pending_busy
00003a  f7fffffe          BL       params_reply_pending_process
;;;380                link_secure_pending_process(m_flag_link_secure_pending_busy);
00003e  4807              LDR      r0,|L16.92|
000040  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_busy
000042  f7fffffe          BL       link_secure_pending_process
;;;381                break;
000046  e001              B        |L16.76|
;;;382            case PDB_EVT_ERROR_NO_MEM:
;;;383            case PDB_EVT_ERROR_UNEXPECTED:
000048  bf00              NOP      
;;;384                break;
00004a  bf00              NOP      
                  |L16.76|
00004c  bf00              NOP                            ;381
;;;385        }
;;;386    }
00004e  bd10              POP      {r4,pc}
;;;387    
                          ENDP

                  |L16.80|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L16.84|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L16.88|
                          DCD      m_flag_params_reply_pending_busy
                  |L16.92|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.sm_sec_params_reply||, CODE, READONLY, ALIGN=1

                  sm_sec_params_reply PROC
;;;553    
;;;554    ret_code_t sm_sec_params_reply(uint16_t conn_handle, ble_gap_sec_params_t * p_sec_params)
000000  4602              MOV      r2,r0
;;;555    {
;;;556        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;557        return NRF_SUCCESS;
000002  2000              MOVS     r0,#0
;;;558    }
000004  4770              BX       lr
;;;559    
                          ENDP


                          AREA ||i.sm_sec_params_set||, CODE, READONLY, ALIGN=2

                  sm_sec_params_set PROC
;;;512    
;;;513    ret_code_t sm_sec_params_set(ble_gap_sec_params_t * p_sec_params)
000000  b510              PUSH     {r4,lr}
;;;514    {
000002  4604              MOV      r4,r0
;;;515        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;516    
;;;517        if (p_sec_params == NULL)
000004  b91c              CBNZ     r4,|L18.14|
;;;518        {
;;;519            m_sec_params_valid = false;
000006  2000              MOVS     r0,#0
000008  4909              LDR      r1,|L18.48|
00000a  7008              STRB     r0,[r1,#0]
                  |L18.12|
;;;520            return NRF_SUCCESS;
;;;521        }
;;;522        else if (sec_params_verify(p_sec_params))
;;;523        {
;;;524            m_sec_params       = *p_sec_params;
;;;525            m_sec_params_valid = true;
;;;526            return NRF_SUCCESS;
;;;527        }
;;;528        else
;;;529        {
;;;530            return NRF_ERROR_INVALID_PARAM;
;;;531        }
;;;532    }
00000c  bd10              POP      {r4,pc}
                  |L18.14|
00000e  4620              MOV      r0,r4                 ;522
000010  f7fffffe          BL       sec_params_verify
000014  b148              CBZ      r0,|L18.42|
000016  4807              LDR      r0,|L18.52|
000018  6821              LDR      r1,[r4,#0]            ;524
00001a  6001              STR      r1,[r0,#0]            ;524  ; m_sec_params
00001c  7921              LDRB     r1,[r4,#4]            ;524
00001e  7101              STRB     r1,[r0,#4]            ;524
000020  2001              MOVS     r0,#1                 ;525
000022  4903              LDR      r1,|L18.48|
000024  7008              STRB     r0,[r1,#0]            ;525
000026  2000              MOVS     r0,#0                 ;526
000028  e7f0              B        |L18.12|
                  |L18.42|
00002a  2007              MOVS     r0,#7                 ;530
00002c  e7ee              B        |L18.12|
;;;533    
                          ENDP

00002e  0000              DCW      0x0000
                  |L18.48|
                          DCD      m_sec_params_valid
                  |L18.52|
                          DCD      m_sec_params

                          AREA ||i.sm_smd_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_smd_evt_handler PROC
;;;268     */
;;;269    void sm_smd_evt_handler(smd_evt_t const * p_event)
000000  b5fe              PUSH     {r1-r7,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271        switch (p_event->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  280a              CMP      r0,#0xa
000008  d246              BCS      |L19.152|
00000a  e8dff000          TBB      [pc,r0]
00000e  0509              DCB      0x05,0x09
000010  37303132          DCB      0x37,0x30,0x31,0x32
000014  33343536          DCB      0x33,0x34,0x35,0x36
;;;272        {
;;;273            case SMD_EVT_PARAMS_REQ:
;;;274                smd_params_reply_perform(p_event->conn_handle);
000018  8860              LDRH     r0,[r4,#2]
00001a  f7fffffe          BL       smd_params_reply_perform
;;;275                break;
00001e  e03b              B        |L19.152|
;;;276            case SMD_EVT_SLAVE_SECURITY_REQ:
;;;277            {
;;;278                bool null_params = false;
000020  2600              MOVS     r6,#0
;;;279                if (!m_sec_params_valid)
000022  481e              LDR      r0,|L19.156|
000024  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
000026  b908              CBNZ     r0,|L19.44|
;;;280                {
;;;281                    null_params = true;
000028  2601              MOVS     r6,#1
00002a  e018              B        |L19.94|
                  |L19.44|
;;;282                }
;;;283                else if ((bool)m_sec_params.bond < (bool)p_event->params.slave_security_req.bond)
00002c  481c              LDR      r0,|L19.160|
00002e  7800              LDRB     r0,[r0,#0]  ; m_sec_params
000030  f0000001          AND      r0,r0,#1
000034  7921              LDRB     r1,[r4,#4]
000036  b109              CBZ      r1,|L19.60|
000038  2101              MOVS     r1,#1
00003a  e000              B        |L19.62|
                  |L19.60|
00003c  2100              MOVS     r1,#0
                  |L19.62|
00003e  4288              CMP      r0,r1
000040  da01              BGE      |L19.70|
;;;284                {
;;;285                    null_params = true;
000042  2601              MOVS     r6,#1
000044  e00b              B        |L19.94|
                  |L19.70|
;;;286                }
;;;287                else if ((bool)m_sec_params.mitm < (bool)p_event->params.slave_security_req.mitm)
000046  4816              LDR      r0,|L19.160|
000048  7800              LDRB     r0,[r0,#0]  ; m_sec_params
00004a  f3c00140          UBFX     r1,r0,#1,#1
00004e  7960              LDRB     r0,[r4,#5]
000050  b108              CBZ      r0,|L19.86|
000052  2001              MOVS     r0,#1
000054  e000              B        |L19.88|
                  |L19.86|
000056  2000              MOVS     r0,#0
                  |L19.88|
000058  4281              CMP      r1,r0
00005a  da00              BGE      |L19.94|
;;;288                {
;;;289                    null_params = true;
00005c  2601              MOVS     r6,#1
                  |L19.94|
;;;290                }
;;;291                ret_code_t err_code = link_secure(p_event->conn_handle, null_params, false, true);
00005e  8860              LDRH     r0,[r4,#2]
000060  2301              MOVS     r3,#1
000062  2200              MOVS     r2,#0
000064  4631              MOV      r1,r6
000066  f7fffffe          BL       link_secure
00006a  4605              MOV      r5,r0
;;;292                UNUSED_VARIABLE(err_code); // It is acceptable to ignore the return code because it is
;;;293                                           // acceptable to ignore a security request.
;;;294            }
;;;295            /* fallthrough */
;;;296            case SMD_EVT_PAIRING_SUCCESS:
00006c  bf00              NOP      
;;;297            case SMD_EVT_PAIRING_FAIL:
00006e  bf00              NOP      
;;;298            case SMD_EVT_LINK_ENCRYPTION_UPDATE:
000070  bf00              NOP      
;;;299            case SMD_EVT_LINK_ENCRYPTION_FAILED:
000072  bf00              NOP      
;;;300            case SMD_EVT_BONDING_INFO_STORED:
000074  bf00              NOP      
;;;301            case SMD_EVT_ERROR_BONDING_INFO:
000076  bf00              NOP      
;;;302            case SMD_EVT_ERROR_UNEXPECTED:
000078  bf00              NOP      
;;;303            case SMD_EVT_SEC_PROCEDURE_START:
00007a  bf00              NOP      
;;;304            {
;;;305                sm_evt_t evt;
;;;306                evt.evt_id = (sm_evt_id_t)p_event->evt_id;
00007c  7820              LDRB     r0,[r4,#0]
00007e  f88d0000          STRB     r0,[sp,#0]
;;;307                evt.conn_handle = p_event->conn_handle;
000082  8860              LDRH     r0,[r4,#2]
000084  f8ad0002          STRH     r0,[sp,#2]
;;;308                evt.params = p_event->params;
000088  e9d40101          LDRD     r0,r1,[r4,#4]
00008c  e9cd0101          STRD     r0,r1,[sp,#4]
;;;309    
;;;310                evt_send(&evt);
000090  4668              MOV      r0,sp
000092  f7fffffe          BL       evt_send
;;;311            }
;;;312                break;
000096  bf00              NOP      
                  |L19.152|
000098  bf00              NOP                            ;275
;;;313        }
;;;314    }
00009a  bdfe              POP      {r1-r7,pc}
;;;315    
                          ENDP

                  |L19.156|
                          DCD      m_sec_params_valid
                  |L19.160|
                          DCD      m_sec_params

                          AREA ||i.smd_params_reply_perform||, CODE, READONLY, ALIGN=2

                  smd_params_reply_perform PROC
;;;232    
;;;233    static void smd_params_reply_perform(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;234    {
000002  4604              MOV      r4,r0
;;;235        ret_code_t err_code;
;;;236    
;;;237        if (  (ble_conn_state_role(conn_handle) == BLE_GAP_ROLE_PERIPH)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       ble_conn_state_role
00000a  2801              CMP      r0,#1
00000c  d110              BNE      |L20.48|
;;;238            && im_peer_id_get_by_conn_handle(conn_handle) != PM_PEER_ID_INVALID)
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       im_peer_id_get_by_conn_handle
000014  f64f71ff          MOV      r1,#0xffff
000018  4288              CMP      r0,r1
00001a  d009              BEQ      |L20.48|
;;;239        {
;;;240            // Bond already exists. Reject the pairing request if the user doesn't intervene.
;;;241            ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, true);
00001c  2201              MOVS     r2,#1
00001e  4818              LDR      r0,|L20.128|
000020  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       ble_conn_state_user_flag_set
;;;242            send_config_req(conn_handle);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       send_config_req
00002e  e005              B        |L20.60|
                  |L20.48|
;;;243        }
;;;244        else
;;;245        {
;;;246            ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, false);
000030  2200              MOVS     r2,#0
000032  4813              LDR      r0,|L20.128|
000034  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       ble_conn_state_user_flag_set
                  |L20.60|
;;;247        }
;;;248    
;;;249        if (   m_sec_params_valid
00003c  4811              LDR      r0,|L20.132|
00003e  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
000040  b168              CBZ      r0,|L20.94|
;;;250            && !ble_conn_state_user_flag_get(conn_handle, m_flag_reject_pairing))
000042  480f              LDR      r0,|L20.128|
000044  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       ble_conn_state_user_flag_get
00004c  b938              CBNZ     r0,|L20.94|
;;;251        {
;;;252            err_code = smd_params_reply(conn_handle, &m_sec_params, m_p_public_key);
00004e  480e              LDR      r0,|L20.136|
000050  490e              LDR      r1,|L20.140|
000052  6802              LDR      r2,[r0,#0]  ; m_p_public_key
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       smd_params_reply
00005a  4605              MOV      r5,r0
00005c  e005              B        |L20.106|
                  |L20.94|
;;;253        }
;;;254        else
;;;255        {
;;;256            err_code = smd_params_reply(conn_handle, NULL, NULL);
00005e  2200              MOVS     r2,#0
000060  4611              MOV      r1,r2
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       smd_params_reply
000068  4605              MOV      r5,r0
                  |L20.106|
;;;257        }
;;;258    
;;;259        flags_set_from_err_code(conn_handle, err_code, true);
00006a  2201              MOVS     r2,#1
00006c  4629              MOV      r1,r5
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       flags_set_from_err_code
;;;260        events_send_from_err_code(conn_handle, err_code);
000074  4629              MOV      r1,r5
000076  4620              MOV      r0,r4
000078  f7fffffe          BL       events_send_from_err_code
;;;261    }
00007c  bd70              POP      {r4-r6,pc}
;;;262    
                          ENDP

00007e  0000              DCW      0x0000
                  |L20.128|
                          DCD      m_flag_reject_pairing
                  |L20.132|
                          DCD      m_sec_params_valid
                  |L20.136|
                          DCD      m_p_public_key
                  |L20.140|
                          DCD      m_sec_params

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pm_sm_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00                DCB      0x00
                  m_sec_params
000001  000000            DCB      0x00,0x00,0x00
000004  0000              DCB      0x00,0x00
                  m_sec_params_valid
000006  0000              DCB      0x00,0x00
                  m_p_public_key
                          DCD      0x00000000
                  m_flag_link_secure_pending_busy
00000c  18                DCB      0x18
                  m_flag_link_secure_pending_flash_full
00000d  18                DCB      0x18
                  m_flag_link_secure_force_repairing
00000e  18                DCB      0x18
                  m_flag_link_secure_null_params
00000f  18                DCB      0x18
                  m_flag_params_reply_pending_busy
000010  18                DCB      0x18
                  m_flag_params_reply_pending_flash_full
000011  18                DCB      0x18
                  m_flag_reject_pairing
000012  18                DCB      0x18

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\security_manager.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_security_manager_c_3ad89192____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_security_manager_c_3ad89192____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_security_manager_c_3ad89192____REVSH|
#line 402
|__asm___18_security_manager_c_3ad89192____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_security_manager_c_3ad89192____RRX|
#line 587
|__asm___18_security_manager_c_3ad89192____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
