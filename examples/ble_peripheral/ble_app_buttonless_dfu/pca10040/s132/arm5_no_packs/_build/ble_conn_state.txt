; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_conn_state.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_conn_state.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_conn_state.crf ..\..\..\..\..\..\components\ble\common\ble_conn_state.c]
                          THUMB

                          AREA ||i.bcs_internal_state_reset||, CODE, READONLY, ALIGN=2

                  bcs_internal_state_reset PROC
;;;103     */
;;;104    void bcs_internal_state_reset(void)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106        memset( &m_bcs, 0, sizeof(ble_conn_state_t) );
000002  21b8              MOVS     r1,#0xb8
000004  4801              LDR      r0,|L1.12|
000006  f7fffffe          BL       __aeabi_memclr4
;;;107    }
00000a  bd10              POP      {r4,pc}
;;;108    
                          ENDP

                  |L1.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_central_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_central_handles PROC
;;;350    
;;;351    sdk_mapped_flags_key_list_t ble_conn_state_central_handles(void)
000000  b510              PUSH     {r4,lr}
;;;352    {
000002  4604              MOV      r4,r0
;;;353        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L2.28|
000006  6cc0              LDR      r0,[r0,#0x4c]
000008  4904              LDR      r1,|L2.28|
00000a  6c89              LDR      r1,[r1,#0x48]
00000c  ea000201          AND      r2,r0,r1
000010  4902              LDR      r1,|L2.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;354                                            (m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;355    }
00001a  bd10              POP      {r4,pc}
;;;356    
                          ENDP

                  |L2.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_conn_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_conn_handles PROC
;;;344    
;;;345    sdk_mapped_flags_key_list_t ble_conn_state_conn_handles(void)
000000  b510              PUSH     {r4,lr}
;;;346    {
000002  4604              MOV      r4,r0
;;;347        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags);
000004  4803              LDR      r0,|L3.20|
000006  1d01              ADDS     r1,r0,#4
000008  6c42              LDR      r2,[r0,#0x44]  ; m_bcs
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;348    }
000010  bd10              POP      {r4,pc}
;;;349    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_conn_idx||, CODE, READONLY, ALIGN=2

                  ble_conn_state_conn_idx PROC
;;;364    
;;;365    uint8_t ble_conn_state_conn_idx(uint16_t conn_handle)
000000  b538              PUSH     {r3-r5,lr}
;;;366    {
000002  4604              MOV      r4,r0
;;;367        uint8_t index;
;;;368        if (sdk_mapped_flags_get_by_key_w_idx(m_bcs.valid_conn_handles,
000004  4806              LDR      r0,|L4.32|
000006  466b              MOV      r3,sp
000008  4622              MOV      r2,r4
00000a  6c41              LDR      r1,[r0,#0x44]  ; m_bcs
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       sdk_mapped_flags_get_by_key_w_idx
000012  b110              CBZ      r0,|L4.26|
;;;369                                              m_bcs.flags.valid_flags,
;;;370                                              conn_handle,
;;;371                                              &index))
;;;372        {
;;;373            return index;
000014  f89d0000          LDRB     r0,[sp,#0]
                  |L4.24|
;;;374        }
;;;375        else
;;;376        {
;;;377            return BLE_CONN_STATE_MAX_CONNECTIONS;
;;;378        }
;;;379    }
000018  bd38              POP      {r3-r5,pc}
                  |L4.26|
00001a  2014              MOVS     r0,#0x14              ;377
00001c  e7fc              B        |L4.24|
;;;380    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_encrypted||, CODE, READONLY, ALIGN=2

                  ble_conn_state_encrypted PROC
;;;310    
;;;311    bool ble_conn_state_encrypted(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;312    {
000002  4604              MOV      r4,r0
;;;313        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L5.20|
000006  4622              MOV      r2,r4
000008  6d01              LDR      r1,[r0,#0x50]
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;314                                           m_bcs.flags.encrypted_flags,
;;;315                                           conn_handle);
;;;316    }
000010  bd10              POP      {r4,pc}
;;;317    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_init||, CODE, READONLY, ALIGN=1

                  ble_conn_state_init PROC
;;;207    
;;;208    void ble_conn_state_init(void)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210        bcs_internal_state_reset();
000002  f7fffffe          BL       bcs_internal_state_reset
;;;211    }
000006  bd10              POP      {r4,pc}
;;;212    
                          ENDP


                          AREA ||i.ble_conn_state_mitm_protected||, CODE, READONLY, ALIGN=2

                  ble_conn_state_mitm_protected PROC
;;;318    
;;;319    bool ble_conn_state_mitm_protected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;320    {
000002  4604              MOV      r4,r0
;;;321        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L7.20|
000006  4622              MOV      r2,r4
000008  6d41              LDR      r1,[r0,#0x54]
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;322                                           m_bcs.flags.mitm_protected_flags,
;;;323                                           conn_handle);
;;;324    }
000010  bd10              POP      {r4,pc}
;;;325    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_centrals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_centrals PROC
;;;332    
;;;333    uint32_t ble_conn_state_n_centrals(void)
000000  b510              PUSH     {r4,lr}
;;;334    {
;;;335        return sdk_mapped_flags_n_flags_set((m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L8.20|
000004  6cc9              LDR      r1,[r1,#0x4c]
000006  4a03              LDR      r2,|L8.20|
000008  6c92              LDR      r2,[r2,#0x48]
00000a  ea010002          AND      r0,r1,r2
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;336    }
000012  bd10              POP      {r4,pc}
;;;337    
                          ENDP

                  |L8.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_connections||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_connections PROC
;;;326    
;;;327    uint32_t ble_conn_state_n_connections(void)
000000  b510              PUSH     {r4,lr}
;;;328    {
;;;329        return sdk_mapped_flags_n_flags_set(m_bcs.flags.connected_flags);
000002  4902              LDR      r1,|L9.12|
000004  6c88              LDR      r0,[r1,#0x48]
000006  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;330    }
00000a  bd10              POP      {r4,pc}
;;;331    
                          ENDP

                  |L9.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_peripherals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_peripherals PROC
;;;338    
;;;339    uint32_t ble_conn_state_n_peripherals(void)
000000  b510              PUSH     {r4,lr}
;;;340    {
;;;341        return sdk_mapped_flags_n_flags_set((~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L10.20|
000004  6c89              LDR      r1,[r1,#0x48]
000006  4a03              LDR      r2,|L10.20|
000008  6cd2              LDR      r2,[r2,#0x4c]
00000a  ea210002          BIC      r0,r1,r2
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;342    }
000012  bd10              POP      {r4,pc}
;;;343    
                          ENDP

                  |L10.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_periph_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_periph_handles PROC
;;;357    
;;;358    sdk_mapped_flags_key_list_t ble_conn_state_periph_handles(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
000002  4604              MOV      r4,r0
;;;360        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L11.28|
000006  6c80              LDR      r0,[r0,#0x48]
000008  4904              LDR      r1,|L11.28|
00000a  6cc9              LDR      r1,[r1,#0x4c]
00000c  ea200201          BIC      r2,r0,r1
000010  4902              LDR      r1,|L11.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;361                                            (~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;362    }
00001a  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  |L11.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_role||, CODE, READONLY, ALIGN=2

                  ble_conn_state_role PROC
;;;273    
;;;274    uint8_t ble_conn_state_role(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;275    {
000002  4604              MOV      r4,r0
;;;276        uint8_t role = BLE_GAP_ROLE_INVALID;
000004  2500              MOVS     r5,#0
;;;277    
;;;278        if ( sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags, conn_handle) )
000006  480b              LDR      r0,|L12.52|
000008  4622              MOV      r2,r4
00000a  6c41              LDR      r1,[r0,#0x44]  ; m_bcs
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       sdk_mapped_flags_get_by_key
000012  b160              CBZ      r0,|L12.46|
;;;279        {
;;;280            bool central = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000014  4807              LDR      r0,|L12.52|
000016  4622              MOV      r2,r4
000018  6cc1              LDR      r1,[r0,#0x4c]
00001a  1d00              ADDS     r0,r0,#4
00001c  f7fffffe          BL       sdk_mapped_flags_get_by_key
000020  4606              MOV      r6,r0
;;;281                                                       m_bcs.flags.central_flags,
;;;282                                                       conn_handle);
;;;283    
;;;284            role = central ? BLE_GAP_ROLE_CENTRAL : BLE_GAP_ROLE_PERIPH;
000022  b10e              CBZ      r6,|L12.40|
000024  2002              MOVS     r0,#2
000026  e000              B        |L12.42|
                  |L12.40|
000028  2001              MOVS     r0,#1
                  |L12.42|
00002a  4605              MOV      r5,r0
;;;285        }
00002c  bf00              NOP      
                  |L12.46|
;;;286    
;;;287        return role;
00002e  4628              MOV      r0,r5
;;;288    }
000030  bd70              POP      {r4-r6,pc}
;;;289    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_status||, CODE, READONLY, ALIGN=2

                  ble_conn_state_status PROC
;;;290    
;;;291    ble_conn_state_status_t ble_conn_state_status(uint16_t conn_handle)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;292    {
000004  4604              MOV      r4,r0
;;;293        ble_conn_state_status_t conn_status = BLE_CONN_STATUS_INVALID;
000006  2500              MOVS     r5,#0
;;;294        bool valid = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000008  480b              LDR      r0,|L13.56|
00000a  4622              MOV      r2,r4
00000c  6c41              LDR      r1,[r0,#0x44]  ; m_bcs
00000e  1d00              ADDS     r0,r0,#4
000010  f7fffffe          BL       sdk_mapped_flags_get_by_key
000014  4606              MOV      r6,r0
;;;295                                                 m_bcs.flags.valid_flags,
;;;296                                                 conn_handle);
;;;297    
;;;298        if (valid)
000016  b166              CBZ      r6,|L13.50|
;;;299        {
;;;300            bool connected = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000018  4807              LDR      r0,|L13.56|
00001a  4622              MOV      r2,r4
00001c  6c81              LDR      r1,[r0,#0x48]
00001e  1d00              ADDS     r0,r0,#4
000020  f7fffffe          BL       sdk_mapped_flags_get_by_key
000024  4607              MOV      r7,r0
;;;301                                                         m_bcs.flags.connected_flags,
;;;302                                                         conn_handle);
;;;303    
;;;304            conn_status = connected ? BLE_CONN_STATUS_CONNECTED : BLE_CONN_STATUS_DISCONNECTED;
000026  b10f              CBZ      r7,|L13.44|
000028  2002              MOVS     r0,#2
00002a  e000              B        |L13.46|
                  |L13.44|
00002c  2001              MOVS     r0,#1
                  |L13.46|
00002e  4605              MOV      r5,r0
;;;305        }
000030  bf00              NOP      
                  |L13.50|
;;;306    
;;;307        return conn_status;
000032  4628              MOV      r0,r5
;;;308    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;309    
                          ENDP

                  |L13.56|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_user_flag_acquire||, CODE, READONLY, ALIGN=1

                  ble_conn_state_user_flag_acquire PROC
;;;381    
;;;382    ble_conn_state_user_flag_id_t ble_conn_state_user_flag_acquire(void)
000000  b510              PUSH     {r4,lr}
;;;383    {
;;;384        for (ble_conn_state_user_flag_id_t i = BLE_CONN_STATE_USER_FLAG0;
000002  2400              MOVS     r4,#0
000004  e00a              B        |L14.28|
                  |L14.6|
;;;385                                           i < BLE_CONN_STATE_N_USER_FLAGS;
;;;386                                           i++)
;;;387        {
;;;388            if ( !user_flag_is_acquired(i) )
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  b920              CBNZ     r0,|L14.24|
;;;389            {
;;;390                user_flag_acquire(i);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       user_flag_acquire
;;;391                return i;
000014  4620              MOV      r0,r4
                  |L14.22|
;;;392            }
;;;393        }
;;;394    
;;;395        return BLE_CONN_STATE_USER_FLAG_INVALID;
;;;396    }
000016  bd10              POP      {r4,pc}
                  |L14.24|
000018  1c60              ADDS     r0,r4,#1              ;386
00001a  b2c4              UXTB     r4,r0                 ;386
                  |L14.28|
00001c  2c18              CMP      r4,#0x18              ;385
00001e  dbf2              BLT      |L14.6|
000020  2018              MOVS     r0,#0x18              ;395
000022  e7f8              B        |L14.22|
;;;397    
                          ENDP


                          AREA ||i.ble_conn_state_user_flag_collection||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_collection PROC
;;;427    
;;;428    sdk_mapped_flags_t ble_conn_state_user_flag_collection(ble_conn_state_user_flag_id_t flag_id)
000000  b510              PUSH     {r4,lr}
;;;429    {
000002  4604              MOV      r4,r0
;;;430        if ( user_flag_is_acquired(flag_id) )
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       user_flag_is_acquired
00000a  b118              CBZ      r0,|L15.20|
;;;431        {
;;;432            return m_bcs.flags.user_flags[flag_id];
00000c  4802              LDR      r0,|L15.24|
00000e  f8500024          LDR      r0,[r0,r4,LSL #2]
                  |L15.18|
;;;433        }
;;;434        else
;;;435        {
;;;436            return 0;
;;;437        }
;;;438    }
000012  bd10              POP      {r4,pc}
                  |L15.20|
000014  2000              MOVS     r0,#0                 ;436
000016  e7fc              B        |L15.18|
                          ENDP

                  |L15.24|
                          DCD      m_bcs+0x58

                          AREA ||i.ble_conn_state_user_flag_get||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_get PROC
;;;398    
;;;399    bool ble_conn_state_user_flag_get(uint16_t conn_handle, ble_conn_state_user_flag_id_t flag_id)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;401        if (user_flag_is_acquired(flag_id))
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  b138              CBZ      r0,|L16.30|
;;;402        {
;;;403            return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
00000e  4805              LDR      r0,|L16.36|
000010  f8501024          LDR      r1,[r0,r4,LSL #2]
000014  462a              MOV      r2,r5
000016  3854              SUBS     r0,r0,#0x54
000018  f7fffffe          BL       sdk_mapped_flags_get_by_key
                  |L16.28|
;;;404                                               m_bcs.flags.user_flags[flag_id],
;;;405                                               conn_handle);
;;;406        }
;;;407        else
;;;408        {
;;;409            return false;
;;;410        }
;;;411    }
00001c  bd70              POP      {r4-r6,pc}
                  |L16.30|
00001e  2000              MOVS     r0,#0                 ;409
000020  e7fc              B        |L16.28|
;;;412    
                          ENDP

000022  0000              DCW      0x0000
                  |L16.36|
                          DCD      m_bcs+0x58

                          AREA ||i.ble_conn_state_user_flag_set||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_set PROC
;;;413    
;;;414    void ble_conn_state_user_flag_set(uint16_t                      conn_handle,
000000  b570              PUSH     {r4-r6,lr}
;;;415                                      ble_conn_state_user_flag_id_t flag_id,
;;;416                                      bool                          value)
;;;417    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;418        if (user_flag_is_acquired(flag_id))
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       user_flag_is_acquired
00000e  b138              CBZ      r0,|L17.32|
;;;419        {
;;;420            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000010  4804              LDR      r0,|L17.36|
000012  eb000184          ADD      r1,r0,r4,LSL #2
000016  4633              MOV      r3,r6
000018  462a              MOV      r2,r5
00001a  3854              SUBS     r0,r0,#0x54
00001c  f7fffffe          BL       sdk_mapped_flags_update_by_key
                  |L17.32|
;;;421                                          &m_bcs.flags.user_flags[flag_id],
;;;422                                           conn_handle,
;;;423                                           value);
;;;424        }
;;;425    }
000020  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      m_bcs+0x58

                          AREA ||i.ble_conn_state_valid||, CODE, READONLY, ALIGN=2

                  ble_conn_state_valid PROC
;;;265    
;;;266    bool ble_conn_state_valid(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;267    {
000002  4604              MOV      r4,r0
;;;268        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L18.20|
000006  4622              MOV      r2,r4
000008  6c41              LDR      r1,[r0,#0x44]  ; m_bcs
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;269                                           m_bcs.flags.valid_flags,
;;;270                                           conn_handle);
;;;271    }
000010  bd10              POP      {r4,pc}
;;;272    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      m_bcs

                          AREA ||i.ble_evt_handler||, CODE, READONLY, ALIGN=2

                  ble_evt_handler PROC
;;;218     */
;;;219    static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
000000  b570              PUSH     {r4-r6,lr}
;;;220    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;221        switch (p_ble_evt->header.evt_id)
000006  8820              LDRH     r0,[r4,#0]
000008  2810              CMP      r0,#0x10
00000a  d004              BEQ      |L19.22|
00000c  2811              CMP      r0,#0x11
00000e  d01f              BEQ      |L19.80|
000010  281a              CMP      r0,#0x1a
000012  d142              BNE      |L19.154|
000014  e020              B        |L19.88|
                  |L19.22|
;;;222        {
;;;223            case BLE_GAP_EVT_CONNECTED:
;;;224                record_purge_disconnected();
000016  f7fffffe          BL       record_purge_disconnected
;;;225    
;;;226                if ( !record_activate(p_ble_evt->evt.gap_evt.conn_handle) )
00001a  88a0              LDRH     r0,[r4,#4]
00001c  f7fffffe          BL       record_activate
000020  b930              CBNZ     r0,|L19.48|
;;;227                {
;;;228                    // No more records available. Should not happen.
;;;229                    APP_ERROR_HANDLER(NRF_ERROR_NO_MEM);
000022  bf00              NOP      
000024  a21e              ADR      r2,|L19.160|
000026  21e5              MOVS     r1,#0xe5
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       app_error_handler
00002e  e00e              B        |L19.78|
                  |L19.48|
;;;230                }
;;;231                else
;;;232                {
;;;233                    bool is_central =
000030  7be0              LDRB     r0,[r4,#0xf]
000032  2802              CMP      r0,#2
000034  d101              BNE      |L19.58|
000036  2001              MOVS     r0,#1
000038  e000              B        |L19.60|
                  |L19.58|
00003a  2000              MOVS     r0,#0
                  |L19.60|
00003c  4605              MOV      r5,r0
;;;234                            (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_CENTRAL);
;;;235    
;;;236                    sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
00003e  88a2              LDRH     r2,[r4,#4]
000040  462b              MOV      r3,r5
000042  4926              LDR      r1,|L19.220|
000044  f1a10048          SUB      r0,r1,#0x48
000048  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;237                                                  &m_bcs.flags.central_flags,
;;;238                                                   p_ble_evt->evt.gap_evt.conn_handle,
;;;239                                                   is_central);
;;;240                }
00004c  bf00              NOP      
                  |L19.78|
;;;241    
;;;242                break;
00004e  e024              B        |L19.154|
                  |L19.80|
;;;243    
;;;244            case BLE_GAP_EVT_DISCONNECTED:
;;;245                record_set_disconnected(p_ble_evt->evt.gap_evt.conn_handle);
000050  88a0              LDRH     r0,[r4,#4]
000052  f7fffffe          BL       record_set_disconnected
;;;246                break;
000056  e020              B        |L19.154|
                  |L19.88|
;;;247    
;;;248            case BLE_GAP_EVT_CONN_SEC_UPDATE:
;;;249                sdk_mapped_flags_update_by_key(
000058  7a20              LDRB     r0,[r4,#8]
00005a  2101              MOVS     r1,#1
00005c  ebb11f10          CMP      r1,r0,LSR #4
000060  da01              BGE      |L19.102|
000062  2001              MOVS     r0,#1
000064  e000              B        |L19.104|
                  |L19.102|
000066  2000              MOVS     r0,#0
                  |L19.104|
000068  4603              MOV      r3,r0
00006a  88a2              LDRH     r2,[r4,#4]
00006c  491b              LDR      r1,|L19.220|
00006e  1d09              ADDS     r1,r1,#4
000070  f1a1004c          SUB      r0,r1,#0x4c
000074  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;250                              m_bcs.valid_conn_handles,
;;;251                             &m_bcs.flags.encrypted_flags,
;;;252                              p_ble_evt->evt.gap_evt.conn_handle,
;;;253                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 1));
;;;254                sdk_mapped_flags_update_by_key(
000078  7a20              LDRB     r0,[r4,#8]
00007a  2102              MOVS     r1,#2
00007c  ebb11f10          CMP      r1,r0,LSR #4
000080  da01              BGE      |L19.134|
000082  2001              MOVS     r0,#1
000084  e000              B        |L19.136|
                  |L19.134|
000086  2000              MOVS     r0,#0
                  |L19.136|
000088  4603              MOV      r3,r0
00008a  88a2              LDRH     r2,[r4,#4]
00008c  4913              LDR      r1,|L19.220|
00008e  3108              ADDS     r1,r1,#8
000090  f1a10050          SUB      r0,r1,#0x50
000094  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;255                              m_bcs.valid_conn_handles,
;;;256                             &m_bcs.flags.mitm_protected_flags,
;;;257                              p_ble_evt->evt.gap_evt.conn_handle,
;;;258                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 2));
;;;259                break;
000098  bf00              NOP      
                  |L19.154|
00009a  bf00              NOP                            ;242
;;;260        }
;;;261    }
00009c  bd70              POP      {r4-r6,pc}
;;;262    
                          ENDP

00009e  0000              DCW      0x0000
                  |L19.160|
0000a0  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_co"
0000a4  2e5c2e2e
0000a8  5c2e2e5c
0000ac  2e2e5c2e
0000b0  2e5c636f
0000b4  6d706f6e
0000b8  656e7473
0000bc  5c626c65
0000c0  5c636f6d
0000c4  6d6f6e5c
0000c8  626c655f
0000cc  636f    
0000ce  6e6e5f73          DCB      "nn_state.c",0
0000d2  74617465
0000d6  2e6300  
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L19.220|
                          DCD      m_bcs+0x4c

                          AREA ||i.record_activate||, CODE, READONLY, ALIGN=2

                  record_activate PROC
;;;117     */
;;;118    static bool record_activate(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4604              MOV      r4,r0
;;;120        uint16_t available_index = sdk_mapped_flags_first_key_index_get(~m_bcs.flags.valid_flags);
000004  490f              LDR      r1,|L20.68|
000006  6c49              LDR      r1,[r1,#0x44]  ; m_bcs
000008  43c8              MVNS     r0,r1
00000a  f7fffffe          BL       sdk_mapped_flags_first_key_index_get
00000e  4605              MOV      r5,r0
;;;121    
;;;122        if (available_index != SDK_MAPPED_FLAGS_INVALID_INDEX)
000010  f64f70ff          MOV      r0,#0xffff
000014  4285              CMP      r5,r0
000016  d013              BEQ      |L20.64|
;;;123        {
;;;124            m_bcs.valid_conn_handles[available_index] = conn_handle;
000018  480a              LDR      r0,|L20.68|
00001a  1d00              ADDS     r0,r0,#4
00001c  f8204015          STRH     r4,[r0,r5,LSL #1]
;;;125            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000020  2301              MOVS     r3,#1
000022  4622              MOV      r2,r4
000024  f1000144          ADD      r1,r0,#0x44
000028  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;126                                          &m_bcs.flags.connected_flags,
;;;127                                           conn_handle,
;;;128                                           1);
;;;129            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
00002c  2301              MOVS     r3,#1
00002e  4622              MOV      r2,r4
000030  4904              LDR      r1,|L20.68|
000032  3144              ADDS     r1,r1,#0x44
000034  f1a10040          SUB      r0,r1,#0x40
000038  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;130                                          &m_bcs.flags.valid_flags,
;;;131                                           conn_handle,
;;;132                                           1);
;;;133    
;;;134            return true;
00003c  2001              MOVS     r0,#1
                  |L20.62|
;;;135        }
;;;136    
;;;137        return false;
;;;138    }
00003e  bd70              POP      {r4-r6,pc}
                  |L20.64|
000040  2000              MOVS     r0,#0                 ;137
000042  e7fc              B        |L20.62|
;;;139    
                          ENDP

                  |L20.68|
                          DCD      m_bcs

                          AREA ||i.record_invalidate||, CODE, READONLY, ALIGN=2

                  record_invalidate PROC
;;;144     */
;;;145    static void record_invalidate(uint16_t conn_handle)
000000  b538              PUSH     {r3-r5,lr}
;;;146    {
000002  4604              MOV      r4,r0
;;;147        sdk_mapped_flags_bulk_update_by_key(m_bcs.valid_conn_handles,
000004  2000              MOVS     r0,#0
000006  4623              MOV      r3,r4
000008  221d              MOVS     r2,#0x1d
00000a  4903              LDR      r1,|L21.24|
00000c  9000              STR      r0,[sp,#0]
00000e  f1a10040          SUB      r0,r1,#0x40
000012  f7fffffe          BL       sdk_mapped_flags_bulk_update_by_key
;;;148                                            m_bcs.flag_array,
;;;149                                            BLE_CONN_STATE_N_FLAGS,
;;;150                                            conn_handle,
;;;151                                            0);
;;;152    }
000016  bd38              POP      {r3-r5,pc}
;;;153    
                          ENDP

                  |L21.24|
                          DCD      m_bcs+0x44

                          AREA ||i.record_purge_disconnected||, CODE, READONLY, ALIGN=2

                  record_purge_disconnected PROC
;;;170     */
;;;171    static void record_purge_disconnected()
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  b0a2              SUB      sp,sp,#0x88
;;;173        sdk_mapped_flags_key_list_t disconnected_list;
;;;174    
;;;175        disconnected_list = sdk_mapped_flags_key_list_get(
000004  480e              LDR      r0,|L22.64|
000006  6c40              LDR      r0,[r0,#0x44]  ; m_bcs
000008  490d              LDR      r1,|L22.64|
00000a  6c89              LDR      r1,[r1,#0x48]
00000c  ea200201          BIC      r2,r0,r1
000010  490b              LDR      r1,|L22.64|
000012  1d09              ADDS     r1,r1,#4
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
00001a  2244              MOVS     r2,#0x44
00001c  4669              MOV      r1,sp
00001e  a811              ADD      r0,sp,#0x44
000020  f7fffffe          BL       __aeabi_memcpy4
;;;176                                       m_bcs.valid_conn_handles,
;;;177                                     (~m_bcs.flags.connected_flags) & (m_bcs.flags.valid_flags));
;;;178    
;;;179        for (uint32_t i = 0; i < disconnected_list.len; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L22.52|
                  |L22.40|
;;;180        {
;;;181            record_invalidate(disconnected_list.flag_keys[i]);
000028  a912              ADD      r1,sp,#0x48
00002a  f8310014          LDRH     r0,[r1,r4,LSL #1]
00002e  f7fffffe          BL       record_invalidate
000032  1c64              ADDS     r4,r4,#1              ;179
                  |L22.52|
000034  9811              LDR      r0,[sp,#0x44]         ;179
000036  42a0              CMP      r0,r4                 ;179
000038  d8f6              BHI      |L22.40|
;;;182        }
;;;183    }
00003a  b022              ADD      sp,sp,#0x88
00003c  bd10              POP      {r4,pc}
;;;184    
                          ENDP

00003e  0000              DCW      0x0000
                  |L22.64|
                          DCD      m_bcs

                          AREA ||i.record_set_disconnected||, CODE, READONLY, ALIGN=2

                  record_set_disconnected PROC
;;;158     */
;;;159    static void record_set_disconnected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;160    {
000002  4604              MOV      r4,r0
;;;161        sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000004  2300              MOVS     r3,#0
000006  4622              MOV      r2,r4
000008  4902              LDR      r1,|L23.20|
00000a  f1a10044          SUB      r0,r1,#0x44
00000e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;162                                      &m_bcs.flags.connected_flags,
;;;163                                       conn_handle,
;;;164                                       0);
;;;165    }
000012  bd10              POP      {r4,pc}
;;;166    
                          ENDP

                  |L23.20|
                          DCD      m_bcs+0x48

                          AREA ||i.user_flag_acquire||, CODE, READONLY, ALIGN=2

                  user_flag_acquire PROC
;;;201     */
;;;202    static void user_flag_acquire(ble_conn_state_user_flag_id_t flag_id)
000000  4903              LDR      r1,|L24.16|
;;;203    {
;;;204        m_bcs.acquired_flags |= (1 << flag_id);
000002  6809              LDR      r1,[r1,#0]  ; m_bcs
000004  2201              MOVS     r2,#1
000006  4082              LSLS     r2,r2,r0
000008  4311              ORRS     r1,r1,r2
00000a  4a01              LDR      r2,|L24.16|
00000c  6011              STR      r1,[r2,#0]  ; m_bcs
;;;205    }
00000e  4770              BX       lr
;;;206    
                          ENDP

                  |L24.16|
                          DCD      m_bcs

                          AREA ||i.user_flag_is_acquired||, CODE, READONLY, ALIGN=2

                  user_flag_is_acquired PROC
;;;191     */
;;;192    static bool user_flag_is_acquired(ble_conn_state_user_flag_id_t flag_id)
000000  4601              MOV      r1,r0
;;;193    {
;;;194        return ((m_bcs.acquired_flags & (1 << flag_id)) != 0);
000002  4805              LDR      r0,|L25.24|
000004  6800              LDR      r0,[r0,#0]  ; m_bcs
000006  2201              MOVS     r2,#1
000008  408a              LSLS     r2,r2,r1
00000a  4010              ANDS     r0,r0,r2
00000c  b108              CBZ      r0,|L25.18|
00000e  2001              MOVS     r0,#1
                  |L25.16|
;;;195    }
000010  4770              BX       lr
                  |L25.18|
000012  2000              MOVS     r0,#0                 ;194
000014  e7fc              B        |L25.16|
;;;196    
                          ENDP

000016  0000              DCW      0x0000
                  |L25.24|
                          DCD      m_bcs

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_bcs
                          %        184

                          AREA sdh_ble_observers0, DATA, READONLY, ALIGN=2

                  m_ble_evt_observer
                  ||__tagsym$$used||
                          DCD      ble_evt_handler
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_conn_state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_ble_conn_state_c_eac0480a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REVSH|
#line 402
|__asm___16_ble_conn_state_c_eac0480a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____RRX|
#line 587
|__asm___16_ble_conn_state_c_eac0480a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
