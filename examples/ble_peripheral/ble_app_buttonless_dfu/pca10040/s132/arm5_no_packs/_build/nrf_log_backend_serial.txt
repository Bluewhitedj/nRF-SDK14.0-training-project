; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_log_backend_serial.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_log_backend_serial.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_log_backend_serial.crf ..\..\..\..\..\..\components\libraries\experimental_log\src\nrf_log_backend_serial.c]
                          THUMB

                          AREA ||i.nrf_log_backend_serial_put||, CODE, READONLY, ALIGN=1

                  nrf_log_backend_serial_put PROC
;;;45     
;;;46     void nrf_log_backend_serial_put(nrf_log_backend_t const * p_backend,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;47                                    nrf_log_entry_t * p_msg,
;;;48                                    uint8_t * p_buffer,
;;;49                                    uint32_t  length,
;;;50                                    nrf_fprintf_fwrite tx_func)
;;;51     {
000004  b093              SUB      sp,sp,#0x4c
000006  4682              MOV      r10,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9070          LDR      r9,[sp,#0x70]
;;;52         nrf_memobj_get(p_msg);
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       nrf_memobj_get
;;;53     
;;;54         nrf_fprintf_ctx_t fprintf_ctx = {
000018  2118              MOVS     r1,#0x18
00001a  a80d              ADD      r0,sp,#0x34
00001c  f7fffffe          BL       __aeabi_memclr4
000020  970d              STR      r7,[sp,#0x34]
000022  f8cd8038          STR      r8,[sp,#0x38]
000026  f8cd9048          STR      r9,[sp,#0x48]
;;;55                 .p_io_buffer = (char *)p_buffer,
;;;56                 .io_buffer_size = length,
;;;57                 .io_buffer_cnt = 0,
;;;58                 .auto_flush = false,
;;;59                 .p_user_ctx = NULL,
;;;60                 .fwrite = tx_func
;;;61         };
;;;62     
;;;63         nrf_log_str_formatter_entry_params_t params;
;;;64     
;;;65         nrf_log_header_t header;
;;;66         uint32_t         memobj_offset = 0;
00002a  2500              MOVS     r5,#0
;;;67         nrf_memobj_read(p_msg, &header, HEADER_SIZE*sizeof(uint32_t), memobj_offset);
00002c  462b              MOV      r3,r5
00002e  2208              MOVS     r2,#8
000030  a907              ADD      r1,sp,#0x1c
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       nrf_memobj_read
;;;68         memobj_offset = HEADER_SIZE*sizeof(uint32_t);
000038  2508              MOVS     r5,#8
;;;69     
;;;70         params.timestamp = header.timestamp;
00003a  9809              LDR      r0,[sp,#0x24]
00003c  900a              STR      r0,[sp,#0x28]
;;;71         params.module_id = header.module_id;
00003e  9808              LDR      r0,[sp,#0x20]
000040  b280              UXTH     r0,r0
000042  f8ad002c          STRH     r0,[sp,#0x2c]
;;;72         params.use_colors = NRF_LOG_USES_COLORS;
000046  2000              MOVS     r0,#0
000048  f88d0030          STRB     r0,[sp,#0x30]
;;;73     
;;;74         /*lint -save -e438*/
;;;75         if (header.base.generic.type == HEADER_TYPE_STD)
00004c  9807              LDR      r0,[sp,#0x1c]
00004e  f0000003          AND      r0,r0,#3
000052  2801              CMP      r0,#1
000054  d120              BNE      |L1.152|
;;;76         {
;;;77             char const * p_log_str = (char const *)((uint32_t)header.base.std.addr);
000056  9807              LDR      r0,[sp,#0x1c]
000058  ea4f2b90          LSR      r11,r0,#10
;;;78             params.severity  = (nrf_log_severity_t)header.base.std.severity;
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  f3c000c2          UBFX     r0,r0,#3,#3
000062  f88d002e          STRB     r0,[sp,#0x2e]
;;;79             params.raw       = header.base.std.raw;
000066  9807              LDR      r0,[sp,#0x1c]
000068  f3c00080          UBFX     r0,r0,#2,#1
00006c  f88d002f          STRB     r0,[sp,#0x2f]
;;;80             uint32_t nargs = header.base.std.nargs;
000070  9807              LDR      r0,[sp,#0x1c]
000072  f3c01483          UBFX     r4,r0,#6,#4
;;;81             uint32_t args[NRF_LOG_MAX_NUM_OF_ARGS];
;;;82     
;;;83             nrf_memobj_read(p_msg, args, nargs*sizeof(uint32_t), memobj_offset);
000076  00a2              LSLS     r2,r4,#2
000078  462b              MOV      r3,r5
00007a  a901              ADD      r1,sp,#4
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       nrf_memobj_read
;;;84             memobj_offset += (nargs*sizeof(uint32_t));
000082  eb050584          ADD      r5,r5,r4,LSL #2
;;;85     
;;;86             nrf_log_std_entry_process(p_log_str,
000086  a80d              ADD      r0,sp,#0x34
000088  ab0a              ADD      r3,sp,#0x28
00008a  4622              MOV      r2,r4
00008c  a901              ADD      r1,sp,#4
00008e  9000              STR      r0,[sp,#0]
000090  4658              MOV      r0,r11
000092  f7fffffe          BL       nrf_log_std_entry_process
;;;87                                       args,
;;;88                                       nargs,
;;;89                                       &params,
;;;90                                       &fprintf_ctx);
;;;91     
;;;92         }
000096  e02c              B        |L1.242|
                  |L1.152|
;;;93         else if (header.base.generic.type == HEADER_TYPE_HEXDUMP)
000098  9807              LDR      r0,[sp,#0x1c]
00009a  f0000003          AND      r0,r0,#3
00009e  2802              CMP      r0,#2
0000a0  d127              BNE      |L1.242|
;;;94         {
;;;95             uint32_t data_len = header.base.hexdump.len;
0000a2  9807              LDR      r0,[sp,#0x1c]
0000a4  ea4f5b90          LSR      r11,r0,#22
;;;96             params.severity   = (nrf_log_severity_t)header.base.hexdump.severity;
0000a8  9807              LDR      r0,[sp,#0x1c]
0000aa  f3c000c2          UBFX     r0,r0,#3,#3
0000ae  f88d002e          STRB     r0,[sp,#0x2e]
;;;97             params.raw        = header.base.hexdump.raw;
0000b2  9807              LDR      r0,[sp,#0x1c]
0000b4  f3c00080          UBFX     r0,r0,#2,#1
0000b8  f88d002f          STRB     r0,[sp,#0x2f]
;;;98             uint8_t data_buf[8];
;;;99             uint32_t chunk_len;
;;;100            do
0000bc  bf00              NOP      
                  |L1.190|
;;;101            {
;;;102                chunk_len = sizeof(data_buf) > data_len ? data_len : sizeof(data_buf);
0000be  f1bb0f08          CMP      r11,#8
0000c2  d201              BCS      |L1.200|
0000c4  4658              MOV      r0,r11
0000c6  e000              B        |L1.202|
                  |L1.200|
0000c8  2008              MOVS     r0,#8
                  |L1.202|
0000ca  4604              MOV      r4,r0
;;;103                nrf_memobj_read(p_msg, data_buf, chunk_len, memobj_offset);
0000cc  462b              MOV      r3,r5
0000ce  4622              MOV      r2,r4
0000d0  a905              ADD      r1,sp,#0x14
0000d2  4630              MOV      r0,r6
0000d4  f7fffffe          BL       nrf_memobj_read
;;;104                memobj_offset += chunk_len;
0000d8  4425              ADD      r5,r5,r4
;;;105                data_len -= chunk_len;
0000da  ebab0b04          SUB      r11,r11,r4
;;;106    
;;;107                nrf_log_hexdump_entry_process(data_buf,
0000de  ab0d              ADD      r3,sp,#0x34
0000e0  aa0a              ADD      r2,sp,#0x28
0000e2  4621              MOV      r1,r4
0000e4  a805              ADD      r0,sp,#0x14
0000e6  f7fffffe          BL       nrf_log_hexdump_entry_process
;;;108                                             chunk_len,
;;;109                                             &params,
;;;110                                             &fprintf_ctx);
;;;111            } while (data_len > 0);
0000ea  f1bb0f00          CMP      r11,#0
0000ee  d1e6              BNE      |L1.190|
;;;112        }
0000f0  bf00              NOP      
                  |L1.242|
;;;113        nrf_memobj_put(p_msg);
0000f2  4630              MOV      r0,r6
0000f4  f7fffffe          BL       nrf_memobj_put
;;;114        /*lint -restore*/
;;;115    }
0000f8  b013              ADD      sp,sp,#0x4c
0000fa  e8bd8ff0          POP      {r4-r11,pc}
;;;116    #endif //NRF_LOG_ENABLED
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_log\\src\\nrf_log_backend_serial.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_nrf_log_backend_serial_c_0c116b52____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___24_nrf_log_backend_serial_c_0c116b52____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_nrf_log_backend_serial_c_0c116b52____REVSH|
#line 402
|__asm___24_nrf_log_backend_serial_c_0c116b52____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_nrf_log_backend_serial_c_0c116b52____RRX|
#line 587
|__asm___24_nrf_log_backend_serial_c_0c116b52____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
