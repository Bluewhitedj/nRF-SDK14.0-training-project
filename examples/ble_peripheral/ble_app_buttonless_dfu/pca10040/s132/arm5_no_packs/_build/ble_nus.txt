; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_nus.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_nus.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_nus.crf ..\..\..\..\..\..\components\ble\ble_services\ble_nus\ble_nus.c]
                          THUMB

                          AREA ||i.ble_nus_init||, CODE, READONLY, ALIGN=2

                  ble_nus_init PROC
;;;271    
;;;272    uint32_t ble_nus_init(ble_nus_t * p_nus, ble_nus_init_t const * p_nus_init)
000000  b570              PUSH     {r4-r6,lr}
;;;273    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;274        uint32_t      err_code;
;;;275        ble_uuid_t    ble_uuid;
;;;276        ble_uuid128_t nus_base_uuid = NUS_BASE_UUID;
000008  4b21              LDR      r3,|L1.144|
00000a  cb0f              LDM      r3,{r0-r3}
00000c  ad01              ADD      r5,sp,#4
00000e  c50f              STM      r5!,{r0-r3}
;;;277    
;;;278        VERIFY_PARAM_NOT_NULL(p_nus);
000010  bf00              NOP      
000012  b914              CBNZ     r4,|L1.26|
000014  200e              MOVS     r0,#0xe
                  |L1.22|
;;;279        VERIFY_PARAM_NOT_NULL(p_nus_init);
;;;280    
;;;281        // Initialize the service structure.
;;;282        p_nus->conn_handle             = BLE_CONN_HANDLE_INVALID;
;;;283        p_nus->data_handler            = p_nus_init->data_handler;
;;;284        p_nus->is_notification_enabled = false;
;;;285    
;;;286        /**@snippet [Adding proprietary Service to the SoftDevice] */
;;;287        // Add a custom base UUID.
;;;288        err_code = sd_ble_uuid_vs_add(&nus_base_uuid, &p_nus->uuid_type);
;;;289        VERIFY_SUCCESS(err_code);
;;;290    
;;;291        ble_uuid.type = p_nus->uuid_type;
;;;292        ble_uuid.uuid = BLE_UUID_NUS_SERVICE;
;;;293    
;;;294        // Add the service.
;;;295        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY,
;;;296                                            &ble_uuid,
;;;297                                            &p_nus->service_handle);
;;;298        /**@snippet [Adding proprietary Service to the SoftDevice] */
;;;299        VERIFY_SUCCESS(err_code);
;;;300    
;;;301        // Add the RX Characteristic.
;;;302        err_code = rx_char_add(p_nus, p_nus_init);
;;;303        VERIFY_SUCCESS(err_code);
;;;304    
;;;305        // Add the TX Characteristic.
;;;306        err_code = tx_char_add(p_nus, p_nus_init);
;;;307        VERIFY_SUCCESS(err_code);
;;;308    
;;;309        return NRF_SUCCESS;
;;;310    }
000016  b006              ADD      sp,sp,#0x18
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  bf00              NOP                            ;278
00001c  bf00              NOP                            ;279
00001e  b90e              CBNZ     r6,|L1.36|
000020  200e              MOVS     r0,#0xe               ;279
000022  e7f8              B        |L1.22|
                  |L1.36|
000024  bf00              NOP                            ;279
000026  f64f70ff          MOV      r0,#0xffff            ;282
00002a  82a0              STRH     r0,[r4,#0x14]         ;282
00002c  6830              LDR      r0,[r6,#0]            ;283
00002e  61a0              STR      r0,[r4,#0x18]         ;283
000030  2000              MOVS     r0,#0                 ;284
000032  75a0              STRB     r0,[r4,#0x16]         ;284
000034  4621              MOV      r1,r4                 ;288
000036  a801              ADD      r0,sp,#4              ;288
000038  df62              SVC      #0x62                 ;288
00003a  4605              MOV      r5,r0                 ;288
00003c  bf00              NOP                            ;289
00003e  b10d              CBZ      r5,|L1.68|
000040  4628              MOV      r0,r5                 ;289
000042  e7e8              B        |L1.22|
                  |L1.68|
000044  bf00              NOP                            ;289
000046  7820              LDRB     r0,[r4,#0]            ;291
000048  f88d0016          STRB     r0,[sp,#0x16]         ;291
00004c  2001              MOVS     r0,#1                 ;292
00004e  f8ad0014          STRH     r0,[sp,#0x14]         ;292
000052  1ca2              ADDS     r2,r4,#2              ;295
000054  a905              ADD      r1,sp,#0x14           ;295
000056  dfa0              SVC      #0xa0                 ;295
000058  4605              MOV      r5,r0                 ;295
00005a  bf00              NOP                            ;299
00005c  b10d              CBZ      r5,|L1.98|
00005e  4628              MOV      r0,r5                 ;299
000060  e7d9              B        |L1.22|
                  |L1.98|
000062  bf00              NOP                            ;299
000064  4631              MOV      r1,r6                 ;302
000066  4620              MOV      r0,r4                 ;302
000068  f7fffffe          BL       rx_char_add
00006c  4605              MOV      r5,r0                 ;302
00006e  bf00              NOP                            ;303
000070  b10d              CBZ      r5,|L1.118|
000072  4628              MOV      r0,r5                 ;303
000074  e7cf              B        |L1.22|
                  |L1.118|
000076  bf00              NOP                            ;303
000078  4631              MOV      r1,r6                 ;306
00007a  4620              MOV      r0,r4                 ;306
00007c  f7fffffe          BL       tx_char_add
000080  4605              MOV      r5,r0                 ;306
000082  bf00              NOP                            ;307
000084  b10d              CBZ      r5,|L1.138|
000086  4628              MOV      r0,r5                 ;307
000088  e7c5              B        |L1.22|
                  |L1.138|
00008a  bf00              NOP                            ;307
00008c  2000              MOVS     r0,#0                 ;309
00008e  e7c2              B        |L1.22|
;;;311    
                          ENDP

                  |L1.144|
                          DCD      ||.constdata||+0x10

                          AREA ||i.ble_nus_on_ble_evt||, CODE, READONLY, ALIGN=2

                  ble_nus_on_ble_evt PROC
;;;231    
;;;232    void ble_nus_on_ble_evt(ble_evt_t const * p_ble_evt, void * p_context)
000000  b57f              PUSH     {r0-r6,lr}
;;;233    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;234        if ((p_context == NULL) || (p_ble_evt == NULL))
000006  b106              CBZ      r6,|L2.10|
000008  b904              CBNZ     r4,|L2.12|
                  |L2.10|
;;;235        {
;;;236            return;
;;;237        }
;;;238    
;;;239        ble_nus_t * p_nus = (ble_nus_t *)p_context;
;;;240    
;;;241        switch (p_ble_evt->header.evt_id)
;;;242        {
;;;243            case BLE_GAP_EVT_CONNECTED:
;;;244                on_connect(p_nus, p_ble_evt);
;;;245                break;
;;;246    
;;;247            case BLE_GAP_EVT_DISCONNECTED:
;;;248                on_disconnect(p_nus, p_ble_evt);
;;;249                break;
;;;250    
;;;251            case BLE_GATTS_EVT_WRITE:
;;;252                on_write(p_nus, p_ble_evt);
;;;253                break;
;;;254    
;;;255            case BLE_GATTS_EVT_HVN_TX_COMPLETE:
;;;256            {
;;;257                //notify with empty data that some tx was completed.
;;;258                ble_nus_evt_t evt = {
;;;259                        .type = BLE_NUS_EVT_TX_RDY,
;;;260                        .p_nus = p_nus
;;;261                };
;;;262                p_nus->data_handler(&evt);
;;;263                break;
;;;264            }
;;;265            default:
;;;266                // No implementation needed.
;;;267                break;
;;;268        }
;;;269    }
00000a  bd7f              POP      {r0-r6,pc}
                  |L2.12|
00000c  4635              MOV      r5,r6                 ;239
00000e  8820              LDRH     r0,[r4,#0]            ;241
000010  2810              CMP      r0,#0x10              ;241
000012  d006              BEQ      |L2.34|
000014  2811              CMP      r0,#0x11              ;241
000016  d009              BEQ      |L2.44|
000018  2850              CMP      r0,#0x50              ;241
00001a  d00c              BEQ      |L2.54|
00001c  2857              CMP      r0,#0x57              ;241
00001e  d118              BNE      |L2.82|
000020  e00e              B        |L2.64|
                  |L2.34|
000022  4621              MOV      r1,r4                 ;244
000024  4628              MOV      r0,r5                 ;244
000026  f7fffffe          BL       on_connect
00002a  e013              B        |L2.84|
                  |L2.44|
00002c  4621              MOV      r1,r4                 ;248
00002e  4628              MOV      r0,r5                 ;248
000030  f7fffffe          BL       on_disconnect
000034  e00e              B        |L2.84|
                  |L2.54|
000036  4621              MOV      r1,r4                 ;252
000038  4628              MOV      r0,r5                 ;252
00003a  f7fffffe          BL       on_write
00003e  e009              B        |L2.84|
                  |L2.64|
000040  4b06              LDR      r3,|L2.92|
000042  cb0f              LDM      r3,{r0-r3}            ;258
000044  e88d000f          STM      sp,{r0-r3}            ;258
000048  9501              STR      r5,[sp,#4]            ;258
00004a  4668              MOV      r0,sp                 ;262
00004c  69a9              LDR      r1,[r5,#0x18]         ;262
00004e  4788              BLX      r1                    ;262
000050  e000              B        |L2.84|
                  |L2.82|
000052  bf00              NOP                            ;267
                  |L2.84|
000054  bf00              NOP                            ;245
000056  bf00              NOP      
000058  e7d7              B        |L2.10|
;;;270    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      ||.constdata||

                          AREA ||i.ble_nus_string_send||, CODE, READONLY, ALIGN=1

                  ble_nus_string_send PROC
;;;312    
;;;313    uint32_t ble_nus_string_send(ble_nus_t * p_nus, uint8_t * p_string, uint16_t * p_length)
000000  b57f              PUSH     {r0-r6,lr}
;;;314    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;315        ble_gatts_hvx_params_t hvx_params;
;;;316    
;;;317        VERIFY_PARAM_NOT_NULL(p_nus);
000008  bf00              NOP      
00000a  b914              CBNZ     r4,|L3.18|
00000c  200e              MOVS     r0,#0xe
                  |L3.14|
;;;318    
;;;319        if ((p_nus->conn_handle == BLE_CONN_HANDLE_INVALID) || (!p_nus->is_notification_enabled))
;;;320        {
;;;321            return NRF_ERROR_INVALID_STATE;
;;;322        }
;;;323    
;;;324        if (*p_length > BLE_NUS_MAX_DATA_LEN)
;;;325        {
;;;326            return NRF_ERROR_INVALID_PARAM;
;;;327        }
;;;328    
;;;329        memset(&hvx_params, 0, sizeof(hvx_params));
;;;330    
;;;331        hvx_params.handle = p_nus->tx_handles.value_handle;
;;;332        hvx_params.p_data = p_string;
;;;333        hvx_params.p_len  = p_length;
;;;334        hvx_params.type   = BLE_GATT_HVX_NOTIFICATION;
;;;335    
;;;336        return sd_ble_gatts_hvx(p_nus->conn_handle, &hvx_params);
;;;337    }
00000e  b004              ADD      sp,sp,#0x10
000010  bd70              POP      {r4-r6,pc}
                  |L3.18|
000012  bf00              NOP                            ;317
000014  8aa0              LDRH     r0,[r4,#0x14]         ;319
000016  f64f71ff          MOV      r1,#0xffff            ;319
00001a  4288              CMP      r0,r1                 ;319
00001c  d001              BEQ      |L3.34|
00001e  7da0              LDRB     r0,[r4,#0x16]         ;319
000020  b908              CBNZ     r0,|L3.38|
                  |L3.34|
000022  2008              MOVS     r0,#8                 ;321
000024  e7f3              B        |L3.14|
                  |L3.38|
000026  8828              LDRH     r0,[r5,#0]            ;324
000028  2814              CMP      r0,#0x14              ;324
00002a  dd01              BLE      |L3.48|
00002c  2007              MOVS     r0,#7                 ;326
00002e  e7ee              B        |L3.14|
                  |L3.48|
000030  2000              MOVS     r0,#0                 ;329
000032  9000              STR      r0,[sp,#0]            ;329
000034  9001              STR      r0,[sp,#4]            ;329
000036  9002              STR      r0,[sp,#8]            ;329
000038  9003              STR      r0,[sp,#0xc]          ;329
00003a  88a0              LDRH     r0,[r4,#4]            ;331
00003c  f8ad0000          STRH     r0,[sp,#0]            ;331
000040  9603              STR      r6,[sp,#0xc]          ;332
000042  9502              STR      r5,[sp,#8]            ;333
000044  2001              MOVS     r0,#1                 ;334
000046  f88d0002          STRB     r0,[sp,#2]            ;334
00004a  8aa0              LDRH     r0,[r4,#0x14]         ;336
00004c  4669              MOV      r1,sp                 ;336
00004e  dfa6              SVC      #0xa6                 ;336
000050  e7dd              B        |L3.14|
;;;338    
                          ENDP


                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=1

                  on_connect PROC
;;;60      */
;;;61     static void on_connect(ble_nus_t * p_nus, ble_evt_t const * p_ble_evt)
000000  888a              LDRH     r2,[r1,#4]
;;;62     {
;;;63         p_nus->conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  8282              STRH     r2,[r0,#0x14]
;;;64     }
000004  4770              BX       lr
;;;65     
                          ENDP


                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=1

                  on_disconnect PROC
;;;71      */
;;;72     static void on_disconnect(ble_nus_t * p_nus, ble_evt_t const * p_ble_evt)
000000  f64f72ff          MOV      r2,#0xffff
;;;73     {
;;;74         UNUSED_PARAMETER(p_ble_evt);
;;;75         p_nus->conn_handle = BLE_CONN_HANDLE_INVALID;
000004  8282              STRH     r2,[r0,#0x14]
;;;76     }
000006  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||i.on_write||, CODE, READONLY, ALIGN=1

                  on_write PROC
;;;83      */
;;;84     static void on_write(ble_nus_t * p_nus, ble_evt_t const * p_ble_evt)
000000  b57f              PUSH     {r0-r6,lr}
;;;85     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;86         ble_gatts_evt_write_t const * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
000006  1db5              ADDS     r5,r6,#6
;;;87         ble_nus_evt_t evt;
;;;88         evt.p_nus = p_nus;
000008  9401              STR      r4,[sp,#4]
;;;89         if (   (p_evt_write->handle == p_nus->tx_handles.cccd_handle)
00000a  8829              LDRH     r1,[r5,#0]
00000c  8920              LDRH     r0,[r4,#8]
00000e  4281              CMP      r1,r0
000010  d116              BNE      |L6.64|
;;;90             && (p_evt_write->len == 2))
000012  8968              LDRH     r0,[r5,#0xa]
000014  2802              CMP      r0,#2
000016  d113              BNE      |L6.64|
;;;91         {
;;;92             if (ble_srv_is_notification_enabled(p_evt_write->data))
000018  f105000c          ADD      r0,r5,#0xc
00001c  f7fffffe          BL       ble_srv_is_notification_enabled
000020  b128              CBZ      r0,|L6.46|
;;;93             {
;;;94                 p_nus->is_notification_enabled = true;
000022  2001              MOVS     r0,#1
000024  75a0              STRB     r0,[r4,#0x16]
;;;95                 evt.type = BLE_NUS_EVT_COMM_STARTED;
000026  2002              MOVS     r0,#2
000028  f88d0000          STRB     r0,[sp,#0]
00002c  e004              B        |L6.56|
                  |L6.46|
;;;96             }
;;;97             else
;;;98             {
;;;99                 p_nus->is_notification_enabled = false;
00002e  2000              MOVS     r0,#0
000030  75a0              STRB     r0,[r4,#0x16]
;;;100                evt.type = BLE_NUS_EVT_COMM_STOPPED;
000032  2003              MOVS     r0,#3
000034  f88d0000          STRB     r0,[sp,#0]
                  |L6.56|
;;;101            }
;;;102            p_nus->data_handler(&evt);
000038  4668              MOV      r0,sp
00003a  69a1              LDR      r1,[r4,#0x18]
00003c  4788              BLX      r1
00003e  e011              B        |L6.100|
                  |L6.64|
;;;103        }
;;;104        else if (   (p_evt_write->handle == p_nus->rx_handles.value_handle)
000040  8828              LDRH     r0,[r5,#0]
000042  89a1              LDRH     r1,[r4,#0xc]
000044  4288              CMP      r0,r1
000046  d10d              BNE      |L6.100|
;;;105                 && (p_nus->data_handler != NULL))
000048  69a0              LDR      r0,[r4,#0x18]
00004a  b158              CBZ      r0,|L6.100|
;;;106        {
;;;107            evt.params.rx_data.p_data = p_evt_write->data;
00004c  f105000c          ADD      r0,r5,#0xc
000050  9002              STR      r0,[sp,#8]
;;;108            evt.params.rx_data.length = p_evt_write->len;
000052  8969              LDRH     r1,[r5,#0xa]
000054  f8ad100c          STRH     r1,[sp,#0xc]
;;;109            evt.type = BLE_NUS_EVT_RX_DATA;
000058  2000              MOVS     r0,#0
00005a  f88d0000          STRB     r0,[sp,#0]
;;;110            p_nus->data_handler(&evt);
00005e  4668              MOV      r0,sp
000060  69a1              LDR      r1,[r4,#0x18]
000062  4788              BLX      r1
                  |L6.100|
;;;111        }
;;;112        else
;;;113        {
;;;114            // Do Nothing. This event is not relevant for this service.
;;;115        }
;;;116    }
000064  bd7f              POP      {r0-r6,pc}
;;;117    
                          ENDP


                          AREA ||i.rx_char_add||, CODE, READONLY, ALIGN=1

                  rx_char_add PROC
;;;186     */
;;;187    static uint32_t rx_char_add(ble_nus_t * p_nus, const ble_nus_init_t * p_nus_init)
000000  b530              PUSH     {r4,r5,lr}
;;;188    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;189        ble_gatts_char_md_t char_md;
;;;190        ble_gatts_attr_t    attr_char_value;
;;;191        ble_uuid_t          ble_uuid;
;;;192        ble_gatts_attr_md_t attr_md;
;;;193    
;;;194        memset(&char_md, 0, sizeof(char_md));
000008  211c              MOVS     r1,#0x1c
00000a  a808              ADD      r0,sp,#0x20
00000c  f7fffffe          BL       __aeabi_memclr4
;;;195    
;;;196        char_md.char_props.write         = 1;
000010  f89d0020          LDRB     r0,[sp,#0x20]
000014  f0200008          BIC      r0,r0,#8
000018  3008              ADDS     r0,r0,#8
00001a  f88d0020          STRB     r0,[sp,#0x20]
;;;197        char_md.char_props.write_wo_resp = 1;
00001e  f89d0020          LDRB     r0,[sp,#0x20]
000022  f0200004          BIC      r0,r0,#4
000026  1d00              ADDS     r0,r0,#4
000028  f88d0020          STRB     r0,[sp,#0x20]
;;;198        char_md.p_char_user_desc         = NULL;
00002c  2000              MOVS     r0,#0
00002e  9009              STR      r0,[sp,#0x24]
;;;199        char_md.p_char_pf                = NULL;
000030  900b              STR      r0,[sp,#0x2c]
;;;200        char_md.p_user_desc_md           = NULL;
000032  900c              STR      r0,[sp,#0x30]
;;;201        char_md.p_cccd_md                = NULL;
000034  900d              STR      r0,[sp,#0x34]
;;;202        char_md.p_sccd_md                = NULL;
000036  900e              STR      r0,[sp,#0x38]
;;;203    
;;;204        ble_uuid.type = p_nus->uuid_type;
000038  7820              LDRB     r0,[r4,#0]
00003a  f88d000a          STRB     r0,[sp,#0xa]
;;;205        ble_uuid.uuid = BLE_UUID_NUS_RX_CHARACTERISTIC;
00003e  2002              MOVS     r0,#2
000040  f8ad0008          STRH     r0,[sp,#8]
;;;206    
;;;207        memset(&attr_md, 0, sizeof(attr_md));
000044  2000              MOVS     r0,#0
000046  9001              STR      r0,[sp,#4]
;;;208    
;;;209        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
000048  bf00              NOP      
00004a  f89d0004          LDRB     r0,[sp,#4]
00004e  f020000f          BIC      r0,r0,#0xf
000052  1c40              ADDS     r0,r0,#1
000054  f88d0004          STRB     r0,[sp,#4]
000058  f89d0004          LDRB     r0,[sp,#4]
00005c  f02000f0          BIC      r0,r0,#0xf0
000060  3010              ADDS     r0,r0,#0x10
000062  f88d0004          STRB     r0,[sp,#4]
000066  bf00              NOP      
;;;210        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
000068  bf00              NOP      
00006a  f89d0005          LDRB     r0,[sp,#5]
00006e  f020000f          BIC      r0,r0,#0xf
000072  1c40              ADDS     r0,r0,#1
000074  f88d0005          STRB     r0,[sp,#5]
000078  f89d0005          LDRB     r0,[sp,#5]
00007c  f02000f0          BIC      r0,r0,#0xf0
000080  3010              ADDS     r0,r0,#0x10
000082  f88d0005          STRB     r0,[sp,#5]
000086  bf00              NOP      
;;;211    
;;;212        attr_md.vloc    = BLE_GATTS_VLOC_STACK;
000088  f89d0006          LDRB     r0,[sp,#6]
00008c  f0200006          BIC      r0,r0,#6
000090  1c80              ADDS     r0,r0,#2
000092  f88d0006          STRB     r0,[sp,#6]
;;;213        attr_md.rd_auth = 0;
000096  f89d0006          LDRB     r0,[sp,#6]
00009a  f0200008          BIC      r0,r0,#8
00009e  f88d0006          STRB     r0,[sp,#6]
;;;214        attr_md.wr_auth = 0;
0000a2  f89d0006          LDRB     r0,[sp,#6]
0000a6  f0200010          BIC      r0,r0,#0x10
0000aa  f88d0006          STRB     r0,[sp,#6]
;;;215        attr_md.vlen    = 1;
0000ae  f89d0006          LDRB     r0,[sp,#6]
0000b2  f0200001          BIC      r0,r0,#1
0000b6  1c40              ADDS     r0,r0,#1
0000b8  f88d0006          STRB     r0,[sp,#6]
;;;216    
;;;217        memset(&attr_char_value, 0, sizeof(attr_char_value));
0000bc  2114              MOVS     r1,#0x14
0000be  a803              ADD      r0,sp,#0xc
0000c0  f7fffffe          BL       __aeabi_memclr4
;;;218    
;;;219        attr_char_value.p_uuid    = &ble_uuid;
0000c4  a802              ADD      r0,sp,#8
0000c6  9003              STR      r0,[sp,#0xc]
;;;220        attr_char_value.p_attr_md = &attr_md;
0000c8  a801              ADD      r0,sp,#4
0000ca  9004              STR      r0,[sp,#0x10]
;;;221        attr_char_value.init_len  = 1;
0000cc  2001              MOVS     r0,#1
0000ce  f8ad0014          STRH     r0,[sp,#0x14]
;;;222        attr_char_value.init_offs = 0;
0000d2  2000              MOVS     r0,#0
0000d4  f8ad0016          STRH     r0,[sp,#0x16]
;;;223        attr_char_value.max_len   = BLE_NUS_MAX_RX_CHAR_LEN;
0000d8  2014              MOVS     r0,#0x14
0000da  f8ad0018          STRH     r0,[sp,#0x18]
;;;224    
;;;225        return sd_ble_gatts_characteristic_add(p_nus->service_handle,
0000de  8860              LDRH     r0,[r4,#2]
0000e0  f104030c          ADD      r3,r4,#0xc
0000e4  aa03              ADD      r2,sp,#0xc
0000e6  a908              ADD      r1,sp,#0x20
0000e8  dfa2              SVC      #0xa2
;;;226                                               &char_md,
;;;227                                               &attr_char_value,
;;;228                                               &p_nus->rx_handles);
;;;229    }
0000ea  b00f              ADD      sp,sp,#0x3c
0000ec  bd30              POP      {r4,r5,pc}
;;;230    
                          ENDP


                          AREA ||i.tx_char_add||, CODE, READONLY, ALIGN=1

                  tx_char_add PROC
;;;125     */
;;;126    static uint32_t tx_char_add(ble_nus_t * p_nus, ble_nus_init_t const * p_nus_init)
000000  b530              PUSH     {r4,r5,lr}
;;;127    {
000002  b08f              SUB      sp,sp,#0x3c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;128        /**@snippet [Adding proprietary characteristic to the SoftDevice] */
;;;129        ble_gatts_char_md_t char_md;
;;;130        ble_gatts_attr_md_t cccd_md;
;;;131        ble_gatts_attr_t    attr_char_value;
;;;132        ble_uuid_t          ble_uuid;
;;;133        ble_gatts_attr_md_t attr_md;
;;;134    
;;;135        memset(&cccd_md, 0, sizeof(cccd_md));
000008  2000              MOVS     r0,#0
00000a  9007              STR      r0,[sp,#0x1c]
;;;136    
;;;137        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
00000c  bf00              NOP      
00000e  f89d001c          LDRB     r0,[sp,#0x1c]
000012  f020000f          BIC      r0,r0,#0xf
000016  1c40              ADDS     r0,r0,#1
000018  f88d001c          STRB     r0,[sp,#0x1c]
00001c  f89d001c          LDRB     r0,[sp,#0x1c]
000020  f02000f0          BIC      r0,r0,#0xf0
000024  3010              ADDS     r0,r0,#0x10
000026  f88d001c          STRB     r0,[sp,#0x1c]
00002a  bf00              NOP      
;;;138        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
00002c  bf00              NOP      
00002e  f89d001d          LDRB     r0,[sp,#0x1d]
000032  f020000f          BIC      r0,r0,#0xf
000036  1c40              ADDS     r0,r0,#1
000038  f88d001d          STRB     r0,[sp,#0x1d]
00003c  f89d001d          LDRB     r0,[sp,#0x1d]
000040  f02000f0          BIC      r0,r0,#0xf0
000044  3010              ADDS     r0,r0,#0x10
000046  f88d001d          STRB     r0,[sp,#0x1d]
00004a  bf00              NOP      
;;;139    
;;;140        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
00004c  f89d001e          LDRB     r0,[sp,#0x1e]
000050  f0200006          BIC      r0,r0,#6
000054  1c80              ADDS     r0,r0,#2
000056  f88d001e          STRB     r0,[sp,#0x1e]
;;;141    
;;;142        memset(&char_md, 0, sizeof(char_md));
00005a  211c              MOVS     r1,#0x1c
00005c  a808              ADD      r0,sp,#0x20
00005e  f7fffffe          BL       __aeabi_memclr4
;;;143    
;;;144        char_md.char_props.notify = 1;
000062  f89d0020          LDRB     r0,[sp,#0x20]
000066  f0200010          BIC      r0,r0,#0x10
00006a  3010              ADDS     r0,r0,#0x10
00006c  f88d0020          STRB     r0,[sp,#0x20]
;;;145        char_md.p_char_user_desc  = NULL;
000070  2000              MOVS     r0,#0
000072  9009              STR      r0,[sp,#0x24]
;;;146        char_md.p_char_pf         = NULL;
000074  900b              STR      r0,[sp,#0x2c]
;;;147        char_md.p_user_desc_md    = NULL;
000076  900c              STR      r0,[sp,#0x30]
;;;148        char_md.p_cccd_md         = &cccd_md;
000078  a807              ADD      r0,sp,#0x1c
00007a  900d              STR      r0,[sp,#0x34]
;;;149        char_md.p_sccd_md         = NULL;
00007c  2000              MOVS     r0,#0
00007e  900e              STR      r0,[sp,#0x38]
;;;150    
;;;151        ble_uuid.type = p_nus->uuid_type;
000080  7820              LDRB     r0,[r4,#0]
000082  f88d0006          STRB     r0,[sp,#6]
;;;152        ble_uuid.uuid = BLE_UUID_NUS_TX_CHARACTERISTIC;
000086  2003              MOVS     r0,#3
000088  f8ad0004          STRH     r0,[sp,#4]
;;;153    
;;;154        memset(&attr_md, 0, sizeof(attr_md));
00008c  2000              MOVS     r0,#0
00008e  9000              STR      r0,[sp,#0]
;;;155    
;;;156        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
000090  bf00              NOP      
000092  f89d0000          LDRB     r0,[sp,#0]
000096  f020000f          BIC      r0,r0,#0xf
00009a  1c40              ADDS     r0,r0,#1
00009c  f88d0000          STRB     r0,[sp,#0]
0000a0  f89d0000          LDRB     r0,[sp,#0]
0000a4  f02000f0          BIC      r0,r0,#0xf0
0000a8  3010              ADDS     r0,r0,#0x10
0000aa  f88d0000          STRB     r0,[sp,#0]
0000ae  bf00              NOP      
;;;157        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
0000b0  bf00              NOP      
0000b2  f89d0001          LDRB     r0,[sp,#1]
0000b6  f020000f          BIC      r0,r0,#0xf
0000ba  1c40              ADDS     r0,r0,#1
0000bc  f88d0001          STRB     r0,[sp,#1]
0000c0  f89d0001          LDRB     r0,[sp,#1]
0000c4  f02000f0          BIC      r0,r0,#0xf0
0000c8  3010              ADDS     r0,r0,#0x10
0000ca  f88d0001          STRB     r0,[sp,#1]
0000ce  bf00              NOP      
;;;158    
;;;159        attr_md.vloc    = BLE_GATTS_VLOC_STACK;
0000d0  f89d0002          LDRB     r0,[sp,#2]
0000d4  f0200006          BIC      r0,r0,#6
0000d8  1c80              ADDS     r0,r0,#2
0000da  f88d0002          STRB     r0,[sp,#2]
;;;160        attr_md.rd_auth = 0;
0000de  f89d0002          LDRB     r0,[sp,#2]
0000e2  f0200008          BIC      r0,r0,#8
0000e6  f88d0002          STRB     r0,[sp,#2]
;;;161        attr_md.wr_auth = 0;
0000ea  f89d0002          LDRB     r0,[sp,#2]
0000ee  f0200010          BIC      r0,r0,#0x10
0000f2  f88d0002          STRB     r0,[sp,#2]
;;;162        attr_md.vlen    = 1;
0000f6  f89d0002          LDRB     r0,[sp,#2]
0000fa  f0200001          BIC      r0,r0,#1
0000fe  1c40              ADDS     r0,r0,#1
000100  f88d0002          STRB     r0,[sp,#2]
;;;163    
;;;164        memset(&attr_char_value, 0, sizeof(attr_char_value));
000104  2114              MOVS     r1,#0x14
000106  a802              ADD      r0,sp,#8
000108  f7fffffe          BL       __aeabi_memclr4
;;;165    
;;;166        attr_char_value.p_uuid    = &ble_uuid;
00010c  a801              ADD      r0,sp,#4
00010e  9002              STR      r0,[sp,#8]
;;;167        attr_char_value.p_attr_md = &attr_md;
000110  f8cdd00c          STR      sp,[sp,#0xc]
;;;168        attr_char_value.init_len  = sizeof(uint8_t);
000114  2001              MOVS     r0,#1
000116  f8ad0010          STRH     r0,[sp,#0x10]
;;;169        attr_char_value.init_offs = 0;
00011a  2000              MOVS     r0,#0
00011c  f8ad0012          STRH     r0,[sp,#0x12]
;;;170        attr_char_value.max_len   = BLE_NUS_MAX_TX_CHAR_LEN;
000120  2014              MOVS     r0,#0x14
000122  f8ad0014          STRH     r0,[sp,#0x14]
;;;171    
;;;172        return sd_ble_gatts_characteristic_add(p_nus->service_handle,
000126  8860              LDRH     r0,[r4,#2]
000128  1d23              ADDS     r3,r4,#4
00012a  aa02              ADD      r2,sp,#8
00012c  a908              ADD      r1,sp,#0x20
00012e  dfa2              SVC      #0xa2
;;;173                                               &char_md,
;;;174                                               &attr_char_value,
;;;175                                               &p_nus->tx_handles);
;;;176        /**@snippet [Adding proprietary characteristic to the SoftDevice] */
;;;177    }
000130  b00f              ADD      sp,sp,#0x3c
000132  bd30              POP      {r4,r5,pc}
;;;178    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      0x00000000
                          %        8
000010  9ecadc24          DCB      0x9e,0xca,0xdc,0x24
000014  0ee5a9e0          DCB      0x0e,0xe5,0xa9,0xe0
000018  93f3a3b5          DCB      0x93,0xf3,0xa3,0xb5
00001c  0000406e          DCB      0x00,0x00,0x40,0x6e

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_services\\ble_nus\\ble_nus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_nus_c_5b06b83c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____REVSH|
#line 402
|__asm___9_ble_nus_c_5b06b83c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_nus_c_5b06b83c____RRX|
#line 587
|__asm___9_ble_nus_c_5b06b83c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
