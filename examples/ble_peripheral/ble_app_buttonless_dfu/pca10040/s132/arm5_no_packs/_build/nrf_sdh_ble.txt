; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_sdh_ble.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_sdh_ble.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_sdh_ble.crf ..\..\..\..\..\..\components\softdevice\common\nrf_sdh_ble.c]
                          THUMB

                          AREA ||i.nrf_sdh_ble_app_ram_start_get||, CODE, READONLY, ALIGN=2

                  nrf_sdh_ble_app_ram_start_get PROC
;;;85     
;;;86     ret_code_t nrf_sdh_ble_app_ram_start_get(uint32_t * p_app_ram_start)
000000  4601              MOV      r1,r0
;;;87     {
;;;88         if (p_app_ram_start == NULL)
000002  b909              CBNZ     r1,|L1.8|
;;;89         {
;;;90             return NRF_ERROR_NULL;
000004  200e              MOVS     r0,#0xe
                  |L1.6|
;;;91         }
;;;92     
;;;93         *p_app_ram_start = APP_RAM_START;
;;;94     
;;;95         return NRF_SUCCESS;
;;;96     }
000006  4770              BX       lr
                  |L1.8|
000008  4802              LDR      r0,|L1.20|
00000a  6800              LDR      r0,[r0,#0]            ;93  ; m_ram_start
00000c  6008              STR      r0,[r1,#0]            ;93
00000e  2000              MOVS     r0,#0                 ;95
000010  e7f9              B        |L1.6|
;;;97     
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      m_ram_start

                          AREA ||i.nrf_sdh_ble_default_cfg_set||, CODE, READONLY, ALIGN=2

                  nrf_sdh_ble_default_cfg_set PROC
;;;98     
;;;99     ret_code_t nrf_sdh_ble_default_cfg_set(uint8_t conn_cfg_tag, uint32_t * p_ram_start)
000000  b5f0              PUSH     {r4-r7,lr}
;;;100    {
000002  b085              SUB      sp,sp,#0x14
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;101        uint32_t ret_code;
;;;102    
;;;103        ret_code = nrf_sdh_ble_app_ram_start_get(p_ram_start);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       nrf_sdh_ble_app_ram_start_get
00000e  4605              MOV      r5,r0
;;;104        if (ret_code != NRF_SUCCESS)
000010  b115              CBZ      r5,|L2.24|
;;;105        {
;;;106            return ret_code;
000012  4628              MOV      r0,r5
                  |L2.20|
;;;107        }
;;;108    
;;;109        // Overwrite some of the default settings of the BLE stack.
;;;110        // If any of the calls to sd_ble_cfg_set() fail, log the error but carry on so that
;;;111        // wrong RAM settings can be caught by nrf_sdh_ble_enable() and a meaningful error
;;;112        // message will be printed to the user suggesting the correct value.
;;;113        ble_cfg_t ble_cfg;
;;;114    
;;;115    #if (NRF_SDH_BLE_TOTAL_LINK_COUNT != 0)
;;;116        // Configure the connection count.
;;;117        memset(&ble_cfg, 0, sizeof(ble_cfg));
;;;118        ble_cfg.conn_cfg.conn_cfg_tag                     = conn_cfg_tag;
;;;119        ble_cfg.conn_cfg.params.gap_conn_cfg.conn_count   = NRF_SDH_BLE_TOTAL_LINK_COUNT;
;;;120        ble_cfg.conn_cfg.params.gap_conn_cfg.event_length = NRF_SDH_BLE_GAP_EVENT_LENGTH;
;;;121    
;;;122        ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GAP, &ble_cfg, *p_ram_start);
;;;123        if (ret_code != NRF_SUCCESS)
;;;124        {
;;;125            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_CONN_CFG_GAP.",
;;;126                          nrf_strerror_get(ret_code));
;;;127    
;;;128        }
;;;129    
;;;130        // Configure the connection roles.
;;;131        memset(&ble_cfg, 0, sizeof(ble_cfg));
;;;132        ble_cfg.gap_cfg.role_count_cfg.periph_role_count  = NRF_SDH_BLE_PERIPHERAL_LINK_COUNT;
;;;133        ble_cfg.gap_cfg.role_count_cfg.central_role_count = NRF_SDH_BLE_CENTRAL_LINK_COUNT;
;;;134        ble_cfg.gap_cfg.role_count_cfg.central_sec_count  = NRF_SDH_BLE_CENTRAL_LINK_COUNT ?
;;;135                                                            BLE_GAP_ROLE_COUNT_CENTRAL_SEC_DEFAULT : 0;
;;;136    
;;;137        ret_code = sd_ble_cfg_set(BLE_GAP_CFG_ROLE_COUNT, &ble_cfg, *p_ram_start);
;;;138        if (ret_code != NRF_SUCCESS)
;;;139        {
;;;140            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_GAP_CFG_ROLE_COUNT.",
;;;141                          nrf_strerror_get(ret_code));
;;;142    
;;;143        }
;;;144    
;;;145        // Configure the maximum ATT MTU.
;;;146    #if (NRF_SDH_BLE_GATT_MAX_MTU_SIZE != 23)
;;;147        memset(&ble_cfg, 0x00, sizeof(ble_cfg));
;;;148        ble_cfg.conn_cfg.conn_cfg_tag                 = conn_cfg_tag;
;;;149        ble_cfg.conn_cfg.params.gatt_conn_cfg.att_mtu = NRF_SDH_BLE_GATT_MAX_MTU_SIZE;
;;;150    
;;;151        ret_code = sd_ble_cfg_set(BLE_CONN_CFG_GATT, &ble_cfg, *p_ram_start);
;;;152        if (ret_code != NRF_SUCCESS)
;;;153        {
;;;154            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_CONN_CFG_GATT.",
;;;155                          nrf_strerror_get(ret_code));
;;;156        }
;;;157    #endif
;;;158    
;;;159    #endif  // NRF_SDH_BLE_TOTAL_LINK_COUNT
;;;160    
;;;161        // Configure number of custom UUIDS.
;;;162        memset(&ble_cfg, 0, sizeof(ble_cfg));
;;;163        ble_cfg.common_cfg.vs_uuid_cfg.vs_uuid_count = NRF_SDH_BLE_VS_UUID_COUNT;
;;;164    
;;;165        ret_code = sd_ble_cfg_set(BLE_COMMON_CFG_VS_UUID, &ble_cfg, *p_ram_start);
;;;166        if (ret_code != NRF_SUCCESS)
;;;167        {
;;;168            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_COMMON_CFG_VS_UUID.",
;;;169                          nrf_strerror_get(ret_code));
;;;170        }
;;;171    
;;;172        // Configure the GATTS attribute table.
;;;173        memset(&ble_cfg, 0x00, sizeof(ble_cfg));
;;;174        ble_gatts_cfg_attr_tab_size_t table =
;;;175        {
;;;176            .attr_tab_size = NRF_SDH_BLE_GATTS_ATTR_TAB_SIZE
;;;177        };
;;;178        ble_cfg.gatts_cfg.attr_tab_size = table;
;;;179    
;;;180        ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_ATTR_TAB_SIZE, &ble_cfg, *p_ram_start);
;;;181        if (ret_code != NRF_SUCCESS)
;;;182        {
;;;183            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_GATTS_CFG_ATTR_TAB_SIZE.",
;;;184                          nrf_strerror_get(ret_code));
;;;185        }
;;;186    
;;;187        // Configure Service Changed characteristic.
;;;188        memset(&ble_cfg, 0x00, sizeof(ble_cfg));
;;;189        ble_gatts_cfg_service_changed_t sc =
;;;190        {
;;;191            .service_changed = NRF_SDH_BLE_SERVICE_CHANGED
;;;192        };
;;;193        ble_cfg.gatts_cfg.service_changed = sc;
;;;194    
;;;195        ret_code = sd_ble_cfg_set(BLE_GATTS_CFG_SERVICE_CHANGED, &ble_cfg, *p_ram_start);
;;;196        if (ret_code != NRF_SUCCESS)
;;;197        {
;;;198            NRF_LOG_ERROR("sd_ble_cfg_set() returned %s when attempting to set BLE_GATTS_CFG_SERVICE_CHANGED.",
;;;199                          nrf_strerror_get(ret_code));
;;;200        }
;;;201    
;;;202        return NRF_SUCCESS;
;;;203    }
000014  b005              ADD      sp,sp,#0x14
000016  bdf0              POP      {r4-r7,pc}
                  |L2.24|
000018  2000              MOVS     r0,#0                 ;117
00001a  9002              STR      r0,[sp,#8]            ;117
00001c  9003              STR      r0,[sp,#0xc]          ;117
00001e  9004              STR      r0,[sp,#0x10]         ;117
000020  f88d6008          STRB     r6,[sp,#8]            ;118
000024  2001              MOVS     r0,#1                 ;119
000026  f88d000a          STRB     r0,[sp,#0xa]          ;119
00002a  2103              MOVS     r1,#3                 ;120
00002c  f8ad100c          STRH     r1,[sp,#0xc]          ;120
000030  a902              ADD      r1,sp,#8              ;122
000032  2020              MOVS     r0,#0x20              ;122
000034  6822              LDR      r2,[r4,#0]            ;122
000036  df69              SVC      #0x69                 ;122
000038  4605              MOV      r5,r0                 ;122
00003a  b165              CBZ      r5,|L2.86|
00003c  4628              MOV      r0,r5                 ;125
00003e  f7fffffe          BL       nrf_strerror_get
000042  4607              MOV      r7,r0                 ;125
000044  493f              LDR      r1,|L2.324|
000046  8809              LDRH     r1,[r1,#0]            ;125  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
000048  2201              MOVS     r2,#1                 ;125
00004a  ea424001          ORR      r0,r2,r1,LSL #16      ;125
00004e  463a              MOV      r2,r7                 ;125
000050  493d              LDR      r1,|L2.328|
000052  f7fffffe          BL       nrf_log_frontend_std_1
                  |L2.86|
000056  2000              MOVS     r0,#0                 ;131
000058  9002              STR      r0,[sp,#8]            ;131
00005a  9003              STR      r0,[sp,#0xc]          ;131
00005c  9004              STR      r0,[sp,#0x10]         ;131
00005e  2001              MOVS     r0,#1                 ;132
000060  f88d0008          STRB     r0,[sp,#8]            ;132
000064  2000              MOVS     r0,#0                 ;133
000066  f88d0009          STRB     r0,[sp,#9]            ;133
00006a  f88d000a          STRB     r0,[sp,#0xa]          ;134
00006e  a902              ADD      r1,sp,#8              ;137
000070  2040              MOVS     r0,#0x40              ;137
000072  6822              LDR      r2,[r4,#0]            ;137
000074  df69              SVC      #0x69                 ;137
000076  4605              MOV      r5,r0                 ;137
000078  b165              CBZ      r5,|L2.148|
00007a  4628              MOV      r0,r5                 ;140
00007c  f7fffffe          BL       nrf_strerror_get
000080  4607              MOV      r7,r0                 ;140
000082  4930              LDR      r1,|L2.324|
000084  8809              LDRH     r1,[r1,#0]            ;140  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
000086  2201              MOVS     r2,#1                 ;140
000088  ea424001          ORR      r0,r2,r1,LSL #16      ;140
00008c  463a              MOV      r2,r7                 ;140
00008e  492f              LDR      r1,|L2.332|
000090  f7fffffe          BL       nrf_log_frontend_std_1
                  |L2.148|
000094  2000              MOVS     r0,#0                 ;162
000096  9002              STR      r0,[sp,#8]            ;162
000098  9003              STR      r0,[sp,#0xc]          ;162
00009a  9004              STR      r0,[sp,#0x10]         ;162
00009c  2002              MOVS     r0,#2                 ;163
00009e  f88d0008          STRB     r0,[sp,#8]            ;163
0000a2  a902              ADD      r1,sp,#8              ;165
0000a4  2001              MOVS     r0,#1                 ;165
0000a6  6822              LDR      r2,[r4,#0]            ;165
0000a8  df69              SVC      #0x69                 ;165
0000aa  4605              MOV      r5,r0                 ;165
0000ac  b165              CBZ      r5,|L2.200|
0000ae  4628              MOV      r0,r5                 ;168
0000b0  f7fffffe          BL       nrf_strerror_get
0000b4  4607              MOV      r7,r0                 ;168
0000b6  4923              LDR      r1,|L2.324|
0000b8  8809              LDRH     r1,[r1,#0]            ;168  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
0000ba  2201              MOVS     r2,#1                 ;168
0000bc  ea424001          ORR      r0,r2,r1,LSL #16      ;168
0000c0  463a              MOV      r2,r7                 ;168
0000c2  4923              LDR      r1,|L2.336|
0000c4  f7fffffe          BL       nrf_log_frontend_std_1
                  |L2.200|
0000c8  2000              MOVS     r0,#0                 ;173
0000ca  9002              STR      r0,[sp,#8]            ;173
0000cc  9003              STR      r0,[sp,#0xc]          ;173
0000ce  9004              STR      r0,[sp,#0x10]         ;173
0000d0  4820              LDR      r0,|L2.340|
0000d2  6800              LDR      r0,[r0,#0]            ;174  ; <Data1>
0000d4  9001              STR      r0,[sp,#4]            ;174
0000d6  9801              LDR      r0,[sp,#4]            ;178
0000d8  9002              STR      r0,[sp,#8]            ;178
0000da  a902              ADD      r1,sp,#8              ;180
0000dc  20a1              MOVS     r0,#0xa1              ;180
0000de  6822              LDR      r2,[r4,#0]            ;180
0000e0  df69              SVC      #0x69                 ;180
0000e2  4605              MOV      r5,r0                 ;180
0000e4  b165              CBZ      r5,|L2.256|
0000e6  4628              MOV      r0,r5                 ;183
0000e8  f7fffffe          BL       nrf_strerror_get
0000ec  4607              MOV      r7,r0                 ;183
0000ee  4915              LDR      r1,|L2.324|
0000f0  8809              LDRH     r1,[r1,#0]            ;183  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
0000f2  2201              MOVS     r2,#1                 ;183
0000f4  ea424001          ORR      r0,r2,r1,LSL #16      ;183
0000f8  463a              MOV      r2,r7                 ;183
0000fa  4917              LDR      r1,|L2.344|
0000fc  f7fffffe          BL       nrf_log_frontend_std_1
                  |L2.256|
000100  2000              MOVS     r0,#0                 ;188
000102  9002              STR      r0,[sp,#8]            ;188
000104  9003              STR      r0,[sp,#0xc]          ;188
000106  9004              STR      r0,[sp,#0x10]         ;188
000108  4812              LDR      r0,|L2.340|
00010a  1d00              ADDS     r0,r0,#4              ;189
00010c  6800              LDR      r0,[r0,#0]            ;189  ; <Data2>
00010e  9000              STR      r0,[sp,#0]            ;189
000110  f89d0000          LDRB     r0,[sp,#0]            ;193
000114  f88d0008          STRB     r0,[sp,#8]            ;193
000118  a902              ADD      r1,sp,#8              ;195
00011a  20a0              MOVS     r0,#0xa0              ;195
00011c  6822              LDR      r2,[r4,#0]            ;195
00011e  df69              SVC      #0x69                 ;195
000120  4605              MOV      r5,r0                 ;195
000122  b165              CBZ      r5,|L2.318|
000124  4628              MOV      r0,r5                 ;198
000126  f7fffffe          BL       nrf_strerror_get
00012a  4607              MOV      r7,r0                 ;198
00012c  4905              LDR      r1,|L2.324|
00012e  8809              LDRH     r1,[r1,#0]            ;198  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
000130  2201              MOVS     r2,#1                 ;198
000132  ea424001          ORR      r0,r2,r1,LSL #16      ;198
000136  463a              MOV      r2,r7                 ;198
000138  4908              LDR      r1,|L2.348|
00013a  f7fffffe          BL       nrf_log_frontend_std_1
                  |L2.318|
00013e  2000              MOVS     r0,#0                 ;202
000140  e768              B        |L2.20|
;;;204    
                          ENDP

000142  0000              DCW      0x0000
                  |L2.324|
                          DCD      m_nrf_log_nrf_sdh_ble_logs_data_dynamic
                  |L2.328|
                          DCD      ||.conststring||
                  |L2.332|
                          DCD      ||.conststring||+0x48
                  |L2.336|
                          DCD      ||.conststring||+0x94
                  |L2.340|
                          DCD      ||.constdata||+0x28
                  |L2.344|
                          DCD      ||.conststring||+0xe0
                  |L2.348|
                          DCD      ||.conststring||+0x134

                          AREA ||i.nrf_sdh_ble_enable||, CODE, READONLY, ALIGN=2

                  nrf_sdh_ble_enable PROC
;;;221    
;;;222    ret_code_t nrf_sdh_ble_enable(uint32_t * const p_app_ram_start)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;223    {
000004  4604              MOV      r4,r0
;;;224        uint32_t const app_ram_start = *p_app_ram_start;
000006  6826              LDR      r6,[r4,#0]
;;;225    
;;;226        NRF_LOG_DEBUG("RAM starts at 0x%x", *p_app_ram_start);
;;;227    
;;;228        ret_code_t ret_code = sd_ble_enable(p_app_ram_start);
000008  4620              MOV      r0,r4
00000a  df60              SVC      #0x60
00000c  4605              MOV      r5,r0
;;;229    
;;;230        if (*p_app_ram_start != app_ram_start)
00000e  6820              LDR      r0,[r4,#0]
000010  42b0              CMP      r0,r6
000012  d015              BEQ      |L3.64|
;;;231        {
;;;232            NRF_LOG_WARNING("RAM start should be adjusted to 0x%x.", *p_app_ram_start);
000014  4913              LDR      r1,|L3.100|
000016  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
000018  2302              MOVS     r3,#2
00001a  ea434001          ORR      r0,r3,r1,LSL #16
00001e  a112              ADR      r1,|L3.104|
000020  6822              LDR      r2,[r4,#0]
000022  f7fffffe          BL       nrf_log_frontend_std_1
;;;233            NRF_LOG_WARNING("RAM size should be adjusted to 0x%x.",
000026  f7fffffe          BL       ram_end_address_get
00002a  6821              LDR      r1,[r4,#0]
00002c  1a47              SUBS     r7,r0,r1
00002e  490d              LDR      r1,|L3.100|
000030  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
000032  2202              MOVS     r2,#2
000034  ea424001          ORR      r0,r2,r1,LSL #16
000038  463a              MOV      r2,r7
00003a  a115              ADR      r1,|L3.144|
00003c  f7fffffe          BL       nrf_log_frontend_std_1
                  |L3.64|
;;;234                            ram_end_address_get() - (*p_app_ram_start));
;;;235        }
;;;236    
;;;237        if (ret_code != NRF_SUCCESS)
000040  b165              CBZ      r5,|L3.92|
;;;238        {
;;;239            NRF_LOG_ERROR("sd_ble_enable() returned %s.", nrf_strerror_get(ret_code));
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       nrf_strerror_get
000048  4607              MOV      r7,r0
00004a  4906              LDR      r1,|L3.100|
00004c  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_nrf_sdh_ble_logs_data_dynamic
00004e  2201              MOVS     r2,#1
000050  ea424001          ORR      r0,r2,r1,LSL #16
000054  463a              MOV      r2,r7
000056  a118              ADR      r1,|L3.184|
000058  f7fffffe          BL       nrf_log_frontend_std_1
                  |L3.92|
;;;240        }
;;;241    
;;;242        return ret_code;
00005c  4628              MOV      r0,r5
;;;243    }
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;244    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      m_nrf_log_nrf_sdh_ble_logs_data_dynamic
                  |L3.104|
000068  52414d20          DCB      "RAM start should be adjusted to 0x%x.",0
00006c  73746172
000070  74207368
000074  6f756c64
000078  20626520
00007c  61646a75
000080  73746564
000084  20746f20
000088  30782578
00008c  2e00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L3.144|
000090  52414d20          DCB      "RAM size should be adjusted to 0x%x.",0
000094  73697a65
000098  2073686f
00009c  756c6420
0000a0  62652061
0000a4  646a7573
0000a8  74656420
0000ac  746f2030
0000b0  7825782e
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L3.184|
0000b8  73645f62          DCB      "sd_ble_enable() returned %s.",0
0000bc  6c655f65
0000c0  6e61626c
0000c4  65282920
0000c8  72657475
0000cc  726e6564
0000d0  2025732e
0000d4  00      
0000d5  00                DCB      0
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.nrf_sdh_ble_evts_poll||, CODE, READONLY, ALIGN=2

                  nrf_sdh_ble_evts_poll PROC
;;;249     */
;;;250    static void nrf_sdh_ble_evts_poll(void * p_context)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;251    {
000004  b092              SUB      sp,sp,#0x48
000006  4680              MOV      r8,r0
;;;252        ret_code_t ret_code;
;;;253    
;;;254        UNUSED_VARIABLE(p_context);
;;;255    
;;;256        while (true)
000008  e01c              B        |L4.68|
                  |L4.10|
;;;257        {
;;;258            __ALIGN(4) uint8_t evt_buffer[NRF_SDH_BLE_EVT_BUF_SIZE];
;;;259    
;;;260            ble_evt_t * p_ble_evt;
;;;261            uint16_t    evt_len = (uint16_t)sizeof(evt_buffer);
00000a  2038              MOVS     r0,#0x38
00000c  9003              STR      r0,[sp,#0xc]
;;;262    
;;;263            ret_code = sd_ble_evt_get(evt_buffer, &evt_len);
00000e  a903              ADD      r1,sp,#0xc
000010  a804              ADD      r0,sp,#0x10
000012  df61              SVC      #0x61
000014  4604              MOV      r4,r0
;;;264            if (ret_code != NRF_SUCCESS)
000016  b104              CBZ      r4,|L4.26|
;;;265            {
;;;266                break;
000018  e015              B        |L4.70|
                  |L4.26|
;;;267            }
;;;268    
;;;269            p_ble_evt = (ble_evt_t *)evt_buffer;
00001a  ad04              ADD      r5,sp,#0x10
;;;270    
;;;271            NRF_LOG_DEBUG("BLE event: 0x%x.", p_ble_evt->header.evt_id);
;;;272    
;;;273            // Forward the event to BLE observers.
;;;274            nrf_section_iter_t  iter;
;;;275            for (nrf_section_iter_init(&iter, &sdh_ble_observers);
00001c  4911              LDR      r1,|L4.100|
00001e  4668              MOV      r0,sp
000020  f7fffffe          BL       nrf_section_iter_init
000024  e009              B        |L4.58|
                  |L4.38|
;;;276                 nrf_section_iter_get(&iter) != NULL;
;;;277                 nrf_section_iter_next(&iter))
;;;278            {
;;;279                nrf_sdh_ble_evt_observer_t * p_observer;
;;;280                nrf_sdh_ble_evt_handler_t    handler;
;;;281    
;;;282                p_observer = (nrf_sdh_ble_evt_observer_t *)nrf_section_iter_get(&iter);
000026  bf00              NOP      
000028  9802              LDR      r0,[sp,#8]
00002a  4606              MOV      r6,r0
;;;283                handler    = p_observer->handler;
00002c  6837              LDR      r7,[r6,#0]
;;;284    
;;;285                handler(p_ble_evt, p_observer->p_context);
00002e  4628              MOV      r0,r5
000030  6871              LDR      r1,[r6,#4]
000032  47b8              BLX      r7
000034  4668              MOV      r0,sp                 ;277
000036  f7fffffe          BL       nrf_section_iter_next
                  |L4.58|
00003a  bf00              NOP                            ;276
00003c  9802              LDR      r0,[sp,#8]            ;276
00003e  2800              CMP      r0,#0                 ;276
000040  d1f1              BNE      |L4.38|
;;;286            }
;;;287        }
000042  bf00              NOP      
                  |L4.68|
000044  e7e1              B        |L4.10|
                  |L4.70|
000046  bf00              NOP                            ;266
;;;288    
;;;289        if (ret_code != NRF_ERROR_NOT_FOUND)
000048  2c05              CMP      r4,#5
00004a  d007              BEQ      |L4.92|
;;;290        {
;;;291            APP_ERROR_HANDLER(ret_code);
00004c  bf00              NOP      
00004e  a206              ADR      r2,|L4.104|
000050  f2401123          MOV      r1,#0x123
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       app_error_handler
00005a  bf00              NOP      
                  |L4.92|
;;;292        }
;;;293    }
00005c  b012              ADD      sp,sp,#0x48
00005e  e8bd81f0          POP      {r4-r8,pc}
;;;294    
                          ENDP

000062  0000              DCW      0x0000
                  |L4.100|
                          DCD      sdh_ble_observers
                  |L4.104|
000068  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\"
00006c  2e5c2e2e
000070  5c2e2e5c
000074  2e2e5c2e
000078  2e5c636f
00007c  6d706f6e
000080  656e7473
000084  5c736f66
000088  74646576
00008c  6963655c
000090  636f6d6d
000094  6f6e5c  
000097  6e72665f          DCB      "nrf_sdh_ble.c",0
00009b  7364685f
00009f  626c652e
0000a3  6300    
0000a5  00                DCB      0
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.ram_end_address_get||, CODE, READONLY, ALIGN=2

                  ram_end_address_get PROC
;;;206    /**@brief   Function for finding the end address of the RAM. */
;;;207    static uint32_t ram_end_address_get(void)
000000  4802              LDR      r0,|L5.12|
;;;208    {
;;;209        uint32_t ram_total_size;
;;;210    
;;;211    #ifdef NRF51
;;;212        uint32_t block_size = NRF_FICR->SIZERAMBLOCKS;
;;;213        ram_total_size      = block_size * NRF_FICR->NUMRAMBLOCK;
;;;214    #else
;;;215        ram_total_size      = NRF_FICR->INFO.RAM * 1024;
000002  6800              LDR      r0,[r0,#0]
000004  0281              LSLS     r1,r0,#10
;;;216    #endif
;;;217    
;;;218        return RAM_START + ram_total_size;
000006  f1015000          ADD      r0,r1,#0x20000000
;;;219    }
00000a  4770              BX       lr
;;;220    
                          ENDP

                  |L5.12|
                          DCD      0x1000010c

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sdh_ble_observers_array
                          DCD      ||sdh_ble_observers0$$Base||
                          DCD      ||sdh_ble_observers0$$Limit||
                          DCD      ||sdh_ble_observers1$$Base||
                          DCD      ||sdh_ble_observers1$$Limit||
                          DCD      ||sdh_ble_observers2$$Base||
                          DCD      ||sdh_ble_observers2$$Limit||
                  sdh_ble_observers
                          DCD      sdh_ble_observers_array
                          DCD      sdh_ble_observers_array+0x18
                          DCD      0x00000008
                  m_ram_start
                          DCD      ||Image$$RW_IRAM1$$Base||
                          DCD      0x00000580
00002c  01                DCB      0x01

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  73645f62          DCB      "sd_ble_cfg_set() returned %s when attempting to set BLE"
000004  6c655f63
000008  66675f73
00000c  65742829
000010  20726574
000014  75726e65
000018  64202573
00001c  20776865
000020  6e206174
000024  74656d70
000028  74696e67
00002c  20746f20
000030  73657420
000034  424c45  
000037  5f434f4e          DCB      "_CONN_CFG_GAP.",0
00003b  4e5f4346
00003f  475f4741
000043  502e00  
000046  00                DCB      0
000047  00                DCB      0
000048  73645f62          DCB      "sd_ble_cfg_set() returned %s when attempting to set BLE"
00004c  6c655f63
000050  66675f73
000054  65742829
000058  20726574
00005c  75726e65
000060  64202573
000064  20776865
000068  6e206174
00006c  74656d70
000070  74696e67
000074  20746f20
000078  73657420
00007c  424c45  
00007f  5f474150          DCB      "_GAP_CFG_ROLE_COUNT.",0
000083  5f434647
000087  5f524f4c
00008b  455f434f
00008f  554e542e
000093  00      
000094  73645f62          DCB      "sd_ble_cfg_set() returned %s when attempting to set BLE"
000098  6c655f63
00009c  66675f73
0000a0  65742829
0000a4  20726574
0000a8  75726e65
0000ac  64202573
0000b0  20776865
0000b4  6e206174
0000b8  74656d70
0000bc  74696e67
0000c0  20746f20
0000c4  73657420
0000c8  424c45  
0000cb  5f434f4d          DCB      "_COMMON_CFG_VS_UUID.",0
0000cf  4d4f4e5f
0000d3  4346475f
0000d7  56535f55
0000db  5549442e
0000df  00      
0000e0  73645f62          DCB      "sd_ble_cfg_set() returned %s when attempting to set BLE"
0000e4  6c655f63
0000e8  66675f73
0000ec  65742829
0000f0  20726574
0000f4  75726e65
0000f8  64202573
0000fc  20776865
000100  6e206174
000104  74656d70
000108  74696e67
00010c  20746f20
000110  73657420
000114  424c45  
000117  5f474154          DCB      "_GATTS_CFG_ATTR_TAB_SIZE.",0
00011b  54535f43
00011f  46475f41
000123  5454525f
000127  5441425f
00012b  53495a45
00012f  2e00    
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
000134  73645f62          DCB      "sd_ble_cfg_set() returned %s when attempting to set BLE"
000138  6c655f63
00013c  66675f73
000140  65742829
000144  20726574
000148  75726e65
00014c  64202573
000150  20776865
000154  6e206174
000158  74656d70
00015c  74696e67
000160  20746f20
000164  73657420
000168  424c45  
00016b  5f474154          DCB      "_GATTS_CFG_SERVICE_CHANGED.",0
00016f  54535f43
000173  46475f53
000177  45525649
00017b  43455f43
00017f  48414e47
000183  45442e00

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  6e72665f          DCB      0x6e,0x72,0x66,0x5f
000004  7364685f          DCB      0x73,0x64,0x68,0x5f
000008  626c6500          DCB      0x62,0x6c,0x65,0x00

                          AREA log_const_data, DATA, READONLY, ALIGN=2

                  m_nrf_log_nrf_sdh_ble_logs_data_const
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
000004  00000300          DCB      0x00,0x00,0x03,0x00

                          AREA log_dynamic_data, DATA, ALIGN=2

                  m_nrf_log_nrf_sdh_ble_logs_data_dynamic
                  |symbol_number.57|
                          %        12

                          AREA sdh_stack_observers0, DATA, READONLY, ALIGN=2

                  m_nrf_sdh_ble_evts_poll
                  |symbol_number.58|
                          DCD      nrf_sdh_ble_evts_poll
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\softdevice\\common\\nrf_sdh_ble.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_sdh_ble_c_a9ced19c____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_nrf_sdh_ble_c_a9ced19c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_sdh_ble_c_a9ced19c____REVSH|
#line 402
|__asm___13_nrf_sdh_ble_c_a9ced19c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_nrf_sdh_ble_c_a9ced19c____RRX|
#line 587
|__asm___13_nrf_sdh_ble_c_a9ced19c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
