; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\boards.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\boards.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\boards.crf ..\..\..\..\..\..\components\boards\boards.c]
                          THUMB

                          AREA ||i.bsp_board_button_idx_to_pin||, CODE, READONLY, ALIGN=2

                  bsp_board_button_idx_to_pin PROC
;;;159    
;;;160    uint32_t bsp_board_button_idx_to_pin(uint32_t button_idx)
000000  4601              MOV      r1,r0
;;;161    {
;;;162        ASSERT(button_idx < BUTTONS_NUMBER);
;;;163        return m_board_btn_list[button_idx];
000002  4801              LDR      r0,|L1.8|
000004  5c40              LDRB     r0,[r0,r1]
;;;164    }
000006  4770              BX       lr
;;;165    #endif //BUTTONS_NUMBER > 0
                          ENDP

                  |L1.8|
                          DCD      m_board_btn_list

                          AREA ||i.bsp_board_button_state_get||, CODE, READONLY, ALIGN=2

                  bsp_board_button_state_get PROC
;;;128    #if BUTTONS_NUMBER > 0
;;;129    bool bsp_board_button_state_get(uint32_t button_idx)
000000  b510              PUSH     {r4,lr}
;;;130    {
000002  4601              MOV      r1,r0
;;;131        ASSERT(button_idx < BUTTONS_NUMBER);
;;;132        bool pin_set = nrf_gpio_pin_read(m_board_btn_list[button_idx]) ? true : false;
000004  4b09              LDR      r3,|L2.44|
000006  5c58              LDRB     r0,[r3,r1]
000008  bf00              NOP      
00000a  f04f44a0          MOV      r4,#0x50000000
00000e  4623              MOV      r3,r4
000010  bf00              NOP      
000012  f8d34510          LDR      r4,[r3,#0x510]
000016  40c4              LSRS     r4,r4,r0
000018  f0040401          AND      r4,r4,#1
00001c  b10c              CBZ      r4,|L2.34|
00001e  2001              MOVS     r0,#1
000020  e000              B        |L2.36|
                  |L2.34|
000022  2000              MOVS     r0,#0
                  |L2.36|
000024  4602              MOV      r2,r0
;;;133        return (pin_set == (BUTTONS_ACTIVE_STATE ? true : false));
000026  f0820001          EOR      r0,r2,#1
;;;134    }
00002a  bd10              POP      {r4,pc}
;;;135    
                          ENDP

                  |L2.44|
                          DCD      m_board_btn_list

                          AREA ||i.bsp_board_buttons_init||, CODE, READONLY, ALIGN=2

                  bsp_board_buttons_init PROC
;;;135    
;;;136    void bsp_board_buttons_init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;137    {
;;;138        uint32_t i;
;;;139        for (i = 0; i < BUTTONS_NUMBER; ++i)
000002  2400              MOVS     r4,#0
000004  e00d              B        |L3.34|
                  |L3.6|
;;;140        {
;;;141            nrf_gpio_cfg_input(m_board_btn_list[i], BUTTON_PULL);
000006  4808              LDR      r0,|L3.40|
000008  5d05              LDRB     r5,[r0,r4]
00000a  2603              MOVS     r6,#3
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  4633              MOV      r3,r6
000012  4602              MOV      r2,r0
000014  4601              MOV      r1,r0
000016  9001              STR      r0,[sp,#4]
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       nrf_gpio_cfg
00001e  bf00              NOP      
000020  1c64              ADDS     r4,r4,#1              ;139
                  |L3.34|
000022  2c04              CMP      r4,#4                 ;139
000024  d3ef              BCC      |L3.6|
;;;142        }
;;;143    }
000026  bd7c              POP      {r2-r6,pc}
;;;144    
                          ENDP

                  |L3.40|
                          DCD      m_board_btn_list

                          AREA ||i.bsp_board_led_idx_to_pin||, CODE, READONLY, ALIGN=2

                  bsp_board_led_idx_to_pin PROC
;;;105    
;;;106    uint32_t bsp_board_led_idx_to_pin(uint32_t led_idx)
000000  4601              MOV      r1,r0
;;;107    {
;;;108        ASSERT(led_idx < LEDS_NUMBER);
;;;109        return m_board_led_list[led_idx];
000002  4801              LDR      r0,|L4.8|
000004  5c40              LDRB     r0,[r0,r1]
;;;110    }
000006  4770              BX       lr
;;;111    
                          ENDP

                  |L4.8|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_led_invert||, CODE, READONLY, ALIGN=2

                  bsp_board_led_invert PROC
;;;89     
;;;90     void bsp_board_led_invert(uint32_t led_idx)
000000  b510              PUSH     {r4,lr}
;;;91     {
000002  4602              MOV      r2,r0
;;;92         ASSERT(led_idx < LEDS_NUMBER);
;;;93         nrf_gpio_pin_toggle(m_board_led_list[led_idx]);
000004  4909              LDR      r1,|L5.44|
000006  5c88              LDRB     r0,[r1,r2]
000008  bf00              NOP      
00000a  f04f44a0          MOV      r4,#0x50000000
00000e  4621              MOV      r1,r4
000010  f8d13504          LDR      r3,[r1,#0x504]
000014  2401              MOVS     r4,#1
000016  4084              LSLS     r4,r4,r0
000018  439c              BICS     r4,r4,r3
00001a  f8c14508          STR      r4,[r1,#0x508]
00001e  2401              MOVS     r4,#1
000020  4084              LSLS     r4,r4,r0
000022  401c              ANDS     r4,r4,r3
000024  f8c1450c          STR      r4,[r1,#0x50c]
000028  bf00              NOP      
;;;94     }
00002a  bd10              POP      {r4,pc}
;;;95     
                          ENDP

                  |L5.44|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_led_off||, CODE, READONLY, ALIGN=2

                  bsp_board_led_off PROC
;;;65     
;;;66     void bsp_board_led_off(uint32_t led_idx)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  4604              MOV      r4,r0
;;;68         ASSERT(led_idx < LEDS_NUMBER);
;;;69         nrf_gpio_pin_write(m_board_led_list[led_idx], LEDS_ACTIVE_STATE ? 0 : 1);
000004  4902              LDR      r1,|L6.16|
000006  5d08              LDRB     r0,[r1,r4]
000008  2101              MOVS     r1,#1
00000a  f7fffffe          BL       nrf_gpio_pin_write
;;;70     }
00000e  bd10              POP      {r4,pc}
;;;71     
                          ENDP

                  |L6.16|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_led_on||, CODE, READONLY, ALIGN=2

                  bsp_board_led_on PROC
;;;59     
;;;60     void bsp_board_led_on(uint32_t led_idx)
000000  b510              PUSH     {r4,lr}
;;;61     {
000002  4604              MOV      r4,r0
;;;62             ASSERT(led_idx < LEDS_NUMBER);
;;;63             nrf_gpio_pin_write(m_board_led_list[led_idx], LEDS_ACTIVE_STATE ? 1 : 0);
000004  4902              LDR      r1,|L7.16|
000006  5d08              LDRB     r0,[r1,r4]
000008  2100              MOVS     r1,#0
00000a  f7fffffe          BL       nrf_gpio_pin_write
;;;64     }
00000e  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  |L7.16|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_led_state_get||, CODE, READONLY, ALIGN=2

                  bsp_board_led_state_get PROC
;;;52     #if LEDS_NUMBER > 0
;;;53     bool bsp_board_led_state_get(uint32_t led_idx)
000000  b510              PUSH     {r4,lr}
;;;54     {
000002  4601              MOV      r1,r0
;;;55         ASSERT(led_idx < LEDS_NUMBER);
;;;56         bool pin_set = nrf_gpio_pin_out_read(m_board_led_list[led_idx]) ? true : false;
000004  4b09              LDR      r3,|L8.44|
000006  5c58              LDRB     r0,[r3,r1]
000008  bf00              NOP      
00000a  f04f44a0          MOV      r4,#0x50000000
00000e  4623              MOV      r3,r4
000010  bf00              NOP      
000012  f8d34504          LDR      r4,[r3,#0x504]
000016  40c4              LSRS     r4,r4,r0
000018  f0040401          AND      r4,r4,#1
00001c  b10c              CBZ      r4,|L8.34|
00001e  2001              MOVS     r0,#1
000020  e000              B        |L8.36|
                  |L8.34|
000022  2000              MOVS     r0,#0
                  |L8.36|
000024  4602              MOV      r2,r0
;;;57         return (pin_set == (LEDS_ACTIVE_STATE ? true : false));
000026  f0820001          EOR      r0,r2,#1
;;;58     }
00002a  bd10              POP      {r4,pc}
;;;59     
                          ENDP

                  |L8.44|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_leds_init||, CODE, READONLY, ALIGN=2

                  bsp_board_leds_init PROC
;;;95     
;;;96     void bsp_board_leds_init(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;97     {
;;;98         uint32_t i;
;;;99         for (i = 0; i < LEDS_NUMBER; ++i)
000002  2400              MOVS     r4,#0
000004  e00c              B        |L9.32|
                  |L9.6|
;;;100        {
;;;101            nrf_gpio_cfg_output(m_board_led_list[i]);
000006  4809              LDR      r0,|L9.44|
000008  5d05              LDRB     r5,[r0,r4]
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  4603              MOV      r3,r0
000010  2201              MOVS     r2,#1
000012  4611              MOV      r1,r2
000014  9001              STR      r0,[sp,#4]
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       nrf_gpio_cfg
00001c  bf00              NOP      
00001e  1c64              ADDS     r4,r4,#1              ;99
                  |L9.32|
000020  2c04              CMP      r4,#4                 ;99
000022  d3f0              BCC      |L9.6|
;;;102        }
;;;103        bsp_board_leds_off();
000024  f7fffffe          BL       bsp_board_leds_off
;;;104    }
000028  bd7c              POP      {r2-r6,pc}
;;;105    
                          ENDP

00002a  0000              DCW      0x0000
                  |L9.44|
                          DCD      m_board_led_list

                          AREA ||i.bsp_board_leds_off||, CODE, READONLY, ALIGN=1

                  bsp_board_leds_off PROC
;;;71     
;;;72     void bsp_board_leds_off(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         uint32_t i;
;;;75         for (i = 0; i < LEDS_NUMBER; ++i)
000002  2400              MOVS     r4,#0
000004  e003              B        |L10.14|
                  |L10.6|
;;;76         {
;;;77             bsp_board_led_off(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_board_led_off
00000c  1c64              ADDS     r4,r4,#1              ;75
                  |L10.14|
00000e  2c04              CMP      r4,#4                 ;75
000010  d3f9              BCC      |L10.6|
;;;78         }
;;;79     }
000012  bd10              POP      {r4,pc}
;;;80     
                          ENDP


                          AREA ||i.bsp_board_leds_on||, CODE, READONLY, ALIGN=1

                  bsp_board_leds_on PROC
;;;80     
;;;81     void bsp_board_leds_on(void)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83         uint32_t i;
;;;84         for (i = 0; i < LEDS_NUMBER; ++i)
000002  2400              MOVS     r4,#0
000004  e003              B        |L11.14|
                  |L11.6|
;;;85         {
;;;86             bsp_board_led_on(i);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       bsp_board_led_on
00000c  1c64              ADDS     r4,r4,#1              ;84
                  |L11.14|
00000e  2c04              CMP      r4,#4                 ;84
000010  d3f9              BCC      |L11.6|
;;;87         }
;;;88     }
000012  bd10              POP      {r4,pc}
;;;89     
                          ENDP


                          AREA ||i.bsp_board_pin_to_button_idx||, CODE, READONLY, ALIGN=2

                  bsp_board_pin_to_button_idx PROC
;;;144    
;;;145    uint32_t bsp_board_pin_to_button_idx(uint32_t pin_number)
000000  4602              MOV      r2,r0
;;;146    {
;;;147        uint32_t i;
;;;148        uint32_t ret = 0xFFFFFFFF;
000002  f04f30ff          MOV      r0,#0xffffffff
;;;149        for (i = 0; i < BUTTONS_NUMBER; ++i)
000006  2100              MOVS     r1,#0
000008  e006              B        |L12.24|
                  |L12.10|
;;;150        {
;;;151            if (m_board_btn_list[i] == pin_number)
00000a  4b05              LDR      r3,|L12.32|
00000c  5c5b              LDRB     r3,[r3,r1]
00000e  4293              CMP      r3,r2
000010  d101              BNE      |L12.22|
;;;152            {
;;;153                ret = i;
000012  4608              MOV      r0,r1
;;;154                break;
000014  e002              B        |L12.28|
                  |L12.22|
000016  1c49              ADDS     r1,r1,#1              ;149
                  |L12.24|
000018  2904              CMP      r1,#4                 ;149
00001a  d3f6              BCC      |L12.10|
                  |L12.28|
00001c  bf00              NOP      
;;;155            }
;;;156        }
;;;157        return ret;
;;;158    }
00001e  4770              BX       lr
;;;159    
                          ENDP

                  |L12.32|
                          DCD      m_board_btn_list

                          AREA ||i.bsp_board_pin_to_led_idx||, CODE, READONLY, ALIGN=2

                  bsp_board_pin_to_led_idx PROC
;;;111    
;;;112    uint32_t bsp_board_pin_to_led_idx(uint32_t pin_number)
000000  4602              MOV      r2,r0
;;;113    {
;;;114        uint32_t ret = 0xFFFFFFFF;
000002  f04f30ff          MOV      r0,#0xffffffff
;;;115        uint32_t i;
;;;116        for (i = 0; i < LEDS_NUMBER; ++i)
000006  2100              MOVS     r1,#0
000008  e006              B        |L13.24|
                  |L13.10|
;;;117        {
;;;118            if (m_board_led_list[i] == pin_number)
00000a  4b05              LDR      r3,|L13.32|
00000c  5c5b              LDRB     r3,[r3,r1]
00000e  4293              CMP      r3,r2
000010  d101              BNE      |L13.22|
;;;119            {
;;;120                ret = i;
000012  4608              MOV      r0,r1
;;;121                break;
000014  e002              B        |L13.28|
                  |L13.22|
000016  1c49              ADDS     r1,r1,#1              ;116
                  |L13.24|
000018  2904              CMP      r1,#4                 ;116
00001a  d3f6              BCC      |L13.10|
                  |L13.28|
00001c  bf00              NOP      
;;;122            }
;;;123        }
;;;124        return ret;
;;;125    }
00001e  4770              BX       lr
;;;126    #endif //LEDS_NUMBER > 0
                          ENDP

                  |L13.32|
                          DCD      m_board_led_list

                          AREA ||i.nrf_gpio_cfg||, CODE, READONLY, ALIGN=1

                  nrf_gpio_cfg PROC
;;;503    
;;;504    __STATIC_INLINE void nrf_gpio_cfg(
000000  b5f0              PUSH     {r4-r7,lr}
;;;505        uint32_t             pin_number,
;;;506        nrf_gpio_pin_dir_t   dir,
;;;507        nrf_gpio_pin_input_t input,
;;;508        nrf_gpio_pin_pull_t  pull,
;;;509        nrf_gpio_pin_drive_t drive,
;;;510        nrf_gpio_pin_sense_t sense)
;;;511    {
000002  e9dd4505          LDRD     r4,r5,[sp,#0x14]
;;;512        NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
000006  bf00              NOP      
000008  f04f47a0          MOV      r7,#0x50000000
00000c  463e              MOV      r6,r7
;;;513    
;;;514        reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
00000e  ea410742          ORR      r7,r1,r2,LSL #1
000012  ea470783          ORR      r7,r7,r3,LSL #2
000016  ea472704          ORR      r7,r7,r4,LSL #8
00001a  ea474c05          ORR      r12,r7,r5,LSL #16
00001e  f50667e0          ADD      r7,r6,#0x700
000022  f847c020          STR      r12,[r7,r0,LSL #2]
;;;515                                   | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
;;;516                                   | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
;;;517                                   | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
;;;518                                   | ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
;;;519    }
000026  bdf0              POP      {r4-r7,pc}
;;;520    
                          ENDP


                          AREA ||i.nrf_gpio_pin_write||, CODE, READONLY, ALIGN=1

                  nrf_gpio_pin_write PROC
;;;647    
;;;648    __STATIC_INLINE void nrf_gpio_pin_write(uint32_t pin_number, uint32_t value)
000000  b510              PUSH     {r4,lr}
;;;649    {
;;;650        if (value == 0)
000002  b961              CBNZ     r1,|L15.30|
;;;651        {
;;;652            nrf_gpio_pin_clear(pin_number);
000004  bf00              NOP      
000006  bf00              NOP      
000008  f04f42a0          MOV      r2,#0x50000000
00000c  4613              MOV      r3,r2
00000e  2401              MOVS     r4,#1
000010  fa04f200          LSL      r2,r4,r0
000014  f8c3250c          STR      r2,[r3,#0x50c]
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  e00c              B        |L15.56|
                  |L15.30|
;;;653        }
;;;654        else
;;;655        {
;;;656            nrf_gpio_pin_set(pin_number);
00001e  bf00              NOP      
000020  bf00              NOP      
000022  f04f42a0          MOV      r2,#0x50000000
000026  4613              MOV      r3,r2
000028  2401              MOVS     r4,#1
00002a  fa04f200          LSL      r2,r4,r0
00002e  f8c32508          STR      r2,[r3,#0x508]
000032  bf00              NOP      
000034  bf00              NOP      
000036  bf00              NOP      
                  |L15.56|
;;;657        }
;;;658    }
000038  bd10              POP      {r4,pc}
;;;659    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  m_board_led_list
000000  11121314          DCB      0x11,0x12,0x13,0x14
                  m_board_btn_list
000004  0d0e0f10          DCB      0x0d,0x0e,0x0f,0x10

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\boards\\boards.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_boards_c_c0d5286b____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___8_boards_c_c0d5286b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_boards_c_c0d5286b____REVSH|
#line 402
|__asm___8_boards_c_c0d5286b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_boards_c_c0d5286b____RRX|
#line 587
|__asm___8_boards_c_c0d5286b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
