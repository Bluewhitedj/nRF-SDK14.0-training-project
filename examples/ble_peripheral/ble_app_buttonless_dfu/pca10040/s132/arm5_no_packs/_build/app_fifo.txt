; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\app_fifo.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\app_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\app_fifo.crf ..\..\..\..\..\..\components\libraries\fifo\app_fifo.c]
                          THUMB

                          AREA ||i.app_fifo_flush||, CODE, READONLY, ALIGN=1

                  app_fifo_flush PROC
;;;136    
;;;137    uint32_t app_fifo_flush(app_fifo_t * p_fifo)
000000  4601              MOV      r1,r0
;;;138    {
;;;139        p_fifo->read_pos = p_fifo->write_pos;
000002  68c8              LDR      r0,[r1,#0xc]
000004  6088              STR      r0,[r1,#8]
;;;140        return NRF_SUCCESS;
000006  2000              MOVS     r0,#0
;;;141    }
000008  4770              BX       lr
;;;142    
                          ENDP


                          AREA ||i.app_fifo_get||, CODE, READONLY, ALIGN=1

                  app_fifo_get PROC
;;;111    
;;;112    uint32_t app_fifo_get(app_fifo_t * p_fifo, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;113    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;114        if (FIFO_LENGTH() != 0)
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fifo_length
00000c  b128              CBZ      r0,|L2.26|
;;;115        {
;;;116            fifo_get(p_fifo, p_byte);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       fifo_get
;;;117            return NRF_SUCCESS;
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;118        }
;;;119    
;;;120        return NRF_ERROR_NOT_FOUND;
;;;121    
;;;122    }
000018  bd70              POP      {r4-r6,pc}
                  |L2.26|
00001a  2005              MOVS     r0,#5                 ;120
00001c  e7fc              B        |L2.24|
;;;123    
                          ENDP


                          AREA ||i.app_fifo_init||, CODE, READONLY, ALIGN=1

                  app_fifo_init PROC
;;;76     
;;;77     uint32_t app_fifo_init(app_fifo_t * p_fifo, uint8_t * p_buf, uint16_t buf_size)
000000  4603              MOV      r3,r0
;;;78     {
;;;79         // Check buffer for null pointer.
;;;80         if (p_buf == NULL)
000002  b909              CBNZ     r1,|L3.8|
;;;81         {
;;;82             return NRF_ERROR_NULL;
000004  200e              MOVS     r0,#0xe
                  |L3.6|
;;;83         }
;;;84     
;;;85         // Check that the buffer size is a power of two.
;;;86         if (!IS_POWER_OF_TWO(buf_size))
;;;87         {
;;;88             return NRF_ERROR_INVALID_LENGTH;
;;;89         }
;;;90     
;;;91         p_fifo->p_buf         = p_buf;
;;;92         p_fifo->buf_size_mask = buf_size - 1;
;;;93         p_fifo->read_pos      = 0;
;;;94         p_fifo->write_pos     = 0;
;;;95     
;;;96         return NRF_SUCCESS;
;;;97     }
000006  4770              BX       lr
                  |L3.8|
000008  b112              CBZ      r2,|L3.16|
00000a  1e50              SUBS     r0,r2,#1              ;86
00000c  4010              ANDS     r0,r0,r2              ;86
00000e  b108              CBZ      r0,|L3.20|
                  |L3.16|
000010  2009              MOVS     r0,#9                 ;88
000012  e7f8              B        |L3.6|
                  |L3.20|
000014  6019              STR      r1,[r3,#0]            ;91
000016  1e50              SUBS     r0,r2,#1              ;92
000018  8098              STRH     r0,[r3,#4]            ;92
00001a  2000              MOVS     r0,#0                 ;93
00001c  6098              STR      r0,[r3,#8]            ;93
00001e  60d8              STR      r0,[r3,#0xc]          ;94
000020  bf00              NOP                            ;96
000022  e7f0              B        |L3.6|
;;;98     
                          ENDP


                          AREA ||i.app_fifo_peek||, CODE, READONLY, ALIGN=1

                  app_fifo_peek PROC
;;;124    
;;;125    uint32_t app_fifo_peek(app_fifo_t * p_fifo, uint16_t index, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;126    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;127        if (FIFO_LENGTH() > index)
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       fifo_length
00000e  42a0              CMP      r0,r4
000010  d906              BLS      |L4.32|
;;;128        {
;;;129            fifo_peek(p_fifo, index, p_byte);
000012  4632              MOV      r2,r6
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       fifo_peek
;;;130            return NRF_SUCCESS;
00001c  2000              MOVS     r0,#0
                  |L4.30|
;;;131        }
;;;132    
;;;133        return NRF_ERROR_NOT_FOUND;
;;;134    }
00001e  bd70              POP      {r4-r6,pc}
                  |L4.32|
000020  2005              MOVS     r0,#5                 ;133
000022  e7fc              B        |L4.30|
;;;135    
                          ENDP


                          AREA ||i.app_fifo_put||, CODE, READONLY, ALIGN=1

                  app_fifo_put PROC
;;;99     
;;;100    uint32_t app_fifo_put(app_fifo_t * p_fifo, uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;102        if (FIFO_LENGTH() <= p_fifo->buf_size_mask)
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       fifo_length
00000c  88a1              LDRH     r1,[r4,#4]
00000e  4288              CMP      r0,r1
000010  d805              BHI      |L5.30|
;;;103        {
;;;104            fifo_put(p_fifo, byte);
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       fifo_put
;;;105            return NRF_SUCCESS;
00001a  2000              MOVS     r0,#0
                  |L5.28|
;;;106        }
;;;107    
;;;108        return NRF_ERROR_NO_MEM;
;;;109    }
00001c  bd70              POP      {r4-r6,pc}
                  |L5.30|
00001e  2004              MOVS     r0,#4                 ;108
000020  e7fc              B        |L5.28|
;;;110    
                          ENDP


                          AREA ||i.app_fifo_read||, CODE, READONLY, ALIGN=1

                  app_fifo_read PROC
;;;143    
;;;144    uint32_t app_fifo_read(app_fifo_t * p_fifo, uint8_t * p_byte_array, uint32_t * p_size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;145    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;146        VERIFY_PARAM_NOT_NULL(p_fifo);
00000a  bf00              NOP      
00000c  f1b80f00          CMP      r8,#0
000010  d102              BNE      |L6.24|
000012  200e              MOVS     r0,#0xe
                  |L6.20|
;;;147        VERIFY_PARAM_NOT_NULL(p_size);
;;;148    
;;;149        const uint32_t byte_count    = fifo_length(p_fifo);
;;;150        const uint32_t requested_len = (*p_size);
;;;151        uint32_t       index         = 0;
;;;152        uint32_t       read_size     = MIN(requested_len, byte_count);
;;;153    
;;;154        (*p_size) = byte_count;
;;;155    
;;;156        // Check if the FIFO is empty.
;;;157        if (byte_count == 0)
;;;158        {
;;;159            return NRF_ERROR_NOT_FOUND;
;;;160        }
;;;161    
;;;162        // Check if application has requested only the size.
;;;163        if (p_byte_array == NULL)
;;;164        {
;;;165            return NRF_SUCCESS;
;;;166        }
;;;167    
;;;168        // Fetch bytes from the FIFO.
;;;169        while (index < read_size)
;;;170        {
;;;171            fifo_get(p_fifo, &p_byte_array[index++]);
;;;172        }
;;;173    
;;;174        (*p_size) = read_size;
;;;175    
;;;176        return NRF_SUCCESS;
;;;177    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L6.24|
000018  bf00              NOP                            ;146
00001a  bf00              NOP                            ;147
00001c  b90c              CBNZ     r4,|L6.34|
00001e  200e              MOVS     r0,#0xe               ;147
000020  e7f8              B        |L6.20|
                  |L6.34|
000022  bf00              NOP                            ;147
000024  4640              MOV      r0,r8                 ;149
000026  f7fffffe          BL       fifo_length
00002a  4605              MOV      r5,r0                 ;149
00002c  f8d49000          LDR      r9,[r4,#0]            ;150
000030  2700              MOVS     r7,#0                 ;151
000032  45a9              CMP      r9,r5                 ;152
000034  d201              BCS      |L6.58|
000036  4648              MOV      r0,r9                 ;152
000038  e000              B        |L6.60|
                  |L6.58|
00003a  4628              MOV      r0,r5                 ;152
                  |L6.60|
00003c  4682              MOV      r10,r0                ;152
00003e  6025              STR      r5,[r4,#0]            ;154
000040  b90d              CBNZ     r5,|L6.70|
000042  2005              MOVS     r0,#5                 ;159
000044  e7e6              B        |L6.20|
                  |L6.70|
000046  b90e              CBNZ     r6,|L6.76|
000048  2000              MOVS     r0,#0                 ;165
00004a  e7e3              B        |L6.20|
                  |L6.76|
00004c  e005              B        |L6.90|
                  |L6.78|
00004e  4638              MOV      r0,r7                 ;171
000050  1c7f              ADDS     r7,r7,#1              ;171
000052  1981              ADDS     r1,r0,r6              ;171
000054  4640              MOV      r0,r8                 ;171
000056  f7fffffe          BL       fifo_get
                  |L6.90|
00005a  4557              CMP      r7,r10                ;169
00005c  d3f7              BCC      |L6.78|
00005e  f8c4a000          STR      r10,[r4,#0]           ;174
000062  2000              MOVS     r0,#0                 ;176
000064  e7d6              B        |L6.20|
;;;178    
                          ENDP


                          AREA ||i.app_fifo_write||, CODE, READONLY, ALIGN=1

                  app_fifo_write PROC
;;;179    
;;;180    uint32_t app_fifo_write(app_fifo_t * p_fifo, uint8_t const * p_byte_array, uint32_t * p_size)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;181    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;182        VERIFY_PARAM_NOT_NULL(p_fifo);
00000a  bf00              NOP      
00000c  b916              CBNZ     r6,|L7.20|
00000e  200e              MOVS     r0,#0xe
                  |L7.16|
;;;183        VERIFY_PARAM_NOT_NULL(p_size);
;;;184    
;;;185        const uint32_t available_count = p_fifo->buf_size_mask - fifo_length(p_fifo) + 1;
;;;186        const uint32_t requested_len   = (*p_size);
;;;187        uint32_t       index           = 0;
;;;188        uint32_t       write_size      = MIN(requested_len, available_count);
;;;189    
;;;190        (*p_size) = available_count;
;;;191    
;;;192        // Check if the FIFO is FULL.
;;;193        if (available_count == 0)
;;;194        {
;;;195            return NRF_ERROR_NO_MEM;
;;;196        }
;;;197    
;;;198        // Check if application has requested only the size.
;;;199        if (p_byte_array == NULL)
;;;200        {
;;;201            return NRF_SUCCESS;
;;;202        }
;;;203    
;;;204        //Fetch bytes from the FIFO.
;;;205        while (index < write_size)
;;;206        {
;;;207            fifo_put(p_fifo, p_byte_array[index++]);
;;;208        }
;;;209    
;;;210        (*p_size) = write_size;
;;;211    
;;;212        return NRF_SUCCESS;
;;;213    }
000010  e8bd87f0          POP      {r4-r10,pc}
                  |L7.20|
000014  bf00              NOP                            ;182
000016  bf00              NOP                            ;183
000018  b90c              CBNZ     r4,|L7.30|
00001a  200e              MOVS     r0,#0xe               ;183
00001c  e7f8              B        |L7.16|
                  |L7.30|
00001e  bf00              NOP                            ;183
000020  4630              MOV      r0,r6                 ;185
000022  f7fffffe          BL       fifo_length
000026  88b1              LDRH     r1,[r6,#4]            ;185
000028  1a08              SUBS     r0,r1,r0              ;185
00002a  1c45              ADDS     r5,r0,#1              ;185
00002c  f8d49000          LDR      r9,[r4,#0]            ;186
000030  f04f0800          MOV      r8,#0                 ;187
000034  45a9              CMP      r9,r5                 ;188
000036  d201              BCS      |L7.60|
000038  4648              MOV      r0,r9                 ;188
00003a  e000              B        |L7.62|
                  |L7.60|
00003c  4628              MOV      r0,r5                 ;188
                  |L7.62|
00003e  4682              MOV      r10,r0                ;188
000040  6025              STR      r5,[r4,#0]            ;190
000042  b90d              CBNZ     r5,|L7.72|
000044  2004              MOVS     r0,#4                 ;195
000046  e7e3              B        |L7.16|
                  |L7.72|
000048  b90f              CBNZ     r7,|L7.78|
00004a  2000              MOVS     r0,#0                 ;201
00004c  e7e0              B        |L7.16|
                  |L7.78|
00004e  e006              B        |L7.94|
                  |L7.80|
000050  4640              MOV      r0,r8                 ;207
000052  f1080801          ADD      r8,r8,#1              ;207
000056  5c39              LDRB     r1,[r7,r0]            ;207
000058  4630              MOV      r0,r6                 ;207
00005a  f7fffffe          BL       fifo_put
                  |L7.94|
00005e  45d0              CMP      r8,r10                ;205
000060  d3f6              BCC      |L7.80|
000062  f8c4a000          STR      r10,[r4,#0]           ;210
000066  2000              MOVS     r0,#0                 ;212
000068  e7d2              B        |L7.16|
;;;214    #endif //NRF_MODULE_ENABLED(APP_FIFO)
                          ENDP


                          AREA ||i.fifo_get||, CODE, READONLY, ALIGN=1

                  fifo_get PROC
;;;69     /**@brief Get one byte from the FIFO. */
;;;70     static __INLINE void fifo_get(app_fifo_t * p_fifo, uint8_t * p_byte)
000000  b570              PUSH     {r4-r6,lr}
;;;71     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;72         fifo_peek(p_fifo, 0, p_byte);
000006  462a              MOV      r2,r5
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       fifo_peek
;;;73         p_fifo->read_pos++;
000010  68a0              LDR      r0,[r4,#8]
000012  1c40              ADDS     r0,r0,#1
000014  60a0              STR      r0,[r4,#8]
;;;74     }
000016  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP


                          AREA ||i.fifo_length||, CODE, READONLY, ALIGN=1

                  fifo_length PROC
;;;43     
;;;44     static __INLINE uint32_t fifo_length(app_fifo_t * p_fifo)
000000  4601              MOV      r1,r0
;;;45     {
;;;46         uint32_t tmp = p_fifo->read_pos;
000002  688a              LDR      r2,[r1,#8]
;;;47         return p_fifo->write_pos - tmp;
000004  68c8              LDR      r0,[r1,#0xc]
000006  1a80              SUBS     r0,r0,r2
;;;48     }
000008  4770              BX       lr
;;;49     
                          ENDP


                          AREA ||i.fifo_peek||, CODE, READONLY, ALIGN=1

                  fifo_peek PROC
;;;62     /**@brief Look at one byte in the FIFO. */
;;;63     static __INLINE void fifo_peek(app_fifo_t * p_fifo, uint16_t index, uint8_t * p_byte)
000000  b510              PUSH     {r4,lr}
;;;64     {
;;;65         *p_byte = p_fifo->p_buf[(p_fifo->read_pos + index) & p_fifo->buf_size_mask];
000002  6883              LDR      r3,[r0,#8]
000004  440b              ADD      r3,r3,r1
000006  8884              LDRH     r4,[r0,#4]
000008  4023              ANDS     r3,r3,r4
00000a  6804              LDR      r4,[r0,#0]
00000c  5ce3              LDRB     r3,[r4,r3]
00000e  7013              STRB     r3,[r2,#0]
;;;66     }
000010  bd10              POP      {r4,pc}
;;;67     
                          ENDP


                          AREA ||i.fifo_put||, CODE, READONLY, ALIGN=1

                  fifo_put PROC
;;;54     /**@brief Put one byte to the FIFO. */
;;;55     static __INLINE void fifo_put(app_fifo_t * p_fifo, uint8_t byte)
000000  68c2              LDR      r2,[r0,#0xc]
;;;56     {
;;;57         p_fifo->p_buf[p_fifo->write_pos & p_fifo->buf_size_mask] = byte;
000002  8883              LDRH     r3,[r0,#4]
000004  401a              ANDS     r2,r2,r3
000006  6803              LDR      r3,[r0,#0]
000008  5499              STRB     r1,[r3,r2]
;;;58         p_fifo->write_pos++;
00000a  68c2              LDR      r2,[r0,#0xc]
00000c  1c52              ADDS     r2,r2,#1
00000e  60c2              STR      r2,[r0,#0xc]
;;;59     }
000010  4770              BX       lr
;;;60     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\fifo\\app_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_app_fifo_c_e20caf07____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____REVSH|
#line 402
|__asm___10_app_fifo_c_e20caf07____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_app_fifo_c_e20caf07____RRX|
#line 587
|__asm___10_app_fifo_c_e20caf07____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
