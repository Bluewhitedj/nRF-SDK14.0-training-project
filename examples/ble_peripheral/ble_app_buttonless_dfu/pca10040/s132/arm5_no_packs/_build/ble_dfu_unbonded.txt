; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_dfu_unbonded.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_dfu_unbonded.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_dfu_unbonded.crf ..\..\..\..\..\..\components\ble\ble_services\ble_dfu\ble_dfu_unbonded.c]
                          THUMB

                          AREA ||i.ble_dfu_buttonless_async_svci_init||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_async_svci_init PROC
;;;140    
;;;141    uint32_t ble_dfu_buttonless_async_svci_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
;;;143        uint32_t ret_val;
;;;144    
;;;145        ret_val = nrf_dfu_svci_vector_table_set();
000002  f7fffffe          BL       nrf_dfu_svci_vector_table_set
000006  4604              MOV      r4,r0
;;;146        VERIFY_SUCCESS(ret_val);
000008  bf00              NOP      
00000a  b10c              CBZ      r4,|L1.16|
00000c  4620              MOV      r0,r4
                  |L1.14|
;;;147    
;;;148        ret_val = nrf_dfu_set_adv_name_init();
;;;149        VERIFY_SUCCESS(ret_val);
;;;150    
;;;151        ret_val = nrf_dfu_svci_vector_table_unset();
;;;152    
;;;153        return ret_val;
;;;154    }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  bf00              NOP                            ;146
000012  bf00              NOP                            ;148
000014  4d08              LDR      r5,|L1.56|
000016  4628              MOV      r0,r5                 ;148
000018  f04f0c03          MOV      r12,#3                ;148
00001c  df00              SVC      #0x0                  ;148
00001e  bf00              NOP                            ;148
000020  4604              MOV      r4,r0                 ;148
000022  bf00              NOP                            ;149
000024  b10c              CBZ      r4,|L1.42|
000026  4620              MOV      r0,r4                 ;149
000028  e7f1              B        |L1.14|
                  |L1.42|
00002a  bf00              NOP                            ;149
00002c  f7fffffe          BL       nrf_dfu_svci_vector_table_unset
000030  4604              MOV      r4,r0                 ;151
000032  4620              MOV      r0,r4                 ;153
000034  e7eb              B        |L1.14|
;;;155    
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      nrf_dfu_set_adv_name_svci_async_def

                          AREA ||i.ble_dfu_buttonless_backend_init||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_backend_init PROC
;;;131    
;;;132    uint32_t ble_dfu_buttonless_backend_init(ble_dfu_buttonless_t * p_dfu)
000000  4601              MOV      r1,r0
;;;133    {
;;;134        VERIFY_PARAM_NOT_NULL(p_dfu);
000002  bf00              NOP      
000004  b909              CBNZ     r1,|L2.10|
000006  200e              MOVS     r0,#0xe
                  |L2.8|
;;;135        
;;;136        mp_dfu = p_dfu;
;;;137        
;;;138        return NRF_SUCCESS;
;;;139    }
000008  4770              BX       lr
                  |L2.10|
00000a  bf00              NOP                            ;134
00000c  4801              LDR      r0,|L2.20|
00000e  6001              STR      r1,[r0,#0]            ;136  ; mp_dfu
000010  2000              MOVS     r0,#0                 ;138
000012  e7f9              B        |L2.8|
;;;140    
                          ENDP

                  |L2.20|
                          DCD      mp_dfu

                          AREA ||i.ble_dfu_buttonless_bootloader_start_prepare||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_bootloader_start_prepare PROC
;;;303    
;;;304    uint32_t ble_dfu_buttonless_bootloader_start_prepare(void)
000000  b510              PUSH     {r4,lr}
;;;305    {
;;;306        uint32_t err_code;
;;;307    
;;;308        // Indicate to main app that DFU mode is starting.
;;;309        mp_dfu->evt_handler(BLE_DFU_EVT_BOOTLOADER_ENTER_PREPARE);
000002  4805              LDR      r0,|L3.24|
000004  6800              LDR      r0,[r0,#0]  ; mp_dfu
000006  6941              LDR      r1,[r0,#0x14]
000008  2000              MOVS     r0,#0
00000a  4788              BLX      r1
;;;310    
;;;311        err_code = ble_dfu_buttonless_bootloader_start_finalize();
00000c  f7fffffe          BL       ble_dfu_buttonless_bootloader_start_finalize
000010  4604              MOV      r4,r0
;;;312        return err_code;
000012  4620              MOV      r0,r4
;;;313    }
000014  bd10              POP      {r4,pc}
;;;314    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      mp_dfu

                          AREA ||i.ble_dfu_buttonless_char_add||, CODE, READONLY, ALIGN=1

                  ble_dfu_buttonless_char_add PROC
;;;200    
;;;201    uint32_t ble_dfu_buttonless_char_add(ble_dfu_buttonless_t * p_dfu)
000000  b510              PUSH     {r4,lr}
;;;202    {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
;;;203        ble_gatts_char_md_t char_md         = {{0}};
000006  211c              MOVS     r1,#0x1c
000008  a809              ADD      r0,sp,#0x24
00000a  f7fffffe          BL       __aeabi_memclr4
;;;204        ble_gatts_attr_md_t cccd_md         = {{0}};
00000e  2000              MOVS     r0,#0
000010  9008              STR      r0,[sp,#0x20]
;;;205        ble_gatts_attr_t    attr_char_value = {0};
000012  2114              MOVS     r1,#0x14
000014  a803              ADD      r0,sp,#0xc
000016  f7fffffe          BL       __aeabi_memclr4
;;;206        ble_gatts_attr_md_t attr_md         = {{0}};
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;207        ble_uuid_t          char_uuid;
;;;208    
;;;209    
;;;210        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
00001e  bf00              NOP      
000020  f89d0020          LDRB     r0,[sp,#0x20]
000024  f020000f          BIC      r0,r0,#0xf
000028  1c40              ADDS     r0,r0,#1
00002a  f88d0020          STRB     r0,[sp,#0x20]
00002e  f89d0020          LDRB     r0,[sp,#0x20]
000032  f02000f0          BIC      r0,r0,#0xf0
000036  3010              ADDS     r0,r0,#0x10
000038  f88d0020          STRB     r0,[sp,#0x20]
00003c  bf00              NOP      
;;;211        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
00003e  bf00              NOP      
000040  f89d0021          LDRB     r0,[sp,#0x21]
000044  f020000f          BIC      r0,r0,#0xf
000048  1c40              ADDS     r0,r0,#1
00004a  f88d0021          STRB     r0,[sp,#0x21]
00004e  f89d0021          LDRB     r0,[sp,#0x21]
000052  f02000f0          BIC      r0,r0,#0xf0
000056  3010              ADDS     r0,r0,#0x10
000058  f88d0021          STRB     r0,[sp,#0x21]
00005c  bf00              NOP      
;;;212    
;;;213        cccd_md.vloc = BLE_GATTS_VLOC_STACK;
00005e  f89d0022          LDRB     r0,[sp,#0x22]
000062  f0200006          BIC      r0,r0,#6
000066  1c80              ADDS     r0,r0,#2
000068  f88d0022          STRB     r0,[sp,#0x22]
;;;214    
;;;215        char_md.char_props.indicate     = 1;
00006c  f89d0024          LDRB     r0,[sp,#0x24]
000070  f0200020          BIC      r0,r0,#0x20
000074  3020              ADDS     r0,r0,#0x20
000076  f88d0024          STRB     r0,[sp,#0x24]
;;;216        char_md.char_props.write        = 1;
00007a  f89d0024          LDRB     r0,[sp,#0x24]
00007e  f0200008          BIC      r0,r0,#8
000082  3008              ADDS     r0,r0,#8
000084  f88d0024          STRB     r0,[sp,#0x24]
;;;217        char_md.p_char_user_desc        = NULL;
000088  2000              MOVS     r0,#0
00008a  900a              STR      r0,[sp,#0x28]
;;;218        char_md.p_char_pf               = NULL;
00008c  900c              STR      r0,[sp,#0x30]
;;;219        char_md.p_user_desc_md          = NULL;
00008e  900d              STR      r0,[sp,#0x34]
;;;220        char_md.p_cccd_md               = &cccd_md;
000090  a808              ADD      r0,sp,#0x20
000092  900e              STR      r0,[sp,#0x38]
;;;221        char_md.p_sccd_md               = NULL;
000094  2000              MOVS     r0,#0
000096  900f              STR      r0,[sp,#0x3c]
;;;222    
;;;223        char_uuid.type = p_dfu->uuid_type;
000098  7820              LDRB     r0,[r4,#0]
00009a  f88d0006          STRB     r0,[sp,#6]
;;;224        char_uuid.uuid = BLE_DFU_BUTTONLESS_CHAR_UUID;
00009e  2003              MOVS     r0,#3
0000a0  f8ad0004          STRH     r0,[sp,#4]
;;;225    
;;;226        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
0000a4  bf00              NOP      
0000a6  f89d0008          LDRB     r0,[sp,#8]
0000aa  f020000f          BIC      r0,r0,#0xf
0000ae  1c40              ADDS     r0,r0,#1
0000b0  f88d0008          STRB     r0,[sp,#8]
0000b4  f89d0008          LDRB     r0,[sp,#8]
0000b8  f02000f0          BIC      r0,r0,#0xf0
0000bc  3010              ADDS     r0,r0,#0x10
0000be  f88d0008          STRB     r0,[sp,#8]
0000c2  bf00              NOP      
;;;227        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
0000c4  bf00              NOP      
0000c6  f89d0009          LDRB     r0,[sp,#9]
0000ca  f020000f          BIC      r0,r0,#0xf
0000ce  1c40              ADDS     r0,r0,#1
0000d0  f88d0009          STRB     r0,[sp,#9]
0000d4  f89d0009          LDRB     r0,[sp,#9]
0000d8  f02000f0          BIC      r0,r0,#0xf0
0000dc  3010              ADDS     r0,r0,#0x10
0000de  f88d0009          STRB     r0,[sp,#9]
0000e2  bf00              NOP      
;;;228    
;;;229        attr_md.vloc    = BLE_GATTS_VLOC_STACK;
0000e4  f89d000a          LDRB     r0,[sp,#0xa]
0000e8  f0200006          BIC      r0,r0,#6
0000ec  1c80              ADDS     r0,r0,#2
0000ee  f88d000a          STRB     r0,[sp,#0xa]
;;;230        attr_md.rd_auth = 0;
0000f2  f89d000a          LDRB     r0,[sp,#0xa]
0000f6  f0200008          BIC      r0,r0,#8
0000fa  f88d000a          STRB     r0,[sp,#0xa]
;;;231        attr_md.wr_auth = 1;
0000fe  f89d000a          LDRB     r0,[sp,#0xa]
000102  f0200010          BIC      r0,r0,#0x10
000106  3010              ADDS     r0,r0,#0x10
000108  f88d000a          STRB     r0,[sp,#0xa]
;;;232        attr_md.vlen    = 1;
00010c  f89d000a          LDRB     r0,[sp,#0xa]
000110  f0200001          BIC      r0,r0,#1
000114  1c40              ADDS     r0,r0,#1
000116  f88d000a          STRB     r0,[sp,#0xa]
;;;233    
;;;234        attr_char_value.p_uuid    = &char_uuid;
00011a  a801              ADD      r0,sp,#4
00011c  9003              STR      r0,[sp,#0xc]
;;;235        attr_char_value.p_attr_md = &attr_md;
00011e  a802              ADD      r0,sp,#8
000120  9004              STR      r0,[sp,#0x10]
;;;236        attr_char_value.init_len  = 0;
000122  2000              MOVS     r0,#0
000124  f8ad0014          STRH     r0,[sp,#0x14]
;;;237        attr_char_value.init_offs = 0;
000128  f8ad0016          STRH     r0,[sp,#0x16]
;;;238        attr_char_value.max_len   = BLE_GATT_ATT_MTU_DEFAULT;
00012c  2017              MOVS     r0,#0x17
00012e  f8ad0018          STRH     r0,[sp,#0x18]
;;;239        attr_char_value.p_value   = 0;
000132  2000              MOVS     r0,#0
000134  9007              STR      r0,[sp,#0x1c]
;;;240    
;;;241        return sd_ble_gatts_characteristic_add(p_dfu->service_handle,
000136  8860              LDRH     r0,[r4,#2]
000138  1da3              ADDS     r3,r4,#6
00013a  aa03              ADD      r2,sp,#0xc
00013c  a909              ADD      r1,sp,#0x24
00013e  dfa2              SVC      #0xa2
;;;242                                               &char_md,
;;;243                                               &attr_char_value,
;;;244                                               &p_dfu->control_point_char);
;;;245    }
000140  b010              ADD      sp,sp,#0x40
000142  bd10              POP      {r4,pc}
;;;246    
                          ENDP


                          AREA ||i.ble_dfu_buttonless_on_ctrl_pt_write||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_on_ctrl_pt_write PROC
;;;247    
;;;248    void ble_dfu_buttonless_on_ctrl_pt_write(ble_gatts_evt_write_t const * p_evt_write)
000000  b570              PUSH     {r4-r6,lr}
;;;249    {
000002  4604              MOV      r4,r0
;;;250        uint32_t err_code;
;;;251        ble_dfu_buttonless_rsp_code_t rsp_code = DFU_RSP_OPERATION_FAILED;
000004  2604              MOVS     r6,#4
;;;252    
;;;253        // Start executing the control point write operation
;;;254        /*lint -e415 -e416 -save "Out of bounds access"*/
;;;255        switch (p_evt_write->data[0])
000006  7b20              LDRB     r0,[r4,#0xc]
000008  2801              CMP      r0,#1
00000a  d002              BEQ      |L5.18|
00000c  2802              CMP      r0,#2
00000e  d11e              BNE      |L5.78|
000010  e005              B        |L5.30|
                  |L5.18|
;;;256        {
;;;257            case DFU_OP_ENTER_BOOTLOADER:
;;;258                err_code = enter_bootloader();
000012  f7fffffe          BL       enter_bootloader
000016  4605              MOV      r5,r0
;;;259                if (err_code == NRF_SUCCESS)
000018  b905              CBNZ     r5,|L5.28|
;;;260                {
;;;261                    rsp_code = DFU_RSP_SUCCESS;
00001a  2601              MOVS     r6,#1
                  |L5.28|
;;;262                }
;;;263                break;
00001c  e019              B        |L5.82|
                  |L5.30|
;;;264    
;;;265            case DFU_OP_SET_ADV_NAME:
;;;266    
;;;267                if(p_evt_write->data[1] > NRF_DFU_ADV_NAME_MAX_LENGTH ||
00001e  7b60              LDRB     r0,[r4,#0xd]
000020  2814              CMP      r0,#0x14
000022  dc01              BGT      |L5.40|
;;;268                   p_evt_write->data[1] == 0                          )
000024  7b60              LDRB     r0,[r4,#0xd]
000026  b908              CBNZ     r0,|L5.44|
                  |L5.40|
;;;269                {
;;;270                    // New advertisement name too short or too long.
;;;271                    rsp_code = DFU_RSP_ADV_NAME_INVALID;
000028  2605              MOVS     r6,#5
00002a  e00f              B        |L5.76|
                  |L5.44|
;;;272                }
;;;273                else
;;;274                {
;;;275                    memcpy(m_adv_name.name, &p_evt_write->data[2], p_evt_write->data[1]);
00002c  7b62              LDRB     r2,[r4,#0xd]
00002e  f104010e          ADD      r1,r4,#0xe
000032  480f              LDR      r0,|L5.112|
000034  f7fffffe          BL       __aeabi_memcpy
;;;276                    m_adv_name.len = p_evt_write->data[1];
000038  7b60              LDRB     r0,[r4,#0xd]
00003a  490d              LDR      r1,|L5.112|
00003c  1f09              SUBS     r1,r1,#4
00003e  6188              STR      r0,[r1,#0x18]  ; m_adv_name
;;;277                    err_code = set_adv_name(&m_adv_name);
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       set_adv_name
000046  4605              MOV      r5,r0
;;;278                    if (err_code == NRF_SUCCESS)
000048  b905              CBNZ     r5,|L5.76|
;;;279                    {
;;;280                        rsp_code = DFU_RSP_SUCCESS;
00004a  2601              MOVS     r6,#1
                  |L5.76|
;;;281                    }
;;;282                }
;;;283    
;;;284                break;
00004c  e001              B        |L5.82|
                  |L5.78|
;;;285    
;;;286            default:
;;;287                rsp_code = DFU_RSP_OP_CODE_NOT_SUPPORTED;
00004e  2602              MOVS     r6,#2
;;;288                break;
000050  bf00              NOP      
                  |L5.82|
000052  bf00              NOP                            ;263
;;;289        }
;;;290        /*lint -restore*/
;;;291    
;;;292    
;;;293        // Report back in case of error
;;;294        if (rsp_code != DFU_RSP_SUCCESS)
000054  2e01              CMP      r6,#1
000056  d00a              BEQ      |L5.110|
;;;295        {
;;;296            err_code = ble_dfu_buttonless_resp_send((ble_dfu_buttonless_op_code_t)p_evt_write->data[0], rsp_code);
000058  7b20              LDRB     r0,[r4,#0xc]
00005a  4631              MOV      r1,r6
00005c  f7fffffe          BL       ble_dfu_buttonless_resp_send
000060  4605              MOV      r5,r0
;;;297            if (err_code != NRF_SUCCESS)
000062  b125              CBZ      r5,|L5.110|
;;;298            {
;;;299                mp_dfu->evt_handler(BLE_DFU_EVT_RESPONSE_SEND_ERROR);
000064  4803              LDR      r0,|L5.116|
000066  6800              LDR      r0,[r0,#0]  ; mp_dfu
000068  6941              LDR      r1,[r0,#0x14]
00006a  2003              MOVS     r0,#3
00006c  4788              BLX      r1
                  |L5.110|
;;;300            }
;;;301        }
;;;302    }
00006e  bd70              POP      {r4-r6,pc}
;;;303    
                          ENDP

                  |L5.112|
                          DCD      m_adv_name+0x4
                  |L5.116|
                          DCD      mp_dfu

                          AREA ||i.ble_dfu_buttonless_on_sys_evt||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_on_sys_evt PROC
;;;156    
;;;157    void ble_dfu_buttonless_on_sys_evt(uint32_t sys_evt, void * p_context)
000000  b570              PUSH     {r4-r6,lr}
;;;158    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;159        uint32_t err_code;
;;;160    
;;;161        if (!nrf_dfu_set_adv_name_is_initialized())
000006  bf00              NOP      
000008  481b              LDR      r0,|L6.120|
00000a  6800              LDR      r0,[r0,#0]  ; nrf_dfu_set_adv_name_svci_async_def
00000c  b120              CBZ      r0,|L6.24|
00000e  481a              LDR      r0,|L6.120|
000010  6840              LDR      r0,[r0,#4]  ; nrf_dfu_set_adv_name_svci_async_def
000012  b108              CBZ      r0,|L6.24|
000014  2001              MOVS     r0,#1
000016  e000              B        |L6.26|
                  |L6.24|
000018  2000              MOVS     r0,#0
                  |L6.26|
00001a  b900              CBNZ     r0,|L6.30|
                  |L6.28|
;;;162        {
;;;163            return;
;;;164        }
;;;165    
;;;166        err_code = nrf_dfu_set_adv_name_on_sys_evt(sys_evt);
;;;167        if (err_code == NRF_ERROR_BUSY)
;;;168        {
;;;169            // Async operations are ongoing.
;;;170            // No action is taken, and nothing is reported
;;;171    
;;;172        }
;;;173        else if (err_code == NRF_SUCCESS)
;;;174        {
;;;175            // The async operation is finished.
;;;176            // Set the flag indicating that we are waiting for indication response
;;;177            // to activate the reset.
;;;178            mp_dfu->is_waiting_for_svci = false;
;;;179    
;;;180            // Report back the positive response
;;;181            err_code = ble_dfu_buttonless_resp_send(DFU_OP_SET_ADV_NAME, DFU_RSP_SUCCESS);
;;;182            if (err_code != NRF_SUCCESS)
;;;183            {
;;;184                mp_dfu->evt_handler(BLE_DFU_EVT_RESPONSE_SEND_ERROR);
;;;185            }
;;;186        }
;;;187        else
;;;188        {
;;;189            // Invalid error code reported back.
;;;190            mp_dfu->is_waiting_for_svci = false;
;;;191    
;;;192            err_code = ble_dfu_buttonless_resp_send(DFU_OP_SET_ADV_NAME, DFU_RSP_OPERATION_FAILED);
;;;193            if (err_code != NRF_SUCCESS)
;;;194            {
;;;195                mp_dfu->evt_handler(BLE_DFU_EVT_RESPONSE_SEND_ERROR);
;;;196            }
;;;197        }
;;;198    }
00001c  bd70              POP      {r4-r6,pc}
                  |L6.30|
00001e  bf00              NOP                            ;166
000020  4815              LDR      r0,|L6.120|
000022  f1000108          ADD      r1,r0,#8              ;166
000026  6842              LDR      r2,[r0,#4]            ;166  ; nrf_dfu_set_adv_name_svci_async_def
000028  4628              MOV      r0,r5                 ;166
00002a  4790              BLX      r2                    ;166
00002c  4604              MOV      r4,r0                 ;166
00002e  bf00              NOP                            ;166
000030  2c11              CMP      r4,#0x11              ;167
000032  d01f              BEQ      |L6.116|
000034  b97c              CBNZ     r4,|L6.86|
000036  2000              MOVS     r0,#0                 ;178
000038  4910              LDR      r1,|L6.124|
00003a  6809              LDR      r1,[r1,#0]            ;178  ; mp_dfu
00003c  7688              STRB     r0,[r1,#0x1a]         ;178
00003e  2101              MOVS     r1,#1                 ;181
000040  2002              MOVS     r0,#2                 ;181
000042  f7fffffe          BL       ble_dfu_buttonless_resp_send
000046  4604              MOV      r4,r0                 ;181
000048  b1a4              CBZ      r4,|L6.116|
00004a  480c              LDR      r0,|L6.124|
00004c  6800              LDR      r0,[r0,#0]            ;184  ; mp_dfu
00004e  6941              LDR      r1,[r0,#0x14]         ;184
000050  2003              MOVS     r0,#3                 ;184
000052  4788              BLX      r1                    ;184
000054  e00e              B        |L6.116|
                  |L6.86|
000056  2000              MOVS     r0,#0                 ;190
000058  4908              LDR      r1,|L6.124|
00005a  6809              LDR      r1,[r1,#0]            ;190  ; mp_dfu
00005c  7688              STRB     r0,[r1,#0x1a]         ;190
00005e  2104              MOVS     r1,#4                 ;192
000060  2002              MOVS     r0,#2                 ;192
000062  f7fffffe          BL       ble_dfu_buttonless_resp_send
000066  4604              MOV      r4,r0                 ;192
000068  b124              CBZ      r4,|L6.116|
00006a  4804              LDR      r0,|L6.124|
00006c  6800              LDR      r0,[r0,#0]            ;195  ; mp_dfu
00006e  6941              LDR      r1,[r0,#0x14]         ;195
000070  2003              MOVS     r0,#3                 ;195
000072  4788              BLX      r1                    ;195
                  |L6.116|
000074  bf00              NOP      
000076  e7d1              B        |L6.28|
;;;199    
                          ENDP

                  |L6.120|
                          DCD      nrf_dfu_set_adv_name_svci_async_def
                  |L6.124|
                          DCD      mp_dfu

                          AREA ||i.enter_bootloader||, CODE, READONLY, ALIGN=2

                  enter_bootloader PROC
;;;98      */
;;;99     static uint32_t enter_bootloader()
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101        uint32_t err_code;
;;;102    
;;;103        if (mp_dfu->is_waiting_for_svci)
000002  4810              LDR      r0,|L7.68|
000004  6800              LDR      r0,[r0,#0]  ; mp_dfu
000006  7e80              LDRB     r0,[r0,#0x1a]
000008  b160              CBZ      r0,|L7.36|
;;;104        {
;;;105            // We have an ongoing async operation. Entering bootloader mode is not possible at this time.
;;;106            err_code = ble_dfu_buttonless_resp_send(DFU_OP_ENTER_BOOTLOADER, DFU_RSP_BUSY);
00000a  2106              MOVS     r1,#6
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       ble_dfu_buttonless_resp_send
000012  4604              MOV      r4,r0
;;;107            if (err_code != NRF_SUCCESS)
000014  b124              CBZ      r4,|L7.32|
;;;108            {
;;;109                mp_dfu->evt_handler(BLE_DFU_EVT_RESPONSE_SEND_ERROR);
000016  480b              LDR      r0,|L7.68|
000018  6800              LDR      r0,[r0,#0]  ; mp_dfu
00001a  6941              LDR      r1,[r0,#0x14]
00001c  2003              MOVS     r0,#3
00001e  4788              BLX      r1
                  |L7.32|
;;;110            }
;;;111            return NRF_SUCCESS;
000020  2000              MOVS     r0,#0
                  |L7.34|
;;;112        }
;;;113    
;;;114        // Set the flag indicating that we expect DFU mode.
;;;115        // This will be handled on acknowledgement of the characteristic indication.
;;;116        mp_dfu->is_waiting_for_reset = true;
;;;117    
;;;118        err_code = ble_dfu_buttonless_resp_send(DFU_OP_ENTER_BOOTLOADER, DFU_RSP_SUCCESS);
;;;119        if (err_code != NRF_SUCCESS)
;;;120        {
;;;121            mp_dfu->is_waiting_for_reset = false;
;;;122        }
;;;123    
;;;124        return err_code;
;;;125    }
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  2001              MOVS     r0,#1                 ;116
000026  4907              LDR      r1,|L7.68|
000028  6809              LDR      r1,[r1,#0]            ;116  ; mp_dfu
00002a  7648              STRB     r0,[r1,#0x19]         ;116
00002c  2101              MOVS     r1,#1                 ;118
00002e  4608              MOV      r0,r1                 ;118
000030  f7fffffe          BL       ble_dfu_buttonless_resp_send
000034  4604              MOV      r4,r0                 ;118
000036  b11c              CBZ      r4,|L7.64|
000038  2000              MOVS     r0,#0                 ;121
00003a  4902              LDR      r1,|L7.68|
00003c  6809              LDR      r1,[r1,#0]            ;121  ; mp_dfu
00003e  7648              STRB     r0,[r1,#0x19]         ;121
                  |L7.64|
000040  4620              MOV      r0,r4                 ;124
000042  e7ee              B        |L7.34|
;;;126    
                          ENDP

                  |L7.68|
                          DCD      mp_dfu

                          AREA ||i.set_adv_name||, CODE, READONLY, ALIGN=2

                  set_adv_name PROC
;;;76      */
;;;77     static uint32_t set_adv_name(nrf_dfu_adv_name_t * p_adv_name)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
000002  4605              MOV      r5,r0
;;;79         uint32_t err_code;
;;;80     
;;;81         if (mp_dfu->is_waiting_for_svci)
000004  480a              LDR      r0,|L8.48|
000006  6800              LDR      r0,[r0,#0]  ; mp_dfu
000008  7e80              LDRB     r0,[r0,#0x1a]
00000a  b108              CBZ      r0,|L8.16|
;;;82         {
;;;83             return DFU_RSP_BUSY;
00000c  2006              MOVS     r0,#6
                  |L8.14|
;;;84         }
;;;85     
;;;86         err_code = nrf_dfu_set_adv_name(p_adv_name);
;;;87         if (err_code == NRF_SUCCESS)
;;;88         {
;;;89             // The request was accepted.
;;;90             mp_dfu->is_waiting_for_svci = true;
;;;91         }
;;;92     
;;;93         return err_code;
;;;94     }
00000e  bd70              POP      {r4-r6,pc}
                  |L8.16|
000010  bf00              NOP                            ;86
000012  4808              LDR      r0,|L8.52|
000014  f1000108          ADD      r1,r0,#8              ;86
000018  6802              LDR      r2,[r0,#0]            ;86  ; nrf_dfu_set_adv_name_svci_async_def
00001a  4628              MOV      r0,r5                 ;86
00001c  4790              BLX      r2                    ;86
00001e  4604              MOV      r4,r0                 ;86
000020  bf00              NOP                            ;86
000022  b91c              CBNZ     r4,|L8.44|
000024  2001              MOVS     r0,#1                 ;90
000026  4902              LDR      r1,|L8.48|
000028  6809              LDR      r1,[r1,#0]            ;90  ; mp_dfu
00002a  7688              STRB     r0,[r1,#0x1a]         ;90
                  |L8.44|
00002c  4620              MOV      r0,r4                 ;93
00002e  e7ee              B        |L8.14|
;;;95     
                          ENDP

                  |L8.48|
                          DCD      mp_dfu
                  |L8.52|
                          DCD      nrf_dfu_set_adv_name_svci_async_def

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  nrf_dfu_set_adv_name_svci_async_def
                          %        12
                  m_adv_name
                          %        28

                          AREA ||.data||, DATA, ALIGN=2

                  mp_dfu
                          DCD      0x00000000

                          AREA sdh_soc_observers1, DATA, READONLY, ALIGN=2

                  m_dfu_buttonless_soc_obs
                  ||__tagsym$$used||
                          DCD      ble_dfu_buttonless_on_sys_evt
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_services\\ble_dfu\\ble_dfu_unbonded.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_dfu_unbonded_c_mp_dfu____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_ble_dfu_unbonded_c_mp_dfu____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_dfu_unbonded_c_mp_dfu____REVSH|
#line 402
|__asm___18_ble_dfu_unbonded_c_mp_dfu____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_ble_dfu_unbonded_c_mp_dfu____RRX|
#line 587
|__asm___18_ble_dfu_unbonded_c_mp_dfu____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
