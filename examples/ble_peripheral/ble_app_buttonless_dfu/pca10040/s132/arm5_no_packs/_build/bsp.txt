; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\bsp.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\bsp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\bsp.crf ..\..\..\..\..\..\components\libraries\bsp\bsp.c]
                          THUMB

                          AREA ||i.alert_timer_handler||, CODE, READONLY, ALIGN=1

                  alert_timer_handler PROC
;;;445     */
;;;446    static void alert_timer_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;447    {
000002  4604              MOV      r4,r0
;;;448        UNUSED_PARAMETER(p_context);
;;;449        bsp_board_led_invert(BSP_LED_ALERT);
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       bsp_board_led_invert
;;;450    }
00000a  bd10              POP      {r4,pc}
;;;451    #endif // #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
                          ENDP


                          AREA ||i.bsp_button_event_handler||, CODE, READONLY, ALIGN=2

                  bsp_button_event_handler PROC
;;;123     */
;;;124    static void bsp_button_event_handler(uint8_t pin_no, uint8_t button_action)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;125    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;126        bsp_event_t        event  = BSP_EVENT_NOTHING;
000008  f04f0800          MOV      r8,#0
;;;127        uint32_t           button = 0;
00000c  2400              MOVS     r4,#0
;;;128        uint32_t           err_code;
;;;129        static uint8_t     current_long_push_pin_no;              /**< Pin number of a currently pushed button, that could become a long push if held long enough. */
;;;130        static bsp_event_t release_event_at_push[BUTTONS_NUMBER]; /**< Array of what the release event of each button was last time it was pushed, so that no release event is sent if the event was bound after the push of the button. */
;;;131    
;;;132        button = bsp_board_pin_to_button_idx(pin_no);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       bsp_board_pin_to_button_idx
000014  4604              MOV      r4,r0
;;;133    
;;;134        if (button < BUTTONS_NUMBER)
000016  2c04              CMP      r4,#4
000018  d23e              BCS      |L2.152|
;;;135        {
;;;136            switch (button_action)
00001a  b30f              CBZ      r7,|L2.96|
00001c  2f01              CMP      r7,#1
00001e  d002              BEQ      |L2.38|
000020  2f02              CMP      r7,#2
000022  d138              BNE      |L2.150|
000024  e030              B        |L2.136|
                  |L2.38|
;;;137            {
;;;138                case APP_BUTTON_PUSH:
;;;139                    event = m_events_list[button].push_event;
000026  eb040044          ADD      r0,r4,r4,LSL #1
00002a  4921              LDR      r1,|L2.176|
00002c  f8118000          LDRB     r8,[r1,r0]
;;;140                    if (m_events_list[button].long_push_event != BSP_EVENT_NOTHING)
000030  eb040044          ADD      r0,r4,r4,LSL #1
000034  4408              ADD      r0,r0,r1
000036  7840              LDRB     r0,[r0,#1]
000038  b150              CBZ      r0,|L2.80|
;;;141                    {
;;;142                        err_code = app_timer_start(m_button_timer_id, APP_TIMER_TICKS(BSP_LONG_PUSH_TIMEOUT_MS), (void*)&current_long_push_pin_no);
00003a  4a1e              LDR      r2,|L2.180|
00003c  f44f4100          MOV      r1,#0x8000
000040  481d              LDR      r0,|L2.184|
000042  6800              LDR      r0,[r0,#0]  ; m_button_timer_id
000044  f7fffffe          BL       app_timer_start
000048  4605              MOV      r5,r0
;;;143                        if (err_code == NRF_SUCCESS)
00004a  b90d              CBNZ     r5,|L2.80|
;;;144                        {
;;;145                            current_long_push_pin_no = pin_no;
00004c  4819              LDR      r0,|L2.180|
00004e  7006              STRB     r6,[r0,#0]
                  |L2.80|
;;;146                        }
;;;147                    }
;;;148                    release_event_at_push[button] = m_events_list[button].release_event;
000050  eb040044          ADD      r0,r4,r4,LSL #1
000054  4916              LDR      r1,|L2.176|
000056  4408              ADD      r0,r0,r1
000058  7880              LDRB     r0,[r0,#2]
00005a  4918              LDR      r1,|L2.188|
00005c  5508              STRB     r0,[r1,r4]
;;;149                    break;
00005e  e01a              B        |L2.150|
                  |L2.96|
;;;150                case APP_BUTTON_RELEASE:
;;;151                    (void)app_timer_stop(m_button_timer_id);
000060  4815              LDR      r0,|L2.184|
000062  6800              LDR      r0,[r0,#0]  ; m_button_timer_id
000064  f7fffffe          BL       app_timer_stop
;;;152                    if (release_event_at_push[button] == m_events_list[button].release_event)
000068  4814              LDR      r0,|L2.188|
00006a  5d00              LDRB     r0,[r0,r4]
00006c  eb040144          ADD      r1,r4,r4,LSL #1
000070  4a0f              LDR      r2,|L2.176|
000072  4411              ADD      r1,r1,r2
000074  7889              LDRB     r1,[r1,#2]
000076  4288              CMP      r0,r1
000078  d105              BNE      |L2.134|
;;;153                    {
;;;154                        event = m_events_list[button].release_event;
00007a  eb040044          ADD      r0,r4,r4,LSL #1
00007e  4611              MOV      r1,r2
000080  4408              ADD      r0,r0,r1
000082  f8908002          LDRB     r8,[r0,#2]
                  |L2.134|
;;;155                    }
;;;156                    break;
000086  e006              B        |L2.150|
                  |L2.136|
;;;157                case BSP_BUTTON_ACTION_LONG_PUSH:
;;;158                    event = m_events_list[button].long_push_event;
000088  eb040044          ADD      r0,r4,r4,LSL #1
00008c  4908              LDR      r1,|L2.176|
00008e  4408              ADD      r0,r0,r1
000090  f8908001          LDRB     r8,[r0,#1]
000094  bf00              NOP                            ;136
                  |L2.150|
000096  bf00              NOP                            ;149
                  |L2.152|
;;;159            }
;;;160        }
;;;161    
;;;162        if ((event != BSP_EVENT_NOTHING) && (m_registered_callback != NULL))
000098  f1b80f00          CMP      r8,#0
00009c  d006              BEQ      |L2.172|
00009e  4808              LDR      r0,|L2.192|
0000a0  6800              LDR      r0,[r0,#0]  ; m_registered_callback
0000a2  b118              CBZ      r0,|L2.172|
;;;163        {
;;;164            m_registered_callback(event);
0000a4  4640              MOV      r0,r8
0000a6  4906              LDR      r1,|L2.192|
0000a8  6809              LDR      r1,[r1,#0]  ; m_registered_callback
0000aa  4788              BLX      r1
                  |L2.172|
;;;165        }
;;;166    }
0000ac  e8bd81f0          POP      {r4-r8,pc}
;;;167    
                          ENDP

                  |L2.176|
                          DCD      m_events_list
                  |L2.180|
                          DCD      current_long_push_pin_no
                  |L2.184|
                          DCD      m_button_timer_id
                  |L2.188|
                          DCD      release_event_at_push
                  |L2.192|
                          DCD      m_registered_callback

                          AREA ||i.bsp_button_is_pressed||, CODE, READONLY, ALIGN=1

                  bsp_button_is_pressed PROC
;;;111    #if (BUTTONS_NUMBER > 0)
;;;112    bool bsp_button_is_pressed(uint32_t button)
000000  b510              PUSH     {r4,lr}
;;;113    {
000002  4604              MOV      r4,r0
;;;114        return bsp_board_button_state_get(button);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_board_button_state_get
;;;115    }
00000a  bd10              POP      {r4,pc}
;;;116    #endif
                          ENDP


                          AREA ||i.bsp_buttons_disable||, CODE, READONLY, ALIGN=1

                  bsp_buttons_disable PROC
;;;598    
;;;599    uint32_t bsp_buttons_disable()
000000  b510              PUSH     {r4,lr}
;;;600    {
;;;601    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;602        return app_button_disable();
000002  f7fffffe          BL       app_button_disable
;;;603    #else
;;;604        return NRF_ERROR_NOT_SUPPORTED;
;;;605    #endif
;;;606    }
000006  bd10              POP      {r4,pc}
;;;607    
                          ENDP


                          AREA ||i.bsp_buttons_enable||, CODE, READONLY, ALIGN=1

                  bsp_buttons_enable PROC
;;;589    
;;;590    uint32_t bsp_buttons_enable()
000000  b510              PUSH     {r4,lr}
;;;591    {
;;;592    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;593        return app_button_enable();
000002  f7fffffe          BL       app_button_enable
;;;594    #else
;;;595        return NRF_ERROR_NOT_SUPPORTED;
;;;596    #endif
;;;597    }
000006  bd10              POP      {r4,pc}
;;;598    
                          ENDP


                          AREA ||i.bsp_event_to_button_action_assign||, CODE, READONLY, ALIGN=2

                  bsp_event_to_button_action_assign PROC
;;;547     */
;;;548    uint32_t bsp_event_to_button_action_assign(uint32_t button, bsp_button_action_t action, bsp_event_t event)
000000  b530              PUSH     {r4,r5,lr}
;;;549    {
000002  4603              MOV      r3,r0
;;;550        uint32_t err_code = NRF_SUCCESS;
000004  2000              MOVS     r0,#0
;;;551    
;;;552    #if BUTTONS_NUMBER > 0
;;;553        if (button < BUTTONS_NUMBER)
000006  2b04              CMP      r3,#4
000008  d223              BCS      |L6.82|
;;;554        {
;;;555            if (event == BSP_EVENT_DEFAULT)
00000a  2a01              CMP      r2,#1
00000c  d107              BNE      |L6.30|
;;;556            {
;;;557                // Setting default action: BSP_EVENT_KEY_x for PUSH actions, BSP_EVENT_NOTHING for RELEASE and LONG_PUSH actions.
;;;558                event = (action == BSP_BUTTON_ACTION_PUSH) ? (bsp_event_t)(BSP_EVENT_KEY_0 + button) : BSP_EVENT_NOTHING;
00000e  2901              CMP      r1,#1
000010  d103              BNE      |L6.26|
000012  f103040e          ADD      r4,r3,#0xe
000016  b2e4              UXTB     r4,r4
000018  e000              B        |L6.28|
                  |L6.26|
00001a  2400              MOVS     r4,#0
                  |L6.28|
00001c  4622              MOV      r2,r4
                  |L6.30|
;;;559            }
;;;560            switch (action)
00001e  b179              CBZ      r1,|L6.64|
000020  2901              CMP      r1,#1
000022  d002              BEQ      |L6.42|
000024  2902              CMP      r1,#2
000026  d111              BNE      |L6.76|
000028  e004              B        |L6.52|
                  |L6.42|
;;;561            {
;;;562                case BSP_BUTTON_ACTION_PUSH:
;;;563                    m_events_list[button].push_event = event;
00002a  eb030443          ADD      r4,r3,r3,LSL #1
00002e  4d0a              LDR      r5,|L6.88|
000030  552a              STRB     r2,[r5,r4]
;;;564                    break;
000032  e00d              B        |L6.80|
                  |L6.52|
;;;565                case BSP_BUTTON_ACTION_LONG_PUSH:
;;;566                    m_events_list[button].long_push_event = event;
000034  eb030443          ADD      r4,r3,r3,LSL #1
000038  4d07              LDR      r5,|L6.88|
00003a  442c              ADD      r4,r4,r5
00003c  7062              STRB     r2,[r4,#1]
;;;567                    break;
00003e  e007              B        |L6.80|
                  |L6.64|
;;;568                case BSP_BUTTON_ACTION_RELEASE:
;;;569                    m_events_list[button].release_event = event;
000040  eb030443          ADD      r4,r3,r3,LSL #1
000044  4d04              LDR      r5,|L6.88|
000046  442c              ADD      r4,r4,r5
000048  70a2              STRB     r2,[r4,#2]
;;;570                    break;
00004a  e001              B        |L6.80|
                  |L6.76|
;;;571                default:
;;;572                    err_code = NRF_ERROR_INVALID_PARAM;
00004c  2007              MOVS     r0,#7
;;;573                    break;
00004e  bf00              NOP      
                  |L6.80|
000050  e000              B        |L6.84|
                  |L6.82|
;;;574            }
;;;575        }
;;;576        else
;;;577        {
;;;578            err_code = NRF_ERROR_INVALID_PARAM;
000052  2007              MOVS     r0,#7
                  |L6.84|
;;;579        }
;;;580    #else
;;;581        err_code = NRF_ERROR_INVALID_PARAM;
;;;582    #endif // BUTTONS_NUMBER > 0
;;;583    
;;;584        return err_code;
;;;585    }
000054  bd30              POP      {r4,r5,pc}
;;;586    
                          ENDP

000056  0000              DCW      0x0000
                  |L6.88|
                          DCD      m_events_list

                          AREA ||i.bsp_indication_set||, CODE, READONLY, ALIGN=2

                  bsp_indication_set PROC
;;;455     */
;;;456    uint32_t bsp_indication_set(bsp_indication_t indicate)
000000  b570              PUSH     {r4-r6,lr}
;;;457    {
000002  4604              MOV      r4,r0
;;;458        uint32_t err_code = NRF_SUCCESS;
000004  2500              MOVS     r5,#0
;;;459    
;;;460    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;461    
;;;462        if (m_indication_type & BSP_INIT_LED)
000006  4805              LDR      r0,|L7.28|
000008  7800              LDRB     r0,[r0,#0]  ; m_indication_type
00000a  f0000001          AND      r0,r0,#1
00000e  b118              CBZ      r0,|L7.24|
;;;463        {
;;;464            err_code = bsp_led_indication(indicate);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       bsp_led_indication
000016  4605              MOV      r5,r0
                  |L7.24|
;;;465        }
;;;466    
;;;467    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;468        return err_code;
000018  4628              MOV      r0,r5
;;;469    }
00001a  bd70              POP      {r4-r6,pc}
;;;470    
                          ENDP

                  |L7.28|
                          DCD      m_indication_type

                          AREA ||i.bsp_init||, CODE, READONLY, ALIGN=2

                  bsp_init PROC
;;;471    
;;;472    uint32_t bsp_init(uint32_t type, bsp_event_callback_t callback)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;473    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;474        uint32_t err_code = NRF_SUCCESS;
000008  2400              MOVS     r4,#0
;;;475    
;;;476    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;477        m_indication_type     = type;
00000a  481f              LDR      r0,|L8.136|
00000c  6005              STR      r5,[r0,#0]  ; m_indication_type
;;;478    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;479    
;;;480    #if (BUTTONS_NUMBER > 0) && !(defined BSP_SIMPLE)
;;;481        m_registered_callback = callback;
00000e  481f              LDR      r0,|L8.140|
000010  6007              STR      r7,[r0,#0]  ; m_registered_callback
;;;482    
;;;483        // BSP will support buttons and generate events
;;;484        if (type & BSP_INIT_BUTTONS)
000012  f0050002          AND      r0,r5,#2
000016  b300              CBZ      r0,|L8.90|
;;;485        {
;;;486            uint32_t num;
;;;487    
;;;488            for (num = 0; ((num < BUTTONS_NUMBER) && (err_code == NRF_SUCCESS)); num++)
000018  2600              MOVS     r6,#0
00001a  e006              B        |L8.42|
                  |L8.28|
;;;489            {
;;;490                err_code = bsp_event_to_button_action_assign(num, BSP_BUTTON_ACTION_PUSH, BSP_EVENT_DEFAULT);
00001c  2201              MOVS     r2,#1
00001e  4611              MOV      r1,r2
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       bsp_event_to_button_action_assign
000026  4604              MOV      r4,r0
000028  1c76              ADDS     r6,r6,#1              ;488
                  |L8.42|
00002a  2e04              CMP      r6,#4                 ;488
00002c  d201              BCS      |L8.50|
00002e  2c00              CMP      r4,#0                 ;488
000030  d0f4              BEQ      |L8.28|
                  |L8.50|
;;;491            }
;;;492    
;;;493            if (err_code == NRF_SUCCESS)
000032  b934              CBNZ     r4,|L8.66|
;;;494            {
;;;495                err_code = app_button_init((app_button_cfg_t *)app_buttons,
000034  f2406266          MOV      r2,#0x666
000038  2104              MOVS     r1,#4
00003a  4815              LDR      r0,|L8.144|
00003c  f7fffffe          BL       app_button_init
000040  4604              MOV      r4,r0
                  |L8.66|
;;;496                                           BUTTONS_NUMBER,
;;;497                                           APP_TIMER_TICKS(50));
;;;498            }
;;;499    
;;;500            if (err_code == NRF_SUCCESS)
000042  b914              CBNZ     r4,|L8.74|
;;;501            {
;;;502                err_code = app_button_enable();
000044  f7fffffe          BL       app_button_enable
000048  4604              MOV      r4,r0
                  |L8.74|
;;;503            }
;;;504    
;;;505            if (err_code == NRF_SUCCESS)
00004a  b92c              CBNZ     r4,|L8.88|
;;;506            {
;;;507                err_code = app_timer_create(&m_button_timer_id,
00004c  4a11              LDR      r2,|L8.148|
00004e  2100              MOVS     r1,#0
000050  4811              LDR      r0,|L8.152|
000052  f7fffffe          BL       app_timer_create
000056  4604              MOV      r4,r0
                  |L8.88|
;;;508                                            APP_TIMER_MODE_SINGLE_SHOT,
;;;509                                            button_timer_handler);
;;;510            }
;;;511        }
000058  bf00              NOP      
                  |L8.90|
;;;512    #elif (BUTTONS_NUMBER > 0) && (defined BSP_SIMPLE)
;;;513    
;;;514        if (type & BSP_INIT_BUTTONS)
;;;515        {
;;;516            bsp_board_buttons_init();
;;;517        }
;;;518    #endif // (BUTTONS_NUMBER > 0) && !(defined BSP_SIMPLE)
;;;519    
;;;520    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;521    
;;;522        if (type & BSP_INIT_LED)
00005a  f0050001          AND      r0,r5,#1
00005e  b108              CBZ      r0,|L8.100|
;;;523        {
;;;524            bsp_board_leds_init();
000060  f7fffffe          BL       bsp_board_leds_init
                  |L8.100|
;;;525        }
;;;526    
;;;527        // timers module must be already initialized!
;;;528        if (err_code == NRF_SUCCESS)
000064  b92c              CBNZ     r4,|L8.114|
;;;529        {
;;;530            err_code =
000066  4a0d              LDR      r2,|L8.156|
000068  2100              MOVS     r1,#0
00006a  480d              LDR      r0,|L8.160|
00006c  f7fffffe          BL       app_timer_create
000070  4604              MOV      r4,r0
                  |L8.114|
;;;531                app_timer_create(&m_leds_timer_id, APP_TIMER_MODE_SINGLE_SHOT, leds_timer_handler);
;;;532        }
;;;533    
;;;534        if (err_code == NRF_SUCCESS)
000072  b92c              CBNZ     r4,|L8.128|
;;;535        {
;;;536            err_code =
000074  4a0b              LDR      r2,|L8.164|
000076  2101              MOVS     r1,#1
000078  480b              LDR      r0,|L8.168|
00007a  f7fffffe          BL       app_timer_create
00007e  4604              MOV      r4,r0
                  |L8.128|
;;;537                app_timer_create(&m_alert_timer_id, APP_TIMER_MODE_REPEATED, alert_timer_handler);
;;;538        }
;;;539    #endif // LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;540    
;;;541        return err_code;
000080  4620              MOV      r0,r4
;;;542    }
000082  e8bd81f0          POP      {r4-r8,pc}
;;;543    
                          ENDP

000086  0000              DCW      0x0000
                  |L8.136|
                          DCD      m_indication_type
                  |L8.140|
                          DCD      m_registered_callback
                  |L8.144|
                          DCD      app_buttons
                  |L8.148|
                          DCD      button_timer_handler
                  |L8.152|
                          DCD      m_button_timer_id
                  |L8.156|
                          DCD      leds_timer_handler
                  |L8.160|
                          DCD      m_leds_timer_id
                  |L8.164|
                          DCD      alert_timer_handler
                  |L8.168|
                          DCD      m_alert_timer_id

                          AREA ||i.bsp_led_indication||, CODE, READONLY, ALIGN=2

                  bsp_led_indication PROC
;;;204     */
;;;205    static uint32_t bsp_led_indication(bsp_indication_t indicate)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;206    {
000004  4604              MOV      r4,r0
;;;207        uint32_t err_code   = NRF_SUCCESS;
000006  2600              MOVS     r6,#0
;;;208        uint32_t next_delay = 0;
000008  2500              MOVS     r5,#0
;;;209    
;;;210        if (m_leds_clear)
00000a  48d7              LDR      r0,|L9.872|
00000c  7800              LDRB     r0,[r0,#0]  ; m_leds_clear
00000e  b120              CBZ      r0,|L9.26|
;;;211        {
;;;212            m_leds_clear = false;
000010  2000              MOVS     r0,#0
000012  49d5              LDR      r1,|L9.872|
000014  7008              STRB     r0,[r1,#0]
;;;213            leds_off();
000016  f7fffffe          BL       leds_off
                  |L9.26|
;;;214        }
;;;215    
;;;216        switch (indicate)
00001a  2c18              CMP      r4,#0x18
00001c  d279              BCS      |L9.274|
00001e  e8dff004          TBB      [pc,r4]
000022  0c11              DCB      0x0c,0x11
000024  124579ad          DCB      0x12,0x45,0x79,0xad
000028  f1ffeeed          DCB      0xf1,0xff,0xee,0xed
00002c  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
000030  e8e7e6e5          DCB      0xe8,0xe7,0xe6,0xe5
000034  e4e3e2e1          DCB      0xe4,0xe3,0xe2,0xe1
000038  e0df              DCB      0xe0,0xdf
;;;217        {
;;;218            case BSP_INDICATE_IDLE:
;;;219                leds_off();
00003a  f7fffffe          BL       leds_off
;;;220                m_stable_state = indicate;
00003e  48cb              LDR      r0,|L9.876|
000040  7004              STRB     r4,[r0,#0]
;;;221                break;
000042  e18d              B        |L9.864|
;;;222    
;;;223            case BSP_INDICATE_SCANNING:
;;;224            case BSP_INDICATE_ADVERTISING:
000044  bf00              NOP      
;;;225                // in advertising blink LED_0
;;;226                if (bsp_board_led_state_get(BSP_LED_INDICATE_INDICATE_ADVERTISING))
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       bsp_board_led_state_get
00004c  b158              CBZ      r0,|L9.102|
;;;227                {
;;;228                    bsp_board_led_off(BSP_LED_INDICATE_INDICATE_ADVERTISING);
00004e  2001              MOVS     r0,#1
000050  f7fffffe          BL       bsp_board_led_off
;;;229                    next_delay = indicate ==
000054  2c02              CMP      r4,#2
000056  d102              BNE      |L9.94|
;;;230                                 BSP_INDICATE_ADVERTISING ? ADVERTISING_LED_OFF_INTERVAL :
000058  f44f7096          MOV      r0,#0x12c
00005c  e001              B        |L9.98|
                  |L9.94|
;;;231                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
00005e  f44f702f          MOV      r0,#0x2bc
                  |L9.98|
000062  4605              MOV      r5,r0
000064  e009              B        |L9.122|
                  |L9.102|
;;;232                }
;;;233                else
;;;234                {
;;;235                    bsp_board_led_on(BSP_LED_INDICATE_INDICATE_ADVERTISING);
000066  2001              MOVS     r0,#1
000068  f7fffffe          BL       bsp_board_led_on
;;;236                    next_delay = indicate ==
00006c  2c02              CMP      r4,#2
00006e  d101              BNE      |L9.116|
;;;237                                 BSP_INDICATE_ADVERTISING ? ADVERTISING_LED_ON_INTERVAL :
000070  20c8              MOVS     r0,#0xc8
000072  e001              B        |L9.120|
                  |L9.116|
;;;238                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
000074  f44f7096          MOV      r0,#0x12c
                  |L9.120|
000078  4605              MOV      r5,r0
                  |L9.122|
;;;239                }
;;;240    
;;;241                m_stable_state = indicate;
00007a  48bc              LDR      r0,|L9.876|
00007c  7004              STRB     r4,[r0,#0]
;;;242                err_code       = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(next_delay), NULL);
00007e  f44f4000          MOV      r0,#0x8000
000082  fba52000          UMULL    r2,r0,r5,r0
000086  f44f73fa          MOV      r3,#0x1f4
00008a  18d7              ADDS     r7,r2,r3
00008c  f1400100          ADC      r1,r0,#0
000090  005a              LSLS     r2,r3,#1
000092  2300              MOVS     r3,#0
000094  4638              MOV      r0,r7
000096  f7fffffe          BL       __aeabi_uldivmod
00009a  4681              MOV      r9,r0
00009c  2200              MOVS     r2,#0
00009e  4649              MOV      r1,r9
0000a0  48b3              LDR      r0,|L9.880|
0000a2  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0000a4  f7fffffe          BL       app_timer_start
0000a8  4606              MOV      r6,r0
;;;243                break;
0000aa  e159              B        |L9.864|
;;;244    
;;;245            case BSP_INDICATE_ADVERTISING_WHITELIST:
;;;246                // in advertising quickly blink LED_0
;;;247                if (bsp_board_led_state_get(BSP_LED_INDICATE_ADVERTISING_WHITELIST))
0000ac  2000              MOVS     r0,#0
0000ae  f7fffffe          BL       bsp_board_led_state_get
0000b2  b158              CBZ      r0,|L9.204|
;;;248                {
;;;249                    bsp_board_led_off(BSP_LED_INDICATE_ADVERTISING_WHITELIST);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       bsp_board_led_off
;;;250                    next_delay = indicate ==
0000ba  2c03              CMP      r4,#3
0000bc  d102              BNE      |L9.196|
;;;251                                 BSP_INDICATE_ADVERTISING_WHITELIST ?
;;;252                                 ADVERTISING_WHITELIST_LED_OFF_INTERVAL :
0000be  f44f7048          MOV      r0,#0x320
0000c2  e001              B        |L9.200|
                  |L9.196|
;;;253                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
0000c4  f44f702f          MOV      r0,#0x2bc
                  |L9.200|
0000c8  4605              MOV      r5,r0
0000ca  e009              B        |L9.224|
                  |L9.204|
;;;254                }
;;;255                else
;;;256                {
;;;257                    bsp_board_led_on(BSP_LED_INDICATE_ADVERTISING_WHITELIST);
0000cc  2000              MOVS     r0,#0
0000ce  f7fffffe          BL       bsp_board_led_on
;;;258                    next_delay = indicate ==
0000d2  2c03              CMP      r4,#3
0000d4  d101              BNE      |L9.218|
;;;259                                 BSP_INDICATE_ADVERTISING_WHITELIST ?
;;;260                                 ADVERTISING_WHITELIST_LED_ON_INTERVAL :
0000d6  20c8              MOVS     r0,#0xc8
0000d8  e001              B        |L9.222|
                  |L9.218|
;;;261                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
0000da  f44f7096          MOV      r0,#0x12c
                  |L9.222|
0000de  4605              MOV      r5,r0
                  |L9.224|
;;;262                }
;;;263                m_stable_state = indicate;
0000e0  48a2              LDR      r0,|L9.876|
0000e2  7004              STRB     r4,[r0,#0]
;;;264                err_code       = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(next_delay), NULL);
0000e4  f44f4000          MOV      r0,#0x8000
0000e8  fba52000          UMULL    r2,r0,r5,r0
0000ec  f44f73fa          MOV      r3,#0x1f4
0000f0  18d7              ADDS     r7,r2,r3
0000f2  f1400100          ADC      r1,r0,#0
0000f6  005a              LSLS     r2,r3,#1
0000f8  2300              MOVS     r3,#0
0000fa  4638              MOV      r0,r7
0000fc  f7fffffe          BL       __aeabi_uldivmod
000100  4681              MOV      r9,r0
000102  2200              MOVS     r2,#0
000104  4649              MOV      r1,r9
000106  489a              LDR      r0,|L9.880|
000108  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
00010a  f7fffffe          BL       app_timer_start
00010e  4606              MOV      r6,r0
;;;265                break;
000110  e126              B        |L9.864|
                  |L9.274|
000112  e124              B        |L9.862|
;;;266    
;;;267            case BSP_INDICATE_ADVERTISING_SLOW:
;;;268                // in advertising slowly blink LED_0
;;;269                if (bsp_board_led_state_get(BSP_LED_INDICATE_ADVERTISING_SLOW))
000114  2001              MOVS     r0,#1
000116  f7fffffe          BL       bsp_board_led_state_get
00011a  b158              CBZ      r0,|L9.308|
;;;270                {
;;;271                    bsp_board_led_off(BSP_LED_INDICATE_ADVERTISING_SLOW);
00011c  2001              MOVS     r0,#1
00011e  f7fffffe          BL       bsp_board_led_off
;;;272                    next_delay = indicate ==
000122  2c04              CMP      r4,#4
000124  d102              BNE      |L9.300|
;;;273                                 BSP_INDICATE_ADVERTISING_SLOW ? ADVERTISING_SLOW_LED_OFF_INTERVAL :
000126  f44f702f          MOV      r0,#0x2bc
00012a  e001              B        |L9.304|
                  |L9.300|
;;;274                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
00012c  f44f702f          MOV      r0,#0x2bc
                  |L9.304|
000130  4605              MOV      r5,r0
000132  e00a              B        |L9.330|
                  |L9.308|
;;;275                }
;;;276                else
;;;277                {
;;;278                    bsp_board_led_on(BSP_LED_INDICATE_ADVERTISING_SLOW);
000134  2001              MOVS     r0,#1
000136  f7fffffe          BL       bsp_board_led_on
;;;279                    next_delay = indicate ==
00013a  2c04              CMP      r4,#4
00013c  d102              BNE      |L9.324|
;;;280                                 BSP_INDICATE_ADVERTISING_SLOW ? ADVERTISING_SLOW_LED_ON_INTERVAL :
00013e  f44f7096          MOV      r0,#0x12c
000142  e001              B        |L9.328|
                  |L9.324|
;;;281                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
000144  f44f7096          MOV      r0,#0x12c
                  |L9.328|
000148  4605              MOV      r5,r0
                  |L9.330|
;;;282                }
;;;283                m_stable_state = indicate;
00014a  4888              LDR      r0,|L9.876|
00014c  7004              STRB     r4,[r0,#0]
;;;284                err_code       = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(next_delay), NULL);
00014e  f44f4000          MOV      r0,#0x8000
000152  fba51000          UMULL    r1,r0,r5,r0
000156  f44f73fa          MOV      r3,#0x1f4
00015a  18cf              ADDS     r7,r1,r3
00015c  f1400100          ADC      r1,r0,#0
000160  005a              LSLS     r2,r3,#1
000162  2300              MOVS     r3,#0
000164  4638              MOV      r0,r7
000166  f7fffffe          BL       __aeabi_uldivmod
00016a  4681              MOV      r9,r0
00016c  2200              MOVS     r2,#0
00016e  4649              MOV      r1,r9
000170  487f              LDR      r0,|L9.880|
000172  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000174  f7fffffe          BL       app_timer_start
000178  4606              MOV      r6,r0
;;;285                break;
00017a  e0f1              B        |L9.864|
;;;286    
;;;287            case BSP_INDICATE_ADVERTISING_DIRECTED:
;;;288                // in advertising very quickly blink LED_0
;;;289                if (bsp_board_led_state_get(BSP_LED_INDICATE_ADVERTISING_DIRECTED))
00017c  2000              MOVS     r0,#0
00017e  f7fffffe          BL       bsp_board_led_state_get
000182  b150              CBZ      r0,|L9.410|
;;;290                {
;;;291                    bsp_board_led_off(BSP_LED_INDICATE_ADVERTISING_DIRECTED);
000184  2000              MOVS     r0,#0
000186  f7fffffe          BL       bsp_board_led_off
;;;292                    next_delay = indicate ==
00018a  2c05              CMP      r4,#5
00018c  d101              BNE      |L9.402|
;;;293                                 BSP_INDICATE_ADVERTISING_DIRECTED ?
;;;294                                 ADVERTISING_DIRECTED_LED_OFF_INTERVAL :
00018e  20c8              MOVS     r0,#0xc8
000190  e001              B        |L9.406|
                  |L9.402|
;;;295                                 ADVERTISING_SLOW_LED_OFF_INTERVAL;
000192  f44f702f          MOV      r0,#0x2bc
                  |L9.406|
000196  4605              MOV      r5,r0
000198  e009              B        |L9.430|
                  |L9.410|
;;;296                }
;;;297                else
;;;298                {
;;;299                    bsp_board_led_on(BSP_LED_INDICATE_ADVERTISING_DIRECTED);
00019a  2000              MOVS     r0,#0
00019c  f7fffffe          BL       bsp_board_led_on
;;;300                    next_delay = indicate ==
0001a0  2c05              CMP      r4,#5
0001a2  d101              BNE      |L9.424|
;;;301                                 BSP_INDICATE_ADVERTISING_DIRECTED ?
;;;302                                 ADVERTISING_DIRECTED_LED_ON_INTERVAL :
0001a4  20c8              MOVS     r0,#0xc8
0001a6  e001              B        |L9.428|
                  |L9.424|
;;;303                                 ADVERTISING_SLOW_LED_ON_INTERVAL;
0001a8  f44f7096          MOV      r0,#0x12c
                  |L9.428|
0001ac  4605              MOV      r5,r0
                  |L9.430|
;;;304                }
;;;305                m_stable_state = indicate;
0001ae  486f              LDR      r0,|L9.876|
0001b0  7004              STRB     r4,[r0,#0]
;;;306                err_code       = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(next_delay), NULL);
0001b2  f44f4000          MOV      r0,#0x8000
0001b6  fba52000          UMULL    r2,r0,r5,r0
0001ba  f44f73fa          MOV      r3,#0x1f4
0001be  18d7              ADDS     r7,r2,r3
0001c0  f1400100          ADC      r1,r0,#0
0001c4  005a              LSLS     r2,r3,#1
0001c6  2300              MOVS     r3,#0
0001c8  4638              MOV      r0,r7
0001ca  f7fffffe          BL       __aeabi_uldivmod
0001ce  4681              MOV      r9,r0
0001d0  2200              MOVS     r2,#0
0001d2  4649              MOV      r1,r9
0001d4  4866              LDR      r0,|L9.880|
0001d6  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
0001d8  f7fffffe          BL       app_timer_start
0001dc  4606              MOV      r6,r0
;;;307                break;
0001de  e0bf              B        |L9.864|
0001e0  e0b8              B        |L9.852|
0001e2  e0b6              B        |L9.850|
0001e4  e0aa              B        |L9.828|
0001e6  e0a1              B        |L9.812|
0001e8  e098              B        |L9.796|
0001ea  e092              B        |L9.786|
0001ec  e05f              B        |L9.686|
0001ee  e05d              B        |L9.684|
0001f0  e05b              B        |L9.682|
0001f2  e059              B        |L9.680|
0001f4  e057              B        |L9.678|
0001f6  e051              B        |L9.668|
0001f8  e042              B        |L9.640|
0001fa  e033              B        |L9.612|
0001fc  e024              B        |L9.584|
0001fe  e015              B        |L9.556|
000200  e00e              B        |L9.544|
000202  e7ff              B        |L9.516|
                  |L9.516|
;;;308    
;;;309            case BSP_INDICATE_BONDING:
;;;310                // in bonding fast blink LED_0
;;;311                bsp_board_led_invert(BSP_LED_INDICATE_BONDING);
000204  2000              MOVS     r0,#0
000206  f7fffffe          BL       bsp_board_led_invert
;;;312    
;;;313                m_stable_state = indicate;
00020a  4858              LDR      r0,|L9.876|
00020c  7004              STRB     r4,[r0,#0]
;;;314                err_code       =
00020e  2200              MOVS     r2,#0
000210  f64041cd          MOV      r1,#0xccd
000214  4856              LDR      r0,|L9.880|
000216  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000218  f7fffffe          BL       app_timer_start
00021c  4606              MOV      r6,r0
;;;315                    app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(BONDING_INTERVAL), NULL);
;;;316                break;
00021e  e09f              B        |L9.864|
                  |L9.544|
;;;317    
;;;318            case BSP_INDICATE_CONNECTED:
;;;319                bsp_board_led_on(BSP_LED_INDICATE_CONNECTED);
000220  2000              MOVS     r0,#0
000222  f7fffffe          BL       bsp_board_led_on
;;;320                m_stable_state = indicate;
000226  4851              LDR      r0,|L9.876|
000228  7004              STRB     r4,[r0,#0]
;;;321                break;
00022a  e099              B        |L9.864|
                  |L9.556|
;;;322    
;;;323            case BSP_INDICATE_SENT_OK:
;;;324                // when sending shortly invert LED_1
;;;325                m_leds_clear = true;
00022c  2001              MOVS     r0,#1
00022e  494e              LDR      r1,|L9.872|
000230  7008              STRB     r0,[r1,#0]
;;;326                bsp_board_led_invert(BSP_LED_INDICATE_SENT_OK);
000232  f7fffffe          BL       bsp_board_led_invert
;;;327                err_code = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(SENT_OK_INTERVAL), NULL);
000236  2200              MOVS     r2,#0
000238  f64041cd          MOV      r1,#0xccd
00023c  484c              LDR      r0,|L9.880|
00023e  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000240  f7fffffe          BL       app_timer_start
000244  4606              MOV      r6,r0
;;;328                break;
000246  e08b              B        |L9.864|
                  |L9.584|
;;;329    
;;;330            case BSP_INDICATE_SEND_ERROR:
;;;331                // on receving error invert LED_1 for long time
;;;332                m_leds_clear = true;
000248  2001              MOVS     r0,#1
00024a  4947              LDR      r1,|L9.872|
00024c  7008              STRB     r0,[r1,#0]
;;;333                bsp_board_led_invert(BSP_LED_INDICATE_SEND_ERROR);
00024e  f7fffffe          BL       bsp_board_led_invert
;;;334                err_code = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(SEND_ERROR_INTERVAL), NULL);
000252  2200              MOVS     r2,#0
000254  f44f4180          MOV      r1,#0x4000
000258  4845              LDR      r0,|L9.880|
00025a  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
00025c  f7fffffe          BL       app_timer_start
000260  4606              MOV      r6,r0
;;;335                break;
000262  e07d              B        |L9.864|
                  |L9.612|
;;;336    
;;;337            case BSP_INDICATE_RCV_OK:
;;;338                // when receving shortly invert LED_1
;;;339                m_leds_clear = true;
000264  2001              MOVS     r0,#1
000266  4940              LDR      r1,|L9.872|
000268  7008              STRB     r0,[r1,#0]
;;;340                bsp_board_led_invert(BSP_LED_INDICATE_RCV_OK);
00026a  f7fffffe          BL       bsp_board_led_invert
;;;341                err_code = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(RCV_OK_INTERVAL), NULL);
00026e  2200              MOVS     r2,#0
000270  f64041cd          MOV      r1,#0xccd
000274  483e              LDR      r0,|L9.880|
000276  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000278  f7fffffe          BL       app_timer_start
00027c  4606              MOV      r6,r0
;;;342                break;
00027e  e06f              B        |L9.864|
                  |L9.640|
;;;343    
;;;344            case BSP_INDICATE_RCV_ERROR:
;;;345                // on receving error invert LED_1 for long time
;;;346                m_leds_clear = true;
000280  2001              MOVS     r0,#1
000282  4939              LDR      r1,|L9.872|
000284  7008              STRB     r0,[r1,#0]
;;;347                bsp_board_led_invert(BSP_LED_INDICATE_RCV_ERROR);
000286  f7fffffe          BL       bsp_board_led_invert
;;;348                err_code = app_timer_start(m_leds_timer_id, APP_TIMER_TICKS(RCV_ERROR_INTERVAL), NULL);
00028a  2200              MOVS     r2,#0
00028c  f44f4180          MOV      r1,#0x4000
000290  4837              LDR      r0,|L9.880|
000292  6800              LDR      r0,[r0,#0]  ; m_leds_timer_id
000294  f7fffffe          BL       app_timer_start
000298  4606              MOV      r6,r0
;;;349                break;
00029a  e061              B        |L9.864|
                  |L9.668|
;;;350    
;;;351            case BSP_INDICATE_FATAL_ERROR:
;;;352                // on fatal error turn on all leds
;;;353                bsp_board_leds_on();
00029c  f7fffffe          BL       bsp_board_leds_on
;;;354                m_stable_state = indicate;
0002a0  4832              LDR      r0,|L9.876|
0002a2  7004              STRB     r4,[r0,#0]
;;;355                break;
0002a4  e05c              B        |L9.864|
                  |L9.678|
;;;356    
;;;357            case BSP_INDICATE_ALERT_0:
;;;358            case BSP_INDICATE_ALERT_1:
0002a6  bf00              NOP      
                  |L9.680|
;;;359            case BSP_INDICATE_ALERT_2:
0002a8  bf00              NOP      
                  |L9.682|
;;;360            case BSP_INDICATE_ALERT_3:
0002aa  bf00              NOP      
                  |L9.684|
;;;361            case BSP_INDICATE_ALERT_OFF:
0002ac  bf00              NOP      
                  |L9.686|
;;;362                err_code   = app_timer_stop(m_alert_timer_id);
0002ae  4831              LDR      r0,|L9.884|
0002b0  6800              LDR      r0,[r0,#0]  ; m_alert_timer_id
0002b2  f7fffffe          BL       app_timer_stop
0002b6  4606              MOV      r6,r0
;;;363                next_delay = (uint32_t)BSP_INDICATE_ALERT_OFF - (uint32_t)indicate;
0002b8  f1c40511          RSB      r5,r4,#0x11
;;;364    
;;;365                // a little trick to find out that if it did not fall through ALERT_OFF
;;;366                if (next_delay && (err_code == NRF_SUCCESS))
0002bc  b315              CBZ      r5,|L9.772|
0002be  bb0e              CBNZ     r6,|L9.772|
;;;367                {
;;;368                    if (next_delay > 1)
0002c0  2d01              CMP      r5,#1
0002c2  d918              BLS      |L9.758|
;;;369                    {
;;;370                        err_code = app_timer_start(m_alert_timer_id,
0002c4  b2a8              UXTH     r0,r5
0002c6  21c8              MOVS     r1,#0xc8
0002c8  4348              MULS     r0,r1,r0
0002ca  f44f4100          MOV      r1,#0x8000
0002ce  fb803001          SMULL    r3,r0,r0,r1
0002d2  f44f72fa          MOV      r2,#0x1f4
0002d6  189f              ADDS     r7,r3,r2
0002d8  f1400100          ADC      r1,r0,#0
0002dc  0052              LSLS     r2,r2,#1
0002de  2300              MOVS     r3,#0
0002e0  4638              MOV      r0,r7
0002e2  f7fffffe          BL       __aeabi_uldivmod
0002e6  4681              MOV      r9,r0
0002e8  2200              MOVS     r2,#0
0002ea  4649              MOV      r1,r9
0002ec  4821              LDR      r0,|L9.884|
0002ee  6800              LDR      r0,[r0,#0]  ; m_alert_timer_id
0002f0  f7fffffe          BL       app_timer_start
0002f4  4606              MOV      r6,r0
                  |L9.758|
;;;371                                                   APP_TIMER_TICKS(((uint16_t)next_delay * ALERT_INTERVAL)),
;;;372                                                   NULL);
;;;373                    }
;;;374                    bsp_board_led_on(BSP_LED_ALERT);
0002f6  2002              MOVS     r0,#2
0002f8  f7fffffe          BL       bsp_board_led_on
;;;375                    m_alert_on = true;
0002fc  2001              MOVS     r0,#1
0002fe  491e              LDR      r1,|L9.888|
000300  7008              STRB     r0,[r1,#0]
000302  e005              B        |L9.784|
                  |L9.772|
;;;376                }
;;;377                else
;;;378                {
;;;379                    bsp_board_led_off(BSP_LED_ALERT);
000304  2002              MOVS     r0,#2
000306  f7fffffe          BL       bsp_board_led_off
;;;380                    m_alert_on = false;
00030a  2000              MOVS     r0,#0
00030c  491a              LDR      r1,|L9.888|
00030e  7008              STRB     r0,[r1,#0]
                  |L9.784|
;;;381    
;;;382                }
;;;383                break;
000310  e026              B        |L9.864|
                  |L9.786|
;;;384    
;;;385            case BSP_INDICATE_USER_STATE_OFF:
;;;386                leds_off();
000312  f7fffffe          BL       leds_off
;;;387                m_stable_state = indicate;
000316  4815              LDR      r0,|L9.876|
000318  7004              STRB     r4,[r0,#0]
;;;388                break;
00031a  e021              B        |L9.864|
                  |L9.796|
;;;389    
;;;390            case BSP_INDICATE_USER_STATE_0:
;;;391                leds_off();
00031c  f7fffffe          BL       leds_off
;;;392                bsp_board_led_on(BSP_LED_INDICATE_USER_LED1);
000320  2000              MOVS     r0,#0
000322  f7fffffe          BL       bsp_board_led_on
;;;393                m_stable_state = indicate;
000326  4811              LDR      r0,|L9.876|
000328  7004              STRB     r4,[r0,#0]
;;;394                break;
00032a  e019              B        |L9.864|
                  |L9.812|
;;;395    
;;;396            case BSP_INDICATE_USER_STATE_1:
;;;397                leds_off();
00032c  f7fffffe          BL       leds_off
;;;398                bsp_board_led_on(BSP_LED_INDICATE_USER_LED2);
000330  2001              MOVS     r0,#1
000332  f7fffffe          BL       bsp_board_led_on
;;;399                m_stable_state = indicate;
000336  480d              LDR      r0,|L9.876|
000338  7004              STRB     r4,[r0,#0]
;;;400                break;
00033a  e011              B        |L9.864|
                  |L9.828|
;;;401    
;;;402            case BSP_INDICATE_USER_STATE_2:
;;;403                leds_off();
00033c  f7fffffe          BL       leds_off
;;;404                bsp_board_led_on(BSP_LED_INDICATE_USER_LED1);
000340  2000              MOVS     r0,#0
000342  f7fffffe          BL       bsp_board_led_on
;;;405                bsp_board_led_on(BSP_LED_INDICATE_USER_LED2);
000346  2001              MOVS     r0,#1
000348  f7fffffe          BL       bsp_board_led_on
;;;406                m_stable_state = indicate;
00034c  4807              LDR      r0,|L9.876|
00034e  7004              STRB     r4,[r0,#0]
;;;407                break;
000350  e006              B        |L9.864|
                  |L9.850|
;;;408    
;;;409            case BSP_INDICATE_USER_STATE_3:
;;;410    
;;;411            case BSP_INDICATE_USER_STATE_ON:
000352  bf00              NOP      
                  |L9.852|
;;;412                bsp_board_leds_on();
000354  f7fffffe          BL       bsp_board_leds_on
;;;413                m_stable_state = indicate;
000358  4804              LDR      r0,|L9.876|
00035a  7004              STRB     r4,[r0,#0]
;;;414                break;
00035c  e000              B        |L9.864|
                  |L9.862|
;;;415    
;;;416            default:
;;;417                break;
00035e  bf00              NOP      
                  |L9.864|
000360  bf00              NOP                            ;221
;;;418        }
;;;419    
;;;420        return err_code;
000362  4630              MOV      r0,r6
;;;421    }
000364  e8bd87f0          POP      {r4-r10,pc}
;;;422    
                          ENDP

                  |L9.872|
                          DCD      m_leds_clear
                  |L9.876|
                          DCD      m_stable_state
                  |L9.880|
                          DCD      m_leds_timer_id
                  |L9.884|
                          DCD      m_alert_timer_id
                  |L9.888|
                          DCD      m_alert_on

                          AREA ||i.bsp_wakeup_button_disable||, CODE, READONLY, ALIGN=1

                  bsp_wakeup_button_disable PROC
;;;619    
;;;620    uint32_t bsp_wakeup_button_disable(uint32_t button_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;621    {
000002  4604              MOV      r4,r0
;;;622    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;623        nrf_gpio_cfg_sense_set(bsp_board_button_idx_to_pin(button_idx),
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_board_button_idx_to_pin
00000a  4605              MOV      r5,r0
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       nrf_gpio_cfg_sense_set
;;;624                               NRF_GPIO_PIN_NOSENSE);
;;;625        return NRF_SUCCESS;
000012  2000              MOVS     r0,#0
;;;626    #else
;;;627        UNUSED_PARAMETER(button_idx);
;;;628        return NRF_ERROR_NOT_SUPPORTED;
;;;629    #endif
;;;630    }
000014  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.bsp_wakeup_button_enable||, CODE, READONLY, ALIGN=1

                  bsp_wakeup_button_enable PROC
;;;607    
;;;608    uint32_t bsp_wakeup_button_enable(uint32_t button_idx)
000000  b570              PUSH     {r4-r6,lr}
;;;609    {
000002  4604              MOV      r4,r0
;;;610    #if (BUTTONS_NUMBER > 0) && !defined(BSP_SIMPLE)
;;;611        nrf_gpio_cfg_sense_set(bsp_board_button_idx_to_pin(button_idx),
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_board_button_idx_to_pin
00000a  4605              MOV      r5,r0
00000c  2103              MOVS     r1,#3
00000e  f7fffffe          BL       nrf_gpio_cfg_sense_set
;;;612                BUTTONS_ACTIVE_STATE ? NRF_GPIO_PIN_SENSE_HIGH :NRF_GPIO_PIN_SENSE_LOW);
;;;613        return NRF_SUCCESS;
000012  2000              MOVS     r0,#0
;;;614    #else
;;;615        UNUSED_PARAMETER(button_idx);
;;;616        return NRF_ERROR_NOT_SUPPORTED;
;;;617    #endif
;;;618    }
000014  bd70              POP      {r4-r6,pc}
;;;619    
                          ENDP


                          AREA ||i.button_timer_handler||, CODE, READONLY, ALIGN=1

                  button_timer_handler PROC
;;;171     */
;;;172    static void button_timer_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;173    {
000002  4604              MOV      r4,r0
;;;174        bsp_button_event_handler(*(uint8_t *)p_context, BSP_BUTTON_ACTION_LONG_PUSH);
000004  7820              LDRB     r0,[r4,#0]
000006  2102              MOVS     r1,#2
000008  f7fffffe          BL       bsp_button_event_handler
;;;175    }
00000c  bd10              POP      {r4,pc}
;;;176    
                          ENDP


                          AREA ||i.leds_off||, CODE, READONLY, ALIGN=2

                  leds_off PROC
;;;181    #if LEDS_NUMBER > 0 && !(defined BSP_SIMPLE)
;;;182    static void leds_off(void)
000000  b510              PUSH     {r4,lr}
;;;183    {
;;;184        if (m_alert_on)
000002  4808              LDR      r0,|L13.36|
000004  7800              LDRB     r0,[r0,#0]  ; m_alert_on
000006  b150              CBZ      r0,|L13.30|
;;;185        {
;;;186            uint32_t i;
;;;187            for (i = 0; i < LEDS_NUMBER; i++)
000008  2400              MOVS     r4,#0
00000a  e005              B        |L13.24|
                  |L13.12|
;;;188            {
;;;189                if (i != BSP_LED_ALERT)
00000c  2c02              CMP      r4,#2
00000e  d002              BEQ      |L13.22|
;;;190                {
;;;191                    bsp_board_led_off(i);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       bsp_board_led_off
                  |L13.22|
000016  1c64              ADDS     r4,r4,#1              ;187
                  |L13.24|
000018  2c04              CMP      r4,#4                 ;187
00001a  d3f7              BCC      |L13.12|
;;;192                }
;;;193            }
;;;194        }
00001c  e001              B        |L13.34|
                  |L13.30|
;;;195        else
;;;196        {
;;;197            bsp_board_leds_off();
00001e  f7fffffe          BL       bsp_board_leds_off
                  |L13.34|
;;;198        }
;;;199    }
000022  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  |L13.36|
                          DCD      m_alert_on

                          AREA ||i.leds_timer_handler||, CODE, READONLY, ALIGN=2

                  leds_timer_handler PROC
;;;430     */
;;;431    static void leds_timer_handler(void * p_context)
000000  b510              PUSH     {r4,lr}
;;;432    {
000002  4604              MOV      r4,r0
;;;433        UNUSED_PARAMETER(p_context);
;;;434    
;;;435        if (m_indication_type & BSP_INIT_LED)
000004  4804              LDR      r0,|L14.24|
000006  7800              LDRB     r0,[r0,#0]  ; m_indication_type
000008  f0000001          AND      r0,r0,#1
00000c  b118              CBZ      r0,|L14.22|
;;;436        {
;;;437            UNUSED_VARIABLE(bsp_led_indication(m_stable_state));
00000e  4803              LDR      r0,|L14.28|
000010  7800              LDRB     r0,[r0,#0]  ; m_stable_state
000012  f7fffffe          BL       bsp_led_indication
                  |L14.22|
;;;438        }
;;;439    }
000016  bd10              POP      {r4,pc}
;;;440    
                          ENDP

                  |L14.24|
                          DCD      m_indication_type
                  |L14.28|
                          DCD      m_stable_state

                          AREA ||i.nrf_gpio_cfg_sense_set||, CODE, READONLY, ALIGN=1

                  nrf_gpio_cfg_sense_set PROC
;;;591    
;;;592    __STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t pin_number, nrf_gpio_pin_sense_t sense_config)
000000  b510              PUSH     {r4,lr}
;;;593    {
000002  460a              MOV      r2,r1
;;;594        NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
000004  bf00              NOP      
000006  f04f43a0          MOV      r3,#0x50000000
00000a  4619              MOV      r1,r3
;;;595    
;;;596        /*lint -e{845} // A zero has been given as right argument to operator '|'" */
;;;597        reg->PIN_CNF[pin_number] &= ~GPIO_PIN_CNF_SENSE_Msk;
00000c  f50163e0          ADD      r3,r1,#0x700
000010  f8533020          LDR      r3,[r3,r0,LSL #2]
000014  f4233440          BIC      r4,r3,#0x30000
000018  f50163e0          ADD      r3,r1,#0x700
00001c  f8434020          STR      r4,[r3,r0,LSL #2]
;;;598        reg->PIN_CNF[pin_number] |= (sense_config << GPIO_PIN_CNF_SENSE_Pos);
000020  f8533020          LDR      r3,[r3,r0,LSL #2]
000024  ea434402          ORR      r4,r3,r2,LSL #16
000028  f50163e0          ADD      r3,r1,#0x700
00002c  f8434020          STR      r4,[r3,r0,LSL #2]
;;;599    }
000030  bd10              POP      {r4,pc}
;;;600    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_leds_timer_id_data
                          %        32
                  m_alert_timer_id_data
                          %        32
                  m_events_list
                          %        12
                  m_button_timer_id_data
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_leds_timer_id
                          DCD      m_leds_timer_id_data
                  m_alert_timer_id
                          DCD      m_alert_timer_id_data
                  m_button_timer_id
                          DCD      m_button_timer_id_data
                  app_buttons
00000c  0d000300          DCB      0x0d,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
000014  0e000300          DCB      0x0e,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
00001c  0f000300          DCB      0x0f,0x00,0x03,0x00
                          DCD      bsp_button_event_handler
000024  10000300          DCB      0x10,0x00,0x03,0x00
                          DCD      bsp_button_event_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_stable_state
000000  00                DCB      0x00
                  m_leds_clear
000001  000000            DCB      0x00,0x00,0x00
                  m_indication_type
                          DCD      0x00000000
                  m_alert_on
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  m_registered_callback
                          DCD      0x00000000
                  current_long_push_pin_no
000010  00                DCB      0x00
                  release_event_at_push
000011  000000            DCB      0x00,0x00,0x00
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\bsp\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_2c5c7607____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_bsp_c_2c5c7607____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_2c5c7607____REVSH|
#line 402
|__asm___5_bsp_c_2c5c7607____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_2c5c7607____RRX|
#line 587
|__asm___5_bsp_c_2c5c7607____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
