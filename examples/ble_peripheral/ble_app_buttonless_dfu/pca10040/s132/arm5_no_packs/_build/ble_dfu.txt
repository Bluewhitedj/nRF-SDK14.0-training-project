; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\ble_dfu.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\ble_dfu.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\ble_dfu.crf ..\..\..\..\..\..\components\ble\ble_services\ble_dfu\ble_dfu.c]
                          THUMB

                          AREA ||i.ble_dfu_buttonless_bootloader_start_finalize||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_bootloader_start_finalize PROC
;;;278    
;;;279    uint32_t ble_dfu_buttonless_bootloader_start_finalize(void)
000000  b510              PUSH     {r4,lr}
;;;280    {
;;;281        uint32_t err_code;
;;;282    
;;;283        NRF_LOG_DEBUG("In ble_dfu_buttonless_bootloader_start_finalize\r\n");
000002  4912              LDR      r1,|L1.76|
000004  8809              LDRH     r1,[r1,#0]  ; m_nrf_log_app_logs_data_dynamic
000006  2204              MOVS     r2,#4
000008  ea424001          ORR      r0,r2,r1,LSL #16
00000c  a110              ADR      r1,|L1.80|
00000e  f7fffffe          BL       nrf_log_frontend_std_0
;;;284    
;;;285        err_code = sd_power_gpregret_clr(0, 0xffffffff);
000012  f04f31ff          MOV      r1,#0xffffffff
000016  2000              MOVS     r0,#0
000018  df3b              SVC      #0x3b
00001a  4604              MOV      r4,r0
;;;286        VERIFY_SUCCESS(err_code);
00001c  bf00              NOP      
00001e  b10c              CBZ      r4,|L1.36|
000020  4620              MOV      r0,r4
                  |L1.34|
;;;287    
;;;288        err_code = sd_power_gpregret_set(0, BOOTLOADER_DFU_START);
;;;289        VERIFY_SUCCESS(err_code);
;;;290    
;;;291        // Indicate that the Secure DFU bootloader will be entered
;;;292        m_dfu.evt_handler(BLE_DFU_EVT_BOOTLOADER_ENTER);
;;;293    
;;;294        // Signal that DFU mode is to be enter to the power management module
;;;295        nrf_pwr_mgmt_shutdown(NRF_PWR_MGMT_SHUTDOWN_GOTO_DFU);
;;;296    
;;;297        return NRF_SUCCESS;
;;;298    }
000022  bd10              POP      {r4,pc}
                  |L1.36|
000024  bf00              NOP                            ;286
000026  21b1              MOVS     r1,#0xb1              ;288
000028  2000              MOVS     r0,#0                 ;288
00002a  df3a              SVC      #0x3a                 ;288
00002c  4604              MOV      r4,r0                 ;288
00002e  bf00              NOP                            ;289
000030  b10c              CBZ      r4,|L1.54|
000032  4620              MOV      r0,r4                 ;289
000034  e7f5              B        |L1.34|
                  |L1.54|
000036  bf00              NOP                            ;289
000038  4812              LDR      r0,|L1.132|
00003a  6941              LDR      r1,[r0,#0x14]         ;292  ; m_dfu
00003c  2001              MOVS     r0,#1                 ;292
00003e  4788              BLX      r1                    ;292
000040  2002              MOVS     r0,#2                 ;295
000042  f7fffffe          BL       nrf_pwr_mgmt_shutdown
000046  2000              MOVS     r0,#0                 ;297
000048  e7eb              B        |L1.34|
;;;299    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L1.80|
000050  496e2062          DCB      "In ble_dfu_buttonless_bootloader_start_finalize\r\n",0
000054  6c655f64
000058  66755f62
00005c  7574746f
000060  6e6c6573
000064  735f626f
000068  6f746c6f
00006c  61646572
000070  5f737461
000074  72745f66
000078  696e616c
00007c  697a650d
000080  0a00    
000082  00                DCB      0
000083  00                DCB      0
                  |L1.132|
                          DCD      m_dfu

                          AREA ||i.ble_dfu_buttonless_init||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_init PROC
;;;300    
;;;301    uint32_t ble_dfu_buttonless_init(const ble_dfu_buttonless_init_t * p_dfu_init)
000000  b530              PUSH     {r4,r5,lr}
;;;302    {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;303        uint32_t        err_code;
;;;304        ble_uuid_t      service_uuid;
;;;305        ble_uuid128_t   nordic_base_uuid = BLE_NORDIC_VENDOR_BASE_UUID;
000006  4b22              LDR      r3,|L2.144|
000008  cb0f              LDM      r3,{r0-r3}
00000a  e88d000f          STM      sp,{r0-r3}
;;;306    
;;;307        VERIFY_PARAM_NOT_NULL(p_dfu_init);
00000e  bf00              NOP      
000010  b915              CBNZ     r5,|L2.24|
000012  200e              MOVS     r0,#0xe
                  |L2.20|
;;;308    
;;;309        // Initialize the service structure.
;;;310        m_dfu.conn_handle                  = BLE_CONN_HANDLE_INVALID;
;;;311        m_dfu.evt_handler                  = p_dfu_init->evt_handler;
;;;312        m_dfu.is_waiting_for_reset         = false;
;;;313        m_dfu.is_ctrlpt_indication_enabled = false;
;;;314    
;;;315        err_code = ble_dfu_buttonless_backend_init(&m_dfu);
;;;316        VERIFY_SUCCESS(err_code);
;;;317        
;;;318        BLE_UUID_BLE_ASSIGN(service_uuid, BLE_DFU_SERVICE_UUID);
;;;319    
;;;320        // Add the DFU service declaration.
;;;321        err_code = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY,
;;;322                                            &service_uuid,
;;;323                                            &(m_dfu.service_handle));
;;;324    
;;;325        VERIFY_SUCCESS(err_code);
;;;326    
;;;327        // Add vendor specific base UUID to use with the Buttonless DFU characteristic.
;;;328        err_code = sd_ble_uuid_vs_add(&nordic_base_uuid, &m_dfu.uuid_type);
;;;329        VERIFY_SUCCESS(err_code);
;;;330    
;;;331        // Add the Buttonless DFU Characteristic (with bonds/without bonds).
;;;332        err_code = ble_dfu_buttonless_char_add(&m_dfu);
;;;333        VERIFY_SUCCESS(err_code);
;;;334    
;;;335        return NRF_SUCCESS;
;;;336    }
000014  b005              ADD      sp,sp,#0x14
000016  bd30              POP      {r4,r5,pc}
                  |L2.24|
000018  bf00              NOP                            ;307
00001a  f64f70ff          MOV      r0,#0xffff            ;310
00001e  491d              LDR      r1,|L2.148|
000020  8088              STRH     r0,[r1,#4]            ;310
000022  6828              LDR      r0,[r5,#0]            ;311
000024  6148              STR      r0,[r1,#0x14]         ;311  ; m_dfu
000026  2000              MOVS     r0,#0                 ;312
000028  7648              STRB     r0,[r1,#0x19]         ;312
00002a  7608              STRB     r0,[r1,#0x18]         ;313
00002c  4608              MOV      r0,r1                 ;315
00002e  f7fffffe          BL       ble_dfu_buttonless_backend_init
000032  4604              MOV      r4,r0                 ;315
000034  bf00              NOP                            ;316
000036  b10c              CBZ      r4,|L2.60|
000038  4620              MOV      r0,r4                 ;316
00003a  e7eb              B        |L2.20|
                  |L2.60|
00003c  bf00              NOP                            ;316
00003e  bf00              NOP                            ;318
000040  2001              MOVS     r0,#1                 ;318
000042  f88d0012          STRB     r0,[sp,#0x12]         ;318
000046  f64f6059          MOV      r0,#0xfe59            ;318
00004a  f8ad0010          STRH     r0,[sp,#0x10]         ;318
00004e  bf00              NOP                            ;318
000050  4a10              LDR      r2,|L2.148|
000052  1c92              ADDS     r2,r2,#2              ;321
000054  a904              ADD      r1,sp,#0x10           ;321
000056  2001              MOVS     r0,#1                 ;321
000058  dfa0              SVC      #0xa0                 ;321
00005a  4604              MOV      r4,r0                 ;321
00005c  bf00              NOP                            ;325
00005e  b10c              CBZ      r4,|L2.100|
000060  4620              MOV      r0,r4                 ;325
000062  e7d7              B        |L2.20|
                  |L2.100|
000064  bf00              NOP                            ;325
000066  490b              LDR      r1,|L2.148|
000068  4668              MOV      r0,sp                 ;328
00006a  df62              SVC      #0x62                 ;328
00006c  4604              MOV      r4,r0                 ;328
00006e  bf00              NOP                            ;329
000070  b10c              CBZ      r4,|L2.118|
000072  4620              MOV      r0,r4                 ;329
000074  e7ce              B        |L2.20|
                  |L2.118|
000076  bf00              NOP                            ;329
000078  4806              LDR      r0,|L2.148|
00007a  f7fffffe          BL       ble_dfu_buttonless_char_add
00007e  4604              MOV      r4,r0                 ;332
000080  bf00              NOP                            ;333
000082  b10c              CBZ      r4,|L2.136|
000084  4620              MOV      r0,r4                 ;333
000086  e7c5              B        |L2.20|
                  |L2.136|
000088  bf00              NOP                            ;333
00008a  2000              MOVS     r0,#0                 ;335
00008c  e7c2              B        |L2.20|
                          ENDP

00008e  0000              DCW      0x0000
                  |L2.144|
                          DCD      ||.constdata||
                  |L2.148|
                          DCD      m_dfu

                          AREA ||i.ble_dfu_buttonless_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_dfu_buttonless_on_ble_evt PROC
;;;212    
;;;213    void ble_dfu_buttonless_on_ble_evt(ble_evt_t const * p_ble_evt, void * p_context)
000000  b570              PUSH     {r4-r6,lr}
;;;214    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;215        VERIFY_PARAM_NOT_NULL_VOID(p_ble_evt);
000006  bf00              NOP      
000008  b904              CBNZ     r4,|L3.12|
                  |L3.10|
;;;216    
;;;217        switch (p_ble_evt->header.evt_id)
;;;218        {
;;;219            case BLE_GAP_EVT_CONNECTED:
;;;220                on_connect(p_ble_evt);
;;;221                break;
;;;222    
;;;223            case BLE_GAP_EVT_DISCONNECTED:
;;;224                on_disconnect(p_ble_evt);
;;;225                break;
;;;226    
;;;227            case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;228                on_rw_authorize_req(p_ble_evt);
;;;229                break;
;;;230    
;;;231            case BLE_GATTS_EVT_WRITE:
;;;232                on_write(p_ble_evt);
;;;233                break;
;;;234    
;;;235            case BLE_GATTS_EVT_HVC:
;;;236                on_hvc(p_ble_evt);
;;;237                break;
;;;238    
;;;239            default:
;;;240                // no implementation
;;;241                break;
;;;242        }
;;;243    }
00000a  bd70              POP      {r4-r6,pc}
                  |L3.12|
00000c  bf00              NOP                            ;215
00000e  8820              LDRH     r0,[r4,#0]            ;217
000010  2850              CMP      r0,#0x50              ;217
000012  d016              BEQ      |L3.66|
000014  dc04              BGT      |L3.32|
000016  2810              CMP      r0,#0x10              ;217
000018  d007              BEQ      |L3.42|
00001a  2811              CMP      r0,#0x11              ;217
00001c  d119              BNE      |L3.82|
00001e  e008              B        |L3.50|
                  |L3.32|
000020  2851              CMP      r0,#0x51              ;217
000022  d00a              BEQ      |L3.58|
000024  2853              CMP      r0,#0x53              ;217
000026  d114              BNE      |L3.82|
000028  e00f              B        |L3.74|
                  |L3.42|
00002a  4620              MOV      r0,r4                 ;220
00002c  f7fffffe          BL       on_connect
000030  e010              B        |L3.84|
                  |L3.50|
000032  4620              MOV      r0,r4                 ;224
000034  f7fffffe          BL       on_disconnect
000038  e00c              B        |L3.84|
                  |L3.58|
00003a  4620              MOV      r0,r4                 ;228
00003c  f7fffffe          BL       on_rw_authorize_req
000040  e008              B        |L3.84|
                  |L3.66|
000042  4620              MOV      r0,r4                 ;232
000044  f7fffffe          BL       on_write
000048  e004              B        |L3.84|
                  |L3.74|
00004a  4620              MOV      r0,r4                 ;236
00004c  f7fffffe          BL       on_hvc
000050  e000              B        |L3.84|
                  |L3.82|
000052  bf00              NOP                            ;241
                  |L3.84|
000054  bf00              NOP                            ;221
000056  bf00              NOP      
000058  e7d7              B        |L3.10|
;;;244    
                          ENDP


                          AREA ||i.ble_dfu_buttonless_resp_send||, CODE, READONLY, ALIGN=2

                  ble_dfu_buttonless_resp_send PROC
;;;245    
;;;246    uint32_t ble_dfu_buttonless_resp_send(ble_dfu_buttonless_op_code_t op_code, ble_dfu_buttonless_rsp_code_t rsp_code)
000000  b5f0              PUSH     {r4-r7,lr}
;;;247    {
000002  b087              SUB      sp,sp,#0x1c
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;248        // Send notification
;;;249        uint32_t                err_code;
;;;250        const uint16_t          len = 3;
000008  2703              MOVS     r7,#3
;;;251        uint16_t                hvx_len;
;;;252        uint8_t                 hvx_data[MAX_CTRL_POINT_RESP_PARAM_LEN];
;;;253        ble_gatts_hvx_params_t  hvx_params;
;;;254    
;;;255        memset(&hvx_params, 0, sizeof(hvx_params));
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
000012  9004              STR      r0,[sp,#0x10]
;;;256    
;;;257        hvx_len = len;
000014  2003              MOVS     r0,#3
000016  9006              STR      r0,[sp,#0x18]
;;;258        hvx_data[0] = DFU_OP_RESPONSE_CODE;
000018  2020              MOVS     r0,#0x20
00001a  f88d0014          STRB     r0,[sp,#0x14]
;;;259        hvx_data[1] = (uint8_t)op_code;
00001e  f88d4015          STRB     r4,[sp,#0x15]
;;;260        hvx_data[2] = (uint8_t)rsp_code;
000022  b2e8              UXTB     r0,r5
000024  f88d0016          STRB     r0,[sp,#0x16]
;;;261    
;;;262        hvx_params.handle   = m_dfu.control_point_char.value_handle;
000028  480d              LDR      r0,|L4.96|
00002a  88c0              LDRH     r0,[r0,#6]  ; m_dfu
00002c  f8ad0004          STRH     r0,[sp,#4]
;;;263        hvx_params.type     = BLE_GATT_HVX_INDICATION;
000030  2002              MOVS     r0,#2
000032  f88d0006          STRB     r0,[sp,#6]
;;;264        hvx_params.offset   = 0;
000036  2000              MOVS     r0,#0
000038  f8ad0008          STRH     r0,[sp,#8]
;;;265        hvx_params.p_len    = &hvx_len;
00003c  a806              ADD      r0,sp,#0x18
00003e  9003              STR      r0,[sp,#0xc]
;;;266        hvx_params.p_data   = hvx_data;
000040  a805              ADD      r0,sp,#0x14
000042  9004              STR      r0,[sp,#0x10]
;;;267    
;;;268    
;;;269        err_code = sd_ble_gatts_hvx(m_dfu.conn_handle, &hvx_params);
000044  4906              LDR      r1,|L4.96|
000046  8888              LDRH     r0,[r1,#4]  ; m_dfu
000048  a901              ADD      r1,sp,#4
00004a  dfa6              SVC      #0xa6
00004c  4606              MOV      r6,r0
;;;270        if ((err_code == NRF_SUCCESS) && (hvx_len != len))
00004e  b926              CBNZ     r6,|L4.90|
000050  f8bd0018          LDRH     r0,[sp,#0x18]
000054  2803              CMP      r0,#3
000056  d000              BEQ      |L4.90|
;;;271        {
;;;272            err_code = NRF_ERROR_DATA_SIZE;
000058  260c              MOVS     r6,#0xc
                  |L4.90|
;;;273        }
;;;274    
;;;275        return err_code;
00005a  4630              MOV      r0,r6
;;;276    }
00005c  b007              ADD      sp,sp,#0x1c
00005e  bdf0              POP      {r4-r7,pc}
;;;277    
                          ENDP

                  |L4.96|
                          DCD      m_dfu

                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=2

                  on_connect PROC
;;;141     */
;;;142    static void on_connect(ble_evt_t const * p_ble_evt)
000000  8881              LDRH     r1,[r0,#4]
;;;143    {
;;;144        m_dfu.conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000002  4a01              LDR      r2,|L5.8|
000004  8091              STRH     r1,[r2,#4]
;;;145    }
000006  4770              BX       lr
;;;146    
                          ENDP

                  |L5.8|
                          DCD      m_dfu

                          AREA ||i.on_ctrlpt_write||, CODE, READONLY, ALIGN=2

                  on_ctrlpt_write PROC
;;;72      */
;;;73     static void on_ctrlpt_write(ble_gatts_evt_write_t const * p_evt_write)
000000  b57f              PUSH     {r0-r6,lr}
;;;74     {
000002  4605              MOV      r5,r0
;;;75         uint32_t      err_code;
;;;76     
;;;77     
;;;78         ble_gatts_rw_authorize_reply_params_t write_authorize_reply;
;;;79         memset(&write_authorize_reply, 0, sizeof(write_authorize_reply));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
00000a  9002              STR      r0,[sp,#8]
00000c  9003              STR      r0,[sp,#0xc]
;;;80     
;;;81         write_authorize_reply.type   = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
00000e  2002              MOVS     r0,#2
000010  f88d0000          STRB     r0,[sp,#0]
;;;82     
;;;83         if (m_dfu.is_ctrlpt_indication_enabled)
000014  480f              LDR      r0,|L6.84|
000016  7e00              LDRB     r0,[r0,#0x18]  ; m_dfu
000018  b130              CBZ      r0,|L6.40|
;;;84         {
;;;85             write_authorize_reply.params.write.update      = 1;
00001a  2101              MOVS     r1,#1
00001c  f88d1006          STRB     r1,[sp,#6]
;;;86             write_authorize_reply.params.write.gatt_status = BLE_GATT_STATUS_SUCCESS;
000020  2000              MOVS     r0,#0
000022  f8ad0004          STRH     r0,[sp,#4]
000026  e003              B        |L6.48|
                  |L6.40|
;;;87         }
;;;88         else
;;;89         {
;;;90             write_authorize_reply.params.write.gatt_status = DFU_RSP_CCCD_CONFIG_IMPROPER;
000028  f24010fd          MOV      r0,#0x1fd
00002c  f8ad0004          STRH     r0,[sp,#4]
                  |L6.48|
;;;91         }
;;;92     
;;;93         // Authorize the write request
;;;94         do {
000030  bf00              NOP      
                  |L6.50|
;;;95             err_code = sd_ble_gatts_rw_authorize_reply(m_dfu.conn_handle, &write_authorize_reply);
000032  4908              LDR      r1,|L6.84|
000034  8888              LDRH     r0,[r1,#4]  ; m_dfu
000036  4669              MOV      r1,sp
000038  dfa8              SVC      #0xa8
00003a  4604              MOV      r4,r0
;;;96         } while (err_code == NRF_ERROR_BUSY);
00003c  2c11              CMP      r4,#0x11
00003e  d0f8              BEQ      |L6.50|
;;;97     
;;;98     
;;;99         if (write_authorize_reply.params.write.gatt_status != BLE_GATT_STATUS_SUCCESS)
000040  f8bd0004          LDRH     r0,[sp,#4]
000044  b100              CBZ      r0,|L6.72|
                  |L6.70|
;;;100        {
;;;101            return;
;;;102        }
;;;103    
;;;104        // Forward the write event to the Buttonless DFU module.
;;;105        ble_dfu_buttonless_on_ctrl_pt_write(p_evt_write);
;;;106    }
000046  bd7f              POP      {r0-r6,pc}
                  |L6.72|
000048  4628              MOV      r0,r5                 ;105
00004a  f7fffffe          BL       ble_dfu_buttonless_on_ctrl_pt_write
00004e  bf00              NOP      
000050  e7f9              B        |L6.70|
;;;107    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      m_dfu

                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=2

                  on_disconnect PROC
;;;151     */
;;;152    static void on_disconnect(ble_evt_t const * p_ble_evt)
000000  4905              LDR      r1,|L7.24|
;;;153    {
;;;154        if (m_dfu.conn_handle != p_ble_evt->evt.gatts_evt.conn_handle)
000002  8889              LDRH     r1,[r1,#4]  ; m_dfu
000004  8882              LDRH     r2,[r0,#4]
000006  4291              CMP      r1,r2
000008  d000              BEQ      |L7.12|
                  |L7.10|
;;;155        {
;;;156            return;
;;;157        }
;;;158    
;;;159        m_dfu.conn_handle = BLE_CONN_HANDLE_INVALID;
;;;160    }
00000a  4770              BX       lr
                  |L7.12|
00000c  f64f71ff          MOV      r1,#0xffff            ;159
000010  4a01              LDR      r2,|L7.24|
000012  8091              STRH     r1,[r2,#4]            ;159
000014  bf00              NOP      
000016  e7f8              B        |L7.10|
;;;161    
                          ENDP

                  |L7.24|
                          DCD      m_dfu

                          AREA ||i.on_hvc||, CODE, READONLY, ALIGN=2

                  on_hvc PROC
;;;192     */
;;;193    static void on_hvc(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;194    {
000002  4605              MOV      r5,r0
;;;195        uint32_t err_code;
;;;196        ble_gatts_evt_hvc_t const * p_hvc = &p_ble_evt->evt.gatts_evt.params.hvc;
000004  1dae              ADDS     r6,r5,#6
;;;197    
;;;198        if (p_hvc->handle == m_dfu.control_point_char.value_handle)
000006  8830              LDRH     r0,[r6,#0]
000008  4907              LDR      r1,|L8.40|
00000a  88c9              LDRH     r1,[r1,#6]  ; m_dfu
00000c  4288              CMP      r0,r1
00000e  d10a              BNE      |L8.38|
;;;199        {
;;;200            // Enter bootloader if we were waiting for reset after hvc indication confimation.
;;;201            if (m_dfu.is_waiting_for_reset)
000010  4805              LDR      r0,|L8.40|
000012  7e40              LDRB     r0,[r0,#0x19]  ; m_dfu
000014  b138              CBZ      r0,|L8.38|
;;;202            {
;;;203                err_code = ble_dfu_buttonless_bootloader_start_prepare();
000016  f7fffffe          BL       ble_dfu_buttonless_bootloader_start_prepare
00001a  4604              MOV      r4,r0
;;;204                if (err_code != NRF_SUCCESS)
00001c  b11c              CBZ      r4,|L8.38|
;;;205                {
;;;206                    m_dfu.evt_handler(BLE_DFU_EVT_BOOTLOADER_ENTER_FAILED);
00001e  4802              LDR      r0,|L8.40|
000020  6941              LDR      r1,[r0,#0x14]  ; m_dfu
000022  2002              MOVS     r0,#2
000024  4788              BLX      r1
                  |L8.38|
;;;207                }
;;;208            }
;;;209        }
;;;210    }
000026  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

                  |L8.40|
                          DCD      m_dfu

                          AREA ||i.on_rw_authorize_req||, CODE, READONLY, ALIGN=2

                  on_rw_authorize_req PROC
;;;114     */
;;;115    static void on_rw_authorize_req(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;116    {
000002  4605              MOV      r5,r0
;;;117        if (p_ble_evt->evt.gatts_evt.conn_handle != m_dfu.conn_handle)
000004  88a8              LDRH     r0,[r5,#4]
000006  490e              LDR      r1,|L9.64|
000008  8889              LDRH     r1,[r1,#4]  ; m_dfu
00000a  4288              CMP      r0,r1
00000c  d000              BEQ      |L9.16|
                  |L9.14|
;;;118        {
;;;119            return;
;;;120        }
;;;121    
;;;122        const ble_gatts_evt_rw_authorize_request_t * p_auth_req =
;;;123            &p_ble_evt->evt.gatts_evt.params.authorize_request;
;;;124    
;;;125        if (
;;;126            (p_auth_req->type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)                            &&
;;;127            (p_auth_req->request.write.handle == m_dfu.control_point_char.value_handle)     &&
;;;128            (p_auth_req->request.write.op != BLE_GATTS_OP_PREP_WRITE_REQ)                   &&
;;;129            (p_auth_req->request.write.op != BLE_GATTS_OP_EXEC_WRITE_REQ_NOW)               &&
;;;130            (p_auth_req->request.write.op != BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL)
;;;131           )
;;;132        {
;;;133            on_ctrlpt_write(&p_auth_req->request.write);
;;;134        }
;;;135    }
00000e  bd70              POP      {r4-r6,pc}
                  |L9.16|
000010  1dac              ADDS     r4,r5,#6              ;122
000012  7820              LDRB     r0,[r4,#0]            ;125
000014  2802              CMP      r0,#2                 ;125
000016  d110              BNE      |L9.58|
000018  8860              LDRH     r0,[r4,#2]            ;127
00001a  4909              LDR      r1,|L9.64|
00001c  88c9              LDRH     r1,[r1,#6]            ;127  ; m_dfu
00001e  4288              CMP      r0,r1                 ;127
000020  d10b              BNE      |L9.58|
000022  7a20              LDRB     r0,[r4,#8]            ;128
000024  2804              CMP      r0,#4                 ;128
000026  d008              BEQ      |L9.58|
000028  7a20              LDRB     r0,[r4,#8]            ;129
00002a  2806              CMP      r0,#6                 ;129
00002c  d005              BEQ      |L9.58|
00002e  7a20              LDRB     r0,[r4,#8]            ;130
000030  2805              CMP      r0,#5                 ;130
000032  d002              BEQ      |L9.58|
000034  1ca0              ADDS     r0,r4,#2              ;133
000036  f7fffffe          BL       on_ctrlpt_write
                  |L9.58|
00003a  bf00              NOP      
00003c  e7e7              B        |L9.14|
;;;136    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      m_dfu

                          AREA ||i.on_write||, CODE, READONLY, ALIGN=2

                  on_write PROC
;;;166     */
;;;167    static void on_write(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;168    {
000002  4605              MOV      r5,r0
;;;169        const ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
000004  1dac              ADDS     r4,r5,#6
;;;170    
;;;171        if (p_evt_write->handle != m_dfu.control_point_char.cccd_handle)
000006  8821              LDRH     r1,[r4,#0]
000008  480c              LDR      r0,|L10.60|
00000a  8940              LDRH     r0,[r0,#0xa]
00000c  4281              CMP      r1,r0
00000e  d000              BEQ      |L10.18|
                  |L10.16|
;;;172        {
;;;173            return;
;;;174        }
;;;175    
;;;176        if (p_evt_write->len == BLE_CCCD_VALUE_LEN)
;;;177        {
;;;178            // CCCD written, update indications state
;;;179            m_dfu.is_ctrlpt_indication_enabled = ble_srv_is_indication_enabled(p_evt_write->data);
;;;180    
;;;181             NRF_LOG_INFO("Received indication state %d",
;;;182                          m_dfu.is_ctrlpt_indication_enabled);
;;;183        }
;;;184    }
000010  bd70              POP      {r4-r6,pc}
                  |L10.18|
000012  8960              LDRH     r0,[r4,#0xa]          ;176
000014  2802              CMP      r0,#2                 ;176
000016  d10e              BNE      |L10.54|
000018  f104000c          ADD      r0,r4,#0xc            ;179
00001c  f7fffffe          BL       ble_srv_is_indication_enabled
000020  4906              LDR      r1,|L10.60|
000022  7608              STRB     r0,[r1,#0x18]         ;179
000024  7e0a              LDRB     r2,[r1,#0x18]         ;181  ; m_dfu
000026  4906              LDR      r1,|L10.64|
000028  8809              LDRH     r1,[r1,#0]            ;181  ; m_nrf_log_app_logs_data_dynamic
00002a  2303              MOVS     r3,#3                 ;181
00002c  ea434001          ORR      r0,r3,r1,LSL #16      ;181
000030  a104              ADR      r1,|L10.68|
000032  f7fffffe          BL       nrf_log_frontend_std_1
                  |L10.54|
000036  bf00              NOP      
000038  e7ea              B        |L10.16|
;;;185    
                          ENDP

00003a  0000              DCW      0x0000
                  |L10.60|
                          DCD      m_dfu
                  |L10.64|
                          DCD      m_nrf_log_app_logs_data_dynamic
                  |L10.68|
000044  52656365          DCB      "Received indication state %d",0
000048  69766564
00004c  20696e64
000050  69636174
000054  696f6e20
000058  73746174
00005c  65202564
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_dfu
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  50eada30          DCB      0x50,0xea,0xda,0x30
000004  8883b89f          DCB      0x88,0x83,0xb8,0x9f
000008  604f15f3          DCB      0x60,0x4f,0x15,0xf3
00000c  0000c98e          DCB      0x00,0x00,0xc9,0x8e

                          AREA sdh_ble_observers2, DATA, READONLY, ALIGN=2

                  m_dfus_obs
                  ||__tagsym$$used||
                          DCD      ble_dfu_buttonless_on_ble_evt
                          DCD      m_dfu

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_services\\ble_dfu\\ble_dfu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dfu_c_a008ac3a____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_ble_dfu_c_a008ac3a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dfu_c_a008ac3a____REVSH|
#line 402
|__asm___9_ble_dfu_c_a008ac3a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_ble_dfu_c_a008ac3a____RRX|
#line 587
|__asm___9_ble_dfu_c_a008ac3a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
