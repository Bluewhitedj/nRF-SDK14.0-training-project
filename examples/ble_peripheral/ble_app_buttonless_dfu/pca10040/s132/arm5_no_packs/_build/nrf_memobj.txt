; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_memobj.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_memobj.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_memobj.crf ..\..\..\..\..\..\components\libraries\experimental_memobj\nrf_memobj.c]
                          THUMB

                          AREA ||i.memobj_op||, CODE, READONLY, ALIGN=1

                  memobj_op PROC
;;;169    
;;;170    static void memobj_op(nrf_memobj_t * p_obj,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;171                          void * p_data,
;;;172                          uint32_t len,
;;;173                          uint32_t offset,
;;;174                          bool read)
;;;175    {
000004  4607              MOV      r7,r0
000006  468b              MOV      r11,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;176    
;;;177        memobj_head_t * p_head  = (memobj_head_t *)p_obj;
00000c  9703              STR      r7,[sp,#0xc]
;;;178        uint32_t space_in_chunk = p_head->head_header.data.fields.chunk_size;
00000e  9f03              LDR      r7,[sp,#0xc]
000010  88fd              LDRH     r5,[r7,#6]
;;;179        memobj_elem_t * p_curr_chunk = (memobj_elem_t *)p_obj;
000012  46b9              MOV      r9,r7
;;;180        uint32_t chunk_idx = (offset + sizeof(memobj_head_header_fields_t))/space_in_chunk;
000014  f1080004          ADD      r0,r8,#4
000018  fbb0f0f5          UDIV     r0,r0,r5
00001c  9002              STR      r0,[sp,#8]
;;;181        uint32_t chunk_offset = (offset + sizeof(memobj_head_header_fields_t)) % space_in_chunk;
00001e  f1080004          ADD      r0,r8,#4
000022  fbb0f1f5          UDIV     r1,r0,r5
000026  fb050011          MLS      r0,r5,r1,r0
00002a  9001              STR      r0,[sp,#4]
;;;182    
;;;183        uint8_t chunks_expected = CEIL_DIV((offset + sizeof(memobj_head_header_fields_t) + len),
00002c  f1080004          ADD      r0,r8,#4
000030  4420              ADD      r0,r0,r4
000032  4428              ADD      r0,r0,r5
000034  1e40              SUBS     r0,r0,#1
000036  fbb0f0f5          UDIV     r0,r0,r5
00003a  b2c0              UXTB     r0,r0
00003c  9000              STR      r0,[sp,#0]
;;;184                                           space_in_chunk);
;;;185        UNUSED_VARIABLE(chunks_expected);
;;;186        ASSERT(p_head->head_header.data.fields.chunk_cnt >= chunks_expected);
;;;187    
;;;188        while (chunk_idx > 0)
00003e  e004              B        |L1.74|
                  |L1.64|
;;;189        {
;;;190            p_curr_chunk = p_curr_chunk->header.p_next;
000040  f8d99000          LDR      r9,[r9,#0]
;;;191            chunk_idx--;
000044  9802              LDR      r0,[sp,#8]
000046  1e40              SUBS     r0,r0,#1
000048  9002              STR      r0,[sp,#8]
                  |L1.74|
00004a  9802              LDR      r0,[sp,#8]            ;188
00004c  2800              CMP      r0,#0                 ;188
00004e  d1f7              BNE      |L1.64|
;;;192        }
;;;193    
;;;194        uint32_t src_offset  = 0;
000050  4682              MOV      r10,r0
;;;195        uint32_t curr_cpy_size = space_in_chunk-chunk_offset;
000052  9801              LDR      r0,[sp,#4]
000054  1a2e              SUBS     r6,r5,r0
;;;196        curr_cpy_size = curr_cpy_size > len ? len : curr_cpy_size;
000056  42a6              CMP      r6,r4
000058  d901              BLS      |L1.94|
00005a  4620              MOV      r0,r4
00005c  e000              B        |L1.96|
                  |L1.94|
00005e  4630              MOV      r0,r6
                  |L1.96|
000060  4606              MOV      r6,r0
;;;197    
;;;198        while (len)
000062  e020              B        |L1.166|
                  |L1.100|
;;;199        {
;;;200            if (read)
000064  980e              LDR      r0,[sp,#0x38]
000066  b148              CBZ      r0,|L1.124|
;;;201            {
;;;202                memcpy(&((uint8_t *)p_data)[src_offset], &p_curr_chunk->data[chunk_offset], curr_cpy_size);
000068  f1090204          ADD      r2,r9,#4
00006c  9b01              LDR      r3,[sp,#4]
00006e  18d1              ADDS     r1,r2,r3
000070  eb0b000a          ADD      r0,r11,r10
000074  4632              MOV      r2,r6
000076  f7fffffe          BL       __aeabi_memcpy
00007a  e008              B        |L1.142|
                  |L1.124|
;;;203            }
;;;204            else
;;;205            {
;;;206                memcpy(&p_curr_chunk->data[chunk_offset], &((uint8_t *)p_data)[src_offset], curr_cpy_size);
00007c  eb0b010a          ADD      r1,r11,r10
000080  f1090204          ADD      r2,r9,#4
000084  9b01              LDR      r3,[sp,#4]
000086  18d0              ADDS     r0,r2,r3
000088  4632              MOV      r2,r6
00008a  f7fffffe          BL       __aeabi_memcpy
                  |L1.142|
;;;207            }
;;;208            chunk_offset = 0;
00008e  2000              MOVS     r0,#0
000090  9001              STR      r0,[sp,#4]
;;;209            p_curr_chunk = p_curr_chunk->header.p_next;
000092  f8d99000          LDR      r9,[r9,#0]
;;;210            len -= curr_cpy_size;
000096  1ba4              SUBS     r4,r4,r6
;;;211            src_offset += curr_cpy_size;
000098  44b2              ADD      r10,r10,r6
;;;212            curr_cpy_size = (space_in_chunk > len) ? len : space_in_chunk;
00009a  42a5              CMP      r5,r4
00009c  d901              BLS      |L1.162|
00009e  4620              MOV      r0,r4
0000a0  e000              B        |L1.164|
                  |L1.162|
0000a2  4628              MOV      r0,r5
                  |L1.164|
0000a4  4606              MOV      r6,r0
                  |L1.166|
0000a6  2c00              CMP      r4,#0                 ;198
0000a8  d1dc              BNE      |L1.100|
;;;213        }
;;;214    }
0000aa  e8bd9fff          POP      {r0-r12,pc}
;;;215    
                          ENDP


                          AREA ||i.nrf_memobj_alloc||, CODE, READONLY, ALIGN=1

                  nrf_memobj_alloc PROC
;;;87     
;;;88     nrf_memobj_t * nrf_memobj_alloc(nrf_memobj_pool_t const * p_pool,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;89                                     size_t size)
;;;90     {
000004  4607              MOV      r7,r0
000006  468a              MOV      r10,r1
;;;91         uint32_t bsize = (uint32_t)NRF_BALLOC_ELEMENT_SIZE((nrf_balloc_t const *)p_pool) - sizeof(memobj_header_t);
000008  8a38              LDRH     r0,[r7,#0x10]
00000a  f1a00804          SUB      r8,r0,#4
;;;92         uint8_t num_of_chunks = (uint8_t)CEIL_DIV(size + sizeof(memobj_head_header_t), bsize);
00000e  f10a0004          ADD      r0,r10,#4
000012  4440              ADD      r0,r0,r8
000014  1e40              SUBS     r0,r0,#1
000016  fbb0f0f8          UDIV     r0,r0,r8
00001a  b2c0              UXTB     r0,r0
00001c  9000              STR      r0,[sp,#0]
;;;93     
;;;94         memobj_head_t * p_head = nrf_balloc_alloc((nrf_balloc_t const *)p_pool);
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       nrf_balloc_alloc
000024  4604              MOV      r4,r0
;;;95         if (p_head == NULL)
000026  b914              CBNZ     r4,|L2.46|
;;;96         {
;;;97             return NULL;
000028  2000              MOVS     r0,#0
                  |L2.42|
;;;98         }
;;;99         p_head->head_header.data.fields.user_cnt = 0;
;;;100        p_head->head_header.data.fields.chunk_cnt = 1;
;;;101        p_head->head_header.data.fields.chunk_size = bsize;
;;;102    
;;;103        memobj_header_t * p_prev = (memobj_header_t *)p_head;
;;;104        memobj_header_t * p_curr;
;;;105        uint32_t i;
;;;106        uint32_t chunk_less1 = (uint32_t)num_of_chunks - 1;
;;;107    
;;;108        p_prev->p_next =  (memobj_elem_t *)p_pool;
;;;109        for (i = 0; i < chunk_less1; i++)
;;;110        {
;;;111            p_curr = (memobj_header_t *)nrf_balloc_alloc((nrf_balloc_t const *)p_pool);
;;;112            if (p_curr)
;;;113            {
;;;114                (p_head->head_header.data.fields.chunk_cnt)++;
;;;115                p_prev->p_next = (memobj_elem_t *)p_curr;
;;;116                p_curr->p_next = (memobj_elem_t *)p_pool;
;;;117                p_prev = p_curr;
;;;118            }
;;;119            else
;;;120            {
;;;121                //Couldn't allocate all requested buffers
;;;122                nrf_memobj_free((nrf_memobj_t *)p_head);
;;;123                return NULL;
;;;124            }
;;;125        }
;;;126        return (nrf_memobj_t *)p_head;
;;;127    }
00002a  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.46|
00002e  2000              MOVS     r0,#0                 ;99
000030  7120              STRB     r0,[r4,#4]            ;99
000032  2101              MOVS     r1,#1                 ;100
000034  7161              STRB     r1,[r4,#5]            ;100
000036  f8a48006          STRH     r8,[r4,#6]            ;101
00003a  4625              MOV      r5,r4                 ;103
00003c  9800              LDR      r0,[sp,#0]            ;106
00003e  f1a00b01          SUB      r11,r0,#1             ;106
000042  462c              MOV      r4,r5                 ;108
000044  602f              STR      r7,[r5,#0]            ;108
000046  f04f0900          MOV      r9,#0                 ;109
00004a  e012              B        |L2.114|
                  |L2.76|
00004c  4638              MOV      r0,r7                 ;111
00004e  f7fffffe          BL       nrf_balloc_alloc
000052  4606              MOV      r6,r0                 ;111
000054  b136              CBZ      r6,|L2.100|
000056  7960              LDRB     r0,[r4,#5]            ;114
000058  1c40              ADDS     r0,r0,#1              ;114
00005a  7160              STRB     r0,[r4,#5]            ;114
00005c  602e              STR      r6,[r5,#0]            ;115
00005e  6037              STR      r7,[r6,#0]            ;116
000060  4635              MOV      r5,r6                 ;117
000062  e004              B        |L2.110|
                  |L2.100|
000064  4620              MOV      r0,r4                 ;122
000066  f7fffffe          BL       nrf_memobj_free
00006a  2000              MOVS     r0,#0                 ;123
00006c  e7dd              B        |L2.42|
                  |L2.110|
00006e  f1090901          ADD      r9,r9,#1              ;109
                  |L2.114|
000072  45d9              CMP      r9,r11                ;109
000074  d3ea              BCC      |L2.76|
000076  4620              MOV      r0,r4                 ;126
000078  e7d7              B        |L2.42|
;;;128    
                          ENDP


                          AREA ||i.nrf_memobj_free||, CODE, READONLY, ALIGN=1

                  nrf_memobj_free PROC
;;;128    
;;;129    void nrf_memobj_free(nrf_memobj_t * p_obj)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;130    {
000004  4604              MOV      r4,r0
;;;131        memobj_head_t * p_head = (memobj_head_t *)p_obj;
000006  4627              MOV      r7,r4
;;;132        uint8_t chunk_cnt = p_head->head_header.data.fields.chunk_cnt;
000008  f8978005          LDRB     r8,[r7,#5]
;;;133        uint32_t i;
;;;134        memobj_header_t * p_curr = (memobj_header_t *)p_obj;
00000c  4626              MOV      r6,r4
;;;135        memobj_header_t * p_next;
;;;136        uint32_t chunk_less1 = (uint32_t)chunk_cnt - 1;
00000e  f1a80b01          SUB      r11,r8,#1
;;;137    
;;;138        for (i = 0; i < chunk_less1; i++)
000012  2500              MOVS     r5,#0
000014  e001              B        |L3.26|
                  |L3.22|
;;;139        {
;;;140            p_curr = (memobj_header_t *)p_curr->p_next;
000016  6836              LDR      r6,[r6,#0]
000018  1c6d              ADDS     r5,r5,#1              ;138
                  |L3.26|
00001a  455d              CMP      r5,r11                ;138
00001c  d3fb              BCC      |L3.22|
;;;141        }
;;;142        nrf_balloc_t const * p_pool2 = (nrf_balloc_t const *)p_curr->p_next;
00001e  f8d6a000          LDR      r10,[r6,#0]
;;;143    
;;;144        p_curr = (memobj_header_t *)p_obj;
000022  4626              MOV      r6,r4
;;;145        for (i = 0; i < chunk_cnt; i++)
000024  2500              MOVS     r5,#0
000026  e007              B        |L3.56|
                  |L3.40|
;;;146        {
;;;147            p_next = (memobj_header_t *)p_curr->p_next;
000028  f8d69000          LDR      r9,[r6,#0]
;;;148            nrf_balloc_free(p_pool2, p_curr);
00002c  4631              MOV      r1,r6
00002e  4650              MOV      r0,r10
000030  f7fffffe          BL       nrf_balloc_free
;;;149            p_curr = p_next;
000034  464e              MOV      r6,r9
000036  1c6d              ADDS     r5,r5,#1              ;145
                  |L3.56|
000038  4545              CMP      r5,r8                 ;145
00003a  d3f5              BCC      |L3.40|
;;;150        }
;;;151    }
00003c  e8bd9ff0          POP      {r4-r12,pc}
;;;152    
                          ENDP


                          AREA ||i.nrf_memobj_get||, CODE, READONLY, ALIGN=1

                  nrf_memobj_get PROC
;;;152    
;;;153    void nrf_memobj_get(nrf_memobj_t const * p_obj)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;154    {
000004  4604              MOV      r4,r0
;;;155        memobj_head_t * p_head = (memobj_head_t *)p_obj;
000006  4627              MOV      r7,r4
;;;156        (void)nrf_atomic_u32_add(&p_head->head_header.data.atomic_user_cnt, 1);
000008  1d3d              ADDS     r5,r7,#4
00000a  2601              MOVS     r6,#1
00000c  466a              MOV      r2,sp
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       __asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add
000016  4680              MOV      r8,r0
000018  bf00              NOP      
;;;157    }
00001a  e8bd83f8          POP      {r3-r9,pc}
;;;158    
                          ENDP


                          AREA ||i.nrf_memobj_pool_init||, CODE, READONLY, ALIGN=1

                  nrf_memobj_pool_init PROC
;;;82     
;;;83     ret_code_t nrf_memobj_pool_init(nrf_memobj_pool_t const * p_pool)
000000  b510              PUSH     {r4,lr}
;;;84     {
000002  4604              MOV      r4,r0
;;;85         return nrf_balloc_init((nrf_balloc_t const *)p_pool);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       nrf_balloc_init
;;;86     }
00000a  bd10              POP      {r4,pc}
;;;87     
                          ENDP


                          AREA ||i.nrf_memobj_put||, CODE, READONLY, ALIGN=1

                  nrf_memobj_put PROC
;;;158    
;;;159    void nrf_memobj_put(nrf_memobj_t * p_obj)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;160    {
000004  4604              MOV      r4,r0
;;;161        memobj_head_t * p_head = (memobj_head_t *)p_obj;
000006  4627              MOV      r7,r4
;;;162        uint32_t user_cnt = nrf_atomic_u32_sub(&p_head->head_header.data.atomic_user_cnt, 1);
000008  1d3d              ADDS     r5,r7,#4
00000a  2601              MOVS     r6,#1
00000c  466a              MOV      r2,sp
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       __asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub
000016  4681              MOV      r9,r0
000018  9800              LDR      r0,[sp,#0]
00001a  9001              STR      r0,[sp,#4]
;;;163        memobj_head_header_fields_t * p_fields = (memobj_head_header_fields_t *)&user_cnt;
00001c  f10d0804          ADD      r8,sp,#4
;;;164        if (p_fields->user_cnt == 0)
000020  f8980000          LDRB     r0,[r8,#0]
000024  b910              CBNZ     r0,|L6.44|
;;;165        {
;;;166            nrf_memobj_free(p_obj);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       nrf_memobj_free
                  |L6.44|
;;;167        }
;;;168    }
00002c  e8bd87fc          POP      {r2-r10,pc}
;;;169    
                          ENDP


                          AREA ||i.nrf_memobj_read||, CODE, READONLY, ALIGN=1

                  nrf_memobj_read PROC
;;;224    
;;;225    void nrf_memobj_read(nrf_memobj_t * p_obj,
000000  b5f8              PUSH     {r3-r7,lr}
;;;226                         void * p_data,
;;;227                         uint32_t len,
;;;228                         uint32_t offset)
;;;229    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;230        memobj_op(p_obj, p_data, len, offset, true);
00000a  2001              MOVS     r0,#1
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  9000              STR      r0,[sp,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       memobj_op
;;;231    }
00001a  bdf8              POP      {r3-r7,pc}
                          ENDP


                          AREA ||i.nrf_memobj_write||, CODE, READONLY, ALIGN=1

                  nrf_memobj_write PROC
;;;215    
;;;216    void nrf_memobj_write(nrf_memobj_t * p_obj,
000000  b5f8              PUSH     {r3-r7,lr}
;;;217                          void * p_data,
;;;218                          uint32_t len,
;;;219                          uint32_t offset)
;;;220    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;221    
;;;222        memobj_op(p_obj, p_data, len, offset, false);
00000a  2000              MOVS     r0,#0
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  9000              STR      r0,[sp,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       memobj_op
;;;223    }
00001a  bdf8              POP      {r3-r7,pc}
;;;224    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_memobj\\nrf_memobj.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_nrf_memobj_c_9bb9f865____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865____REVSH|
#line 402
|__asm___12_nrf_memobj_c_9bb9f865____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865____RRX|
#line 587
|__asm___12_nrf_memobj_c_9bb9f865____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_mov|
#line 65 "..\\..\\..\\..\\..\\..\\components\\libraries\\atomic\\nrf_atomic_internal.h"
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_mov| PROC
#line 68

#line 72
 
 push {r4, r5}
 mov r4, r0

loop_mov
 ldrex r0, [r4]
 mov r5, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_mov

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_orr|
#line 89
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_orr| PROC
#line 92

 push {r4, r5}
 mov r4, r0

loop_orr
 ldrex r0, [r4]
 orr r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_orr

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_and|
#line 108
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_and| PROC
#line 111

 push {r4, r5}
 mov r4, r0

loop_and
 ldrex r0, [r4]
 and r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_and

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_eor|
#line 127
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_eor| PROC
#line 130

 push {r4, r5}
 mov r4, r0

loop_eor
 ldrex r0, [r4]
 eor r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_eor

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add|
#line 146
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add| PROC
#line 149

 push {r4, r5}
 mov r4, r0

loop_add
 ldrex r0, [r4]
 add r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_add

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub|
#line 165
|__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub| PROC
#line 168

 push {r4, r5}
 mov r4, r0

loop_sub
 ldrex r0, [r4]
 sub r5, r0, r1
 strex r3, r5, [r4]
 cmp r3, #0
 bne loop_sub

 str r5, [r2]
 pop {r4, r5}
 bx lr
	ENDP

;*** End   embedded assembler ***
