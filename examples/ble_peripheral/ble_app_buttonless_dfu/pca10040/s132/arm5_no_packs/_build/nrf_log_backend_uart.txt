; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_log_backend_uart.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_log_backend_uart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_log_backend_uart.crf ..\..\..\..\..\..\components\libraries\experimental_log\src\nrf_log_backend_uart.c]
                          THUMB

                          AREA ||i.nrf_log_backend_uart_flush||, CODE, READONLY, ALIGN=1

                  nrf_log_backend_uart_flush PROC
;;;102    
;;;103    static void nrf_log_backend_uart_flush(nrf_log_backend_t const * p_backend)
000000  4770              BX       lr
;;;104    {
;;;105    
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.nrf_log_backend_uart_init||, CODE, READONLY, ALIGN=1

                  nrf_log_backend_uart_init PROC
;;;76     
;;;77     void nrf_log_backend_uart_init(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         bool async_mode = NRF_LOG_DEFERRED ? true : false;
000002  2401              MOVS     r4,#1
;;;80         uart_init(async_mode);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       uart_init
;;;81     }
00000a  bd10              POP      {r4,pc}
;;;82     
                          ENDP


                          AREA ||i.nrf_log_backend_uart_panic_set||, CODE, READONLY, ALIGN=2

                  nrf_log_backend_uart_panic_set PROC
;;;107    
;;;108    static void nrf_log_backend_uart_panic_set(nrf_log_backend_t const * p_backend)
000000  b510              PUSH     {r4,lr}
;;;109    {
000002  4604              MOV      r4,r0
;;;110        nrf_drv_uart_uninit(&m_uart);
000004  4803              LDR      r0,|L3.20|
000006  f7fffffe          BL       nrf_drv_uart_uninit
;;;111    
;;;112        uart_init(false);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       uart_init
;;;113    }
000010  bd10              POP      {r4,pc}
;;;114    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      m_uart

                          AREA ||i.nrf_log_backend_uart_put||, CODE, READONLY, ALIGN=2

                  nrf_log_backend_uart_put PROC
;;;96     
;;;97     static void nrf_log_backend_uart_put(nrf_log_backend_t const * p_backend,
000000  b538              PUSH     {r3-r5,lr}
;;;98                                          nrf_log_entry_t * p_msg)
;;;99     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;100        nrf_log_backend_serial_put(p_backend, p_msg, m_string_buff, BACKEND_BUFFER_SIZE, serial_tx);
000006  4804              LDR      r0,|L4.24|
000008  2301              MOVS     r3,#1
00000a  4a04              LDR      r2,|L4.28|
00000c  4629              MOV      r1,r5
00000e  9000              STR      r0,[sp,#0]
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       nrf_log_backend_serial_put
;;;101    }
000016  bd38              POP      {r3-r5,pc}
;;;102    
                          ENDP

                  |L4.24|
                          DCD      serial_tx
                  |L4.28|
                          DCD      m_string_buff

                          AREA ||i.serial_tx||, CODE, READONLY, ALIGN=2

                  serial_tx PROC
;;;82     
;;;83     static void serial_tx(void const * p_context, char const * p_buffer, size_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;84     {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;85         uint8_t len8 = (uint8_t)(len & 0x000000FF);
00000a  f00408ff          AND      r8,r4,#0xff
;;;86         m_xfer_done = false;
00000e  2000              MOVS     r0,#0
000010  490e              LDR      r1,|L5.76|
000012  7008              STRB     r0,[r1,#0]
;;;87         ret_code_t err_code = nrf_drv_uart_tx(&m_uart, (uint8_t *)p_buffer, len8);
000014  4642              MOV      r2,r8
000016  4639              MOV      r1,r7
000018  480d              LDR      r0,|L5.80|
00001a  f7fffffe          BL       nrf_drv_uart_tx
00001e  4605              MOV      r5,r0
;;;88         APP_ERROR_CHECK(err_code);
000020  bf00              NOP      
000022  462e              MOV      r6,r5
000024  b136              CBZ      r6,|L5.52|
000026  bf00              NOP      
000028  4a0a              LDR      r2,|L5.84|
00002a  2158              MOVS     r1,#0x58
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       app_error_handler
000032  bf00              NOP      
                  |L5.52|
000034  bf00              NOP      
;;;89         /* wait for completion since buffer is reused*/
;;;90         while (m_async_mode && (m_xfer_done == false))
000036  bf00              NOP      
                  |L5.56|
000038  4807              LDR      r0,|L5.88|
00003a  7800              LDRB     r0,[r0,#0]  ; m_async_mode
00003c  b118              CBZ      r0,|L5.70|
00003e  4803              LDR      r0,|L5.76|
000040  7800              LDRB     r0,[r0,#0]  ; m_xfer_done
000042  2800              CMP      r0,#0
000044  d0f8              BEQ      |L5.56|
                  |L5.70|
;;;91         {
;;;92     
;;;93         }
;;;94     
;;;95     }
000046  e8bd87f0          POP      {r4-r10,pc}
;;;96     
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      m_xfer_done
                  |L5.80|
                          DCD      m_uart
                  |L5.84|
                          DCD      ||.conststring||
                  |L5.88|
                          DCD      m_async_mode

                          AREA ||i.uart_evt_handler||, CODE, READONLY, ALIGN=2

                  uart_evt_handler PROC
;;;57     static bool m_async_mode;
;;;58     static void uart_evt_handler(nrf_drv_uart_event_t * p_event, void * p_context)
000000  2201              MOVS     r2,#1
;;;59     {
;;;60         m_xfer_done = true;
000002  4b01              LDR      r3,|L6.8|
000004  701a              STRB     r2,[r3,#0]
;;;61     }
000006  4770              BX       lr
;;;62     
                          ENDP

                  |L6.8|
                          DCD      m_xfer_done

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;62     
;;;63     static void uart_init(bool async_mode)
000000  b570              PUSH     {r4-r6,lr}
;;;64     {
000002  b088              SUB      sp,sp,#0x20
000004  4605              MOV      r5,r0
;;;65         nrf_drv_uart_config_t config = NRF_DRV_UART_DEFAULT_CONFIG;
000006  2220              MOVS     r2,#0x20
000008  4912              LDR      r1,|L7.84|
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;66         config.pseltxd  = NRF_LOG_BACKEND_UART_TX_PIN;
000010  2006              MOVS     r0,#6
000012  9000              STR      r0,[sp,#0]
;;;67         config.pselrxd  = NRF_UART_PSEL_DISCONNECTED;
000014  1fc0              SUBS     r0,r0,#7
000016  9001              STR      r0,[sp,#4]
;;;68         config.pselcts  = NRF_UART_PSEL_DISCONNECTED;
000018  9002              STR      r0,[sp,#8]
;;;69         config.pselrts  = NRF_UART_PSEL_DISCONNECTED;
00001a  9003              STR      r0,[sp,#0xc]
;;;70         config.baudrate = (nrf_uart_baudrate_t)NRF_LOG_BACKEND_UART_BAUDRATE;
00001c  f04f70eb          MOV      r0,#0x1d60000
000020  9006              STR      r0,[sp,#0x18]
;;;71         ret_code_t err_code = nrf_drv_uart_init(&m_uart, &config, async_mode ? uart_evt_handler : NULL);
000022  b10d              CBZ      r5,|L7.40|
000024  480c              LDR      r0,|L7.88|
000026  e000              B        |L7.42|
                  |L7.40|
000028  2000              MOVS     r0,#0
                  |L7.42|
00002a  4602              MOV      r2,r0
00002c  4669              MOV      r1,sp
00002e  480b              LDR      r0,|L7.92|
000030  f7fffffe          BL       nrf_drv_uart_init
000034  4604              MOV      r4,r0
;;;72         APP_ERROR_CHECK(err_code);
000036  bf00              NOP      
000038  4626              MOV      r6,r4
00003a  b136              CBZ      r6,|L7.74|
00003c  bf00              NOP      
00003e  4a08              LDR      r2,|L7.96|
000040  2148              MOVS     r1,#0x48
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       app_error_handler
000048  bf00              NOP      
                  |L7.74|
00004a  bf00              NOP      
;;;73     
;;;74         m_async_mode = async_mode;
00004c  4805              LDR      r0,|L7.100|
00004e  7005              STRB     r5,[r0,#0]
;;;75     }
000050  b008              ADD      sp,sp,#0x20
000052  bd70              POP      {r4-r6,pc}
;;;76     
                          ENDP

                  |L7.84|
                          DCD      ||.constdata||+0xc
                  |L7.88|
                          DCD      uart_evt_handler
                  |L7.92|
                          DCD      m_uart
                  |L7.96|
                          DCD      ||.conststring||
                  |L7.100|
                          DCD      m_async_mode

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  nrf_log_backend_uart_api
                          DCD      nrf_log_backend_uart_put
                          DCD      nrf_log_backend_uart_panic_set
                          DCD      nrf_log_backend_uart_flush
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0x00000000
000020  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x01d60000
000028  07010000          DCB      0x07,0x01,0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\libraries\\experime"
000004  2e5c2e2e
000008  5c2e2e5c
00000c  2e2e5c2e
000010  2e5c636f
000014  6d706f6e
000018  656e7473
00001c  5c6c6962
000020  72617269
000024  65735c65
000028  78706572
00002c  696d65  
00002f  6e74616c          DCB      "ntal_log\\src\\nrf_log_backend_uart.c",0
000033  5f6c6f67
000037  5c737263
00003b  5c6e7266
00003f  5f6c6f67
000043  5f626163
000047  6b656e64
00004b  5f756172
00004f  742e6300

                          AREA ||.data||, DATA, ALIGN=2

                  m_uart
                          DCD      0x40002000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  m_string_buff
000008  00                DCB      0x00
                  m_xfer_done
000009  00                DCB      0x00
                  m_async_mode
00000a  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\experimental_log\\src\\nrf_log_backend_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_nrf_log_backend_uart_c_m_uart____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_nrf_log_backend_uart_c_m_uart____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_nrf_log_backend_uart_c_m_uart____REVSH|
#line 402
|__asm___22_nrf_log_backend_uart_c_m_uart____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_nrf_log_backend_uart_c_m_uart____RRX|
#line 587
|__asm___22_nrf_log_backend_uart_c_m_uart____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
