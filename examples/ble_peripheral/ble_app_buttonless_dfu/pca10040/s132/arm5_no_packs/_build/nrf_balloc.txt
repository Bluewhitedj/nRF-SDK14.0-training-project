; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_balloc.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_balloc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_balloc.crf ..\..\..\..\..\..\components\libraries\balloc\nrf_balloc.c]
                          THUMB

                          AREA ||i.nrf_balloc_alloc||, CODE, READONLY, ALIGN=1

                  nrf_balloc_alloc PROC
;;;233    
;;;234    void * nrf_balloc_alloc(nrf_balloc_t const * p_pool)
000000  b5f8              PUSH     {r3-r7,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236        ASSERT(p_pool != NULL);
;;;237    
;;;238        void * p_block = NULL;
000004  2600              MOVS     r6,#0
;;;239    
;;;240        CRITICAL_REGION_ENTER();
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       app_util_critical_region_enter
;;;241    
;;;242        if (p_pool->p_cb->p_stack_pointer > p_pool->p_stack_base)
000010  6820              LDR      r0,[r4,#0]
000012  6800              LDR      r0,[r0,#0]
000014  6861              LDR      r1,[r4,#4]
000016  4288              CMP      r0,r1
000018  d915              BLS      |L1.70|
;;;243        {
;;;244            // Allocate block.
;;;245            p_block = nrf_balloc_idx2block(p_pool, *--(p_pool->p_cb->p_stack_pointer));
00001a  6820              LDR      r0,[r4,#0]
00001c  6800              LDR      r0,[r0,#0]
00001e  1e40              SUBS     r0,r0,#1
000020  6822              LDR      r2,[r4,#0]
000022  6010              STR      r0,[r2,#0]
000024  7801              LDRB     r1,[r0,#0]
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       nrf_balloc_idx2block
00002c  4606              MOV      r6,r0
;;;246    
;;;247            // Update utilization statistics.
;;;248            uint8_t utilization = p_pool->p_stack_limit - p_pool->p_cb->p_stack_pointer;
00002e  7a20              LDRB     r0,[r4,#8]
000030  6821              LDR      r1,[r4,#0]
000032  7809              LDRB     r1,[r1,#0]
000034  1a40              SUBS     r0,r0,r1
000036  b2c5              UXTB     r5,r0
;;;249            if (p_pool->p_cb->max_utilization < utilization)
000038  6820              LDR      r0,[r4,#0]
00003a  7900              LDRB     r0,[r0,#4]
00003c  42a8              CMP      r0,r5
00003e  da01              BGE      |L1.68|
;;;250            {
;;;251                p_pool->p_cb->max_utilization = utilization;
000040  6820              LDR      r0,[r4,#0]
000042  7105              STRB     r5,[r0,#4]
                  |L1.68|
;;;252            }
;;;253        }
000044  bf00              NOP      
                  |L1.70|
;;;254    
;;;255        CRITICAL_REGION_EXIT();
000046  f89d0000          LDRB     r0,[sp,#0]
00004a  f7fffffe          BL       app_util_critical_region_exit
;;;256    
;;;257    #if NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;258        if (p_block != NULL)
;;;259        {
;;;260            p_block = nrf_balloc_block_unwrap(p_pool, p_block);
;;;261        }
;;;262    #endif
;;;263    
;;;264        NRF_LOG_DEBUG("nrf_balloc_alloc(pool: '" POOL_MARKER "', element: 0x%08X)",
;;;265                      POOL_ID(p_pool), p_block);
;;;266    
;;;267        return p_block;
00004e  4630              MOV      r0,r6
;;;268    }
000050  bdf8              POP      {r3-r7,pc}
;;;269    
                          ENDP


                          AREA ||i.nrf_balloc_block2idx||, CODE, READONLY, ALIGN=1

                  nrf_balloc_block2idx PROC
;;;185     */
;;;186    static uint8_t nrf_balloc_block2idx(nrf_balloc_t const * p_pool, void const * p_block)
000000  4602              MOV      r2,r0
;;;187    {
;;;188        ASSERT(p_pool != NULL);
;;;189        return ((size_t)(p_block) - (size_t)(p_pool->p_memory_begin)) / p_pool->block_size;
000002  68d0              LDR      r0,[r2,#0xc]
000004  1a08              SUBS     r0,r1,r0
000006  8a13              LDRH     r3,[r2,#0x10]
000008  fbb0f0f3          UDIV     r0,r0,r3
00000c  b2c0              UXTB     r0,r0
;;;190    }
00000e  4770              BX       lr
;;;191    
                          ENDP


                          AREA ||i.nrf_balloc_free||, CODE, READONLY, ALIGN=1

                  nrf_balloc_free PROC
;;;269    
;;;270    void nrf_balloc_free(nrf_balloc_t const * p_pool, void * p_element)
000000  b5f8              PUSH     {r3-r7,lr}
;;;271    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;272        ASSERT(p_pool != NULL);
;;;273        ASSERT(p_element != NULL)
;;;274    
;;;275        NRF_LOG_DEBUG("nrf_balloc_free(pool: '" POOL_MARKER "', element: 0x%08X)",
;;;276                         POOL_ID(p_pool), p_element);
;;;277    
;;;278    #if NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;279        void * p_block = nrf_balloc_element_wrap(p_pool, p_element);
;;;280    
;;;281        // These checks could be done outside critical region as they use only pool configuration data.
;;;282        if (NRF_BALLOC_DEBUG_BASIC_CHECKS_GET(p_pool->debug_flags))
;;;283        {
;;;284            uint8_t pool_size  = p_pool->p_stack_limit - p_pool->p_stack_base;
;;;285            void *p_memory_end = (uint8_t *)(p_pool->p_memory_begin) + (pool_size * p_pool->block_size);
;;;286    
;;;287            // Check if the element belongs to this pool.
;;;288            if ((p_block < p_pool->p_memory_begin) || (p_block >= p_memory_end))
;;;289            {
;;;290                NRF_LOG_ERROR("Attempted to free element that does belong to the pool (pool: '" POOL_MARKER "', element: 0x%08X)",
;;;291                        POOL_ID(p_pool), p_element);
;;;292                APP_ERROR_CHECK_BOOL(false);
;;;293            }
;;;294    
;;;295            // Check if the pointer is valid.
;;;296            if ((((size_t)(p_block) - (size_t)(p_pool->p_memory_begin)) % p_pool->block_size) != 0)
;;;297            {
;;;298                NRF_LOG_ERROR("Atempted to free corrupted element address (pool: '" POOL_MARKER "', element: 0x%08X)",
;;;299                        POOL_ID(p_pool), p_element);
;;;300                APP_ERROR_CHECK_BOOL(false);
;;;301            }
;;;302        }
;;;303    #else
;;;304        void * p_block = p_element;
000006  462e              MOV      r6,r5
;;;305    #endif // NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;306    
;;;307        CRITICAL_REGION_ENTER();
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4668              MOV      r0,sp
00000e  f7fffffe          BL       app_util_critical_region_enter
;;;308    
;;;309    #if NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;310        // These checks have to be done in critical region as they use p_pool->p_stack_pointer.
;;;311        if (NRF_BALLOC_DEBUG_BASIC_CHECKS_GET(p_pool->debug_flags))
;;;312        {
;;;313            // Check for allocated/free ballance.
;;;314            if (p_pool->p_cb->p_stack_pointer >= p_pool->p_stack_limit)
;;;315            {
;;;316                NRF_LOG_ERROR("Attempted to free an element while the pool is full (pool: '" POOL_MARKER "', element: 0x%08X)",
;;;317                                POOL_ID(p_pool), p_element);
;;;318                APP_ERROR_CHECK_BOOL(false);
;;;319            }
;;;320        }
;;;321    
;;;322        if (NRF_BALLOC_DEBUG_DOUBLE_FREE_CHECK_GET(p_pool->debug_flags))
;;;323        {
;;;324            // Check for double free.
;;;325            for (uint8_t * p_idx = p_pool->p_stack_base; p_idx < p_pool->p_cb->p_stack_pointer; p_idx++)
;;;326            {
;;;327                if (nrf_balloc_idx2block(p_pool, *p_idx) == p_block)
;;;328                {
;;;329                    NRF_LOG_ERROR("Attempted to double-free an element (pool: '" POOL_MARKER "', element: 0x%08X)",
;;;330                                   POOL_ID(p_pool), p_element);
;;;331                    APP_ERROR_CHECK_BOOL(false);
;;;332                }
;;;333            }
;;;334        }
;;;335    #endif // NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;336    
;;;337        // Free the element.
;;;338        *(p_pool->p_cb->p_stack_pointer)++ = nrf_balloc_block2idx(p_pool, p_block);
000012  4631              MOV      r1,r6
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       nrf_balloc_block2idx
00001a  6821              LDR      r1,[r4,#0]
00001c  680a              LDR      r2,[r1,#0]
00001e  1c51              ADDS     r1,r2,#1
000020  6823              LDR      r3,[r4,#0]
000022  6019              STR      r1,[r3,#0]
000024  7010              STRB     r0,[r2,#0]
;;;339    
;;;340        CRITICAL_REGION_EXIT();
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  f7fffffe          BL       app_util_critical_region_exit
;;;341    }
00002e  bdf8              POP      {r3-r7,pc}
;;;342    
                          ENDP


                          AREA ||i.nrf_balloc_idx2block||, CODE, READONLY, ALIGN=1

                  nrf_balloc_idx2block PROC
;;;172     */
;;;173    static void * nrf_balloc_idx2block(nrf_balloc_t const * p_pool, uint8_t idx)
000000  4602              MOV      r2,r0
;;;174    {
;;;175        ASSERT(p_pool != NULL);
;;;176        return (uint8_t *)(p_pool->p_memory_begin) + ((size_t)(idx) * p_pool->block_size);
000002  8a13              LDRH     r3,[r2,#0x10]
000004  68d0              LDR      r0,[r2,#0xc]
000006  fb010003          MLA      r0,r1,r3,r0
;;;177    }
00000a  4770              BX       lr
;;;178    
                          ENDP


                          AREA ||i.nrf_balloc_init||, CODE, READONLY, ALIGN=1

                  nrf_balloc_init PROC
;;;191    
;;;192    ret_code_t nrf_balloc_init(nrf_balloc_t const * p_pool)
000000  b510              PUSH     {r4,lr}
;;;193    {
000002  4601              MOV      r1,r0
;;;194        uint8_t pool_size;
;;;195    
;;;196        VERIFY_PARAM_NOT_NULL(p_pool);
000004  bf00              NOP      
000006  b909              CBNZ     r1,|L5.12|
000008  200e              MOVS     r0,#0xe
                  |L5.10|
;;;197    
;;;198        ASSERT(p_pool->p_cb);
;;;199        ASSERT(p_pool->p_stack_base);
;;;200        ASSERT(p_pool->p_stack_limit);
;;;201        ASSERT(p_pool->p_memory_begin);
;;;202        ASSERT(p_pool->block_size);
;;;203    
;;;204        pool_size       = p_pool->p_stack_limit - p_pool->p_stack_base;
;;;205    
;;;206    #if NRF_BALLOC_CONFIG_DEBUG_ENABLED
;;;207        void *p_memory_end = (uint8_t *)(p_pool->p_memory_begin) + (pool_size * p_pool->block_size);
;;;208        if (NRF_BALLOC_DEBUG_DATA_TRASHING_CHECK_GET(p_pool->debug_flags))
;;;209        {
;;;210            for (uint32_t * ptr = p_pool->p_memory_begin; ptr < (uint32_t *)(p_memory_end); ptr++)
;;;211            {
;;;212                *ptr = FREE_MEM_FILL;
;;;213            }
;;;214        }
;;;215    #endif
;;;216    
;;;217        NRF_LOG_INFO("Pool '" POOL_MARKER "' initialized (size: %u x %u = %u bytes)",
;;;218                     POOL_ID(p_pool),
;;;219                     pool_size,
;;;220                     p_pool->block_size,
;;;221                     pool_size * p_pool->block_size);
;;;222    
;;;223        p_pool->p_cb->p_stack_pointer = p_pool->p_stack_base;
;;;224        while (pool_size--)
;;;225        {
;;;226            *(p_pool->p_cb->p_stack_pointer)++ = pool_size;
;;;227        }
;;;228    
;;;229        p_pool->p_cb->max_utilization = 0;
;;;230    
;;;231        return NRF_SUCCESS;
;;;232    }
00000a  bd10              POP      {r4,pc}
                  |L5.12|
00000c  bf00              NOP                            ;196
00000e  7a08              LDRB     r0,[r1,#8]            ;204
000010  790b              LDRB     r3,[r1,#4]            ;204
000012  1ac0              SUBS     r0,r0,r3              ;204
000014  b2c2              UXTB     r2,r0                 ;204
000016  e9d13000          LDRD     r3,r0,[r1,#0]         ;223
00001a  6018              STR      r0,[r3,#0]            ;223
00001c  e005              B        |L5.42|
                  |L5.30|
00001e  6808              LDR      r0,[r1,#0]            ;226
000020  6803              LDR      r3,[r0,#0]            ;226
000022  1c58              ADDS     r0,r3,#1              ;226
000024  680c              LDR      r4,[r1,#0]            ;226
000026  6020              STR      r0,[r4,#0]            ;226
000028  701a              STRB     r2,[r3,#0]            ;226
                  |L5.42|
00002a  1e10              SUBS     r0,r2,#0              ;224
00002c  f1a20301          SUB      r3,r2,#1              ;224
000030  b2da              UXTB     r2,r3                 ;224
000032  d1f4              BNE      |L5.30|
000034  680b              LDR      r3,[r1,#0]            ;229
000036  7118              STRB     r0,[r3,#4]            ;229
000038  bf00              NOP                            ;231
00003a  e7e6              B        |L5.10|
;;;233    
                          ENDP


                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  62616c6c          DCB      0x62,0x61,0x6c,0x6c
000004  6f6300            DCB      0x6f,0x63,0x00

                          AREA log_const_data, DATA, READONLY, ALIGN=2

                  m_nrf_log_balloc_logs_data_const
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
000004  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA log_dynamic_data, DATA, ALIGN=2

                  m_nrf_log_balloc_logs_data_dynamic
                  |symbol_number.47|
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\balloc\\nrf_balloc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_balloc_c_966ec7e7____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___12_nrf_balloc_c_966ec7e7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_balloc_c_966ec7e7____REVSH|
#line 402
|__asm___12_nrf_balloc_c_966ec7e7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_nrf_balloc_c_966ec7e7____RRX|
#line 587
|__asm___12_nrf_balloc_c_966ec7e7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
