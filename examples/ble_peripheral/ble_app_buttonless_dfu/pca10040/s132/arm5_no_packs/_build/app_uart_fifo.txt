; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\app_uart_fifo.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\app_uart_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\app_uart_fifo.crf ..\..\..\..\..\..\components\libraries\uart\app_uart_fifo.c]
                          THUMB

                          AREA ||i.app_uart_close||, CODE, READONLY, ALIGN=2

                  app_uart_close PROC
;;;245    
;;;246    uint32_t app_uart_close(void)
000000  b510              PUSH     {r4,lr}
;;;247    {
;;;248        nrf_drv_uart_uninit(&app_uart_inst);
000002  4802              LDR      r0,|L1.12|
000004  f7fffffe          BL       nrf_drv_uart_uninit
;;;249        return NRF_SUCCESS;
000008  2000              MOVS     r0,#0
;;;250    }
00000a  bd10              POP      {r4,pc}
;;;251    #endif //NRF_MODULE_ENABLED(APP_UART)
                          ENDP

                  |L1.12|
                          DCD      app_uart_inst

                          AREA ||i.app_uart_flush||, CODE, READONLY, ALIGN=2

                  app_uart_flush PROC
;;;184    
;;;185    uint32_t app_uart_flush(void)
000000  b510              PUSH     {r4,lr}
;;;186    {
;;;187        uint32_t err_code;
;;;188    
;;;189        err_code = app_fifo_flush(&m_rx_fifo);
000002  480a              LDR      r0,|L2.44|
000004  f7fffffe          BL       app_fifo_flush
000008  4604              MOV      r4,r0
;;;190        VERIFY_SUCCESS(err_code);
00000a  bf00              NOP      
00000c  b10c              CBZ      r4,|L2.18|
00000e  4620              MOV      r0,r4
                  |L2.16|
;;;191    
;;;192        err_code = app_fifo_flush(&m_tx_fifo);
;;;193        VERIFY_SUCCESS(err_code);
;;;194    
;;;195        return NRF_SUCCESS;
;;;196    }
000010  bd10              POP      {r4,pc}
                  |L2.18|
000012  bf00              NOP                            ;190
000014  4806              LDR      r0,|L2.48|
000016  f7fffffe          BL       app_fifo_flush
00001a  4604              MOV      r4,r0                 ;192
00001c  bf00              NOP                            ;193
00001e  b10c              CBZ      r4,|L2.36|
000020  4620              MOV      r0,r4                 ;193
000022  e7f5              B        |L2.16|
                  |L2.36|
000024  bf00              NOP                            ;193
000026  2000              MOVS     r0,#0                 ;195
000028  e7f2              B        |L2.16|
;;;197    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      m_rx_fifo
                  |L2.48|
                          DCD      m_tx_fifo

                          AREA ||i.app_uart_get||, CODE, READONLY, ALIGN=2

                  app_uart_get PROC
;;;198    
;;;199    uint32_t app_uart_get(uint8_t * p_byte)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;200    {
000004  4604              MOV      r4,r0
;;;201        ASSERT(p_byte);
;;;202        bool rx_ovf = m_rx_ovf;
000006  4810              LDR      r0,|L3.72|
000008  7807              LDRB     r7,[r0,#0]  ; m_rx_ovf
;;;203    
;;;204        ret_code_t err_code =  app_fifo_get(&m_rx_fifo, p_byte);
00000a  4621              MOV      r1,r4
00000c  480f              LDR      r0,|L3.76|
00000e  f7fffffe          BL       app_fifo_get
000012  4680              MOV      r8,r0
;;;205    
;;;206        // If FIFO was full new request to receive one byte was not scheduled. Must be done here.
;;;207        if (rx_ovf)
000014  b1a7              CBZ      r7,|L3.64|
;;;208        {
;;;209            m_rx_ovf = false;
000016  2000              MOVS     r0,#0
000018  490b              LDR      r1,|L3.72|
00001a  7008              STRB     r0,[r1,#0]
;;;210            uint32_t uart_err_code = nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);
00001c  2201              MOVS     r2,#1
00001e  490c              LDR      r1,|L3.80|
000020  480c              LDR      r0,|L3.84|
000022  f7fffffe          BL       nrf_drv_uart_rx
000026  4605              MOV      r5,r0
;;;211    
;;;212            // RX resume should never fail.
;;;213            APP_ERROR_CHECK(uart_err_code);
000028  bf00              NOP      
00002a  462e              MOV      r6,r5
00002c  b136              CBZ      r6,|L3.60|
00002e  bf00              NOP      
000030  a209              ADR      r2,|L3.88|
000032  21d5              MOVS     r1,#0xd5
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       app_error_handler
00003a  bf00              NOP      
                  |L3.60|
00003c  bf00              NOP      
;;;214        }
00003e  bf00              NOP      
                  |L3.64|
;;;215    
;;;216        return err_code;
000040  4640              MOV      r0,r8
;;;217    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;218    
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      m_rx_ovf
                  |L3.76|
                          DCD      m_rx_fifo
                  |L3.80|
                          DCD      rx_buffer
                  |L3.84|
                          DCD      app_uart_inst
                  |L3.88|
000058  2e2e5c2e          DCB      "..\\..\\..\\..\\..\\..\\components\\libraries\\uart\\ap"
00005c  2e5c2e2e
000060  5c2e2e5c
000064  2e2e5c2e
000068  2e5c636f
00006c  6d706f6e
000070  656e7473
000074  5c6c6962
000078  72617269
00007c  65735c75
000080  6172745c
000084  6170    
000086  705f7561          DCB      "p_uart_fifo.c",0
00008a  72745f66
00008e  69666f2e
000092  6300    

                          AREA ||i.app_uart_init||, CODE, READONLY, ALIGN=2

                  app_uart_init PROC
;;;128    
;;;129    uint32_t app_uart_init(const app_uart_comm_params_t * p_comm_params,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;130                                 app_uart_buffers_t *     p_buffers,
;;;131                                 app_uart_event_handler_t event_handler,
;;;132                                 app_irq_priority_t       irq_priority)
;;;133    {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
;;;134        uint32_t err_code;
;;;135    
;;;136        m_event_handler = event_handler;
00000e  482e              LDR      r0,|L4.200|
000010  6007              STR      r7,[r0,#0]  ; m_event_handler
;;;137    
;;;138        if (p_buffers == NULL)
000012  b91d              CBNZ     r5,|L4.28|
;;;139        {
;;;140            return NRF_ERROR_INVALID_PARAM;
000014  2007              MOVS     r0,#7
                  |L4.22|
;;;141        }
;;;142    
;;;143        // Configure buffer RX buffer.
;;;144        err_code = app_fifo_init(&m_rx_fifo, p_buffers->rx_buf, p_buffers->rx_buf_size);
;;;145        VERIFY_SUCCESS(err_code);
;;;146    
;;;147        // Configure buffer TX buffer.
;;;148        err_code = app_fifo_init(&m_tx_fifo, p_buffers->tx_buf, p_buffers->tx_buf_size);
;;;149        VERIFY_SUCCESS(err_code);
;;;150    
;;;151        nrf_drv_uart_config_t config = NRF_DRV_UART_DEFAULT_CONFIG;
;;;152        config.baudrate = (nrf_uart_baudrate_t)p_comm_params->baud_rate;
;;;153        config.hwfc = (p_comm_params->flow_control == APP_UART_FLOW_CONTROL_DISABLED) ?
;;;154                NRF_UART_HWFC_DISABLED : NRF_UART_HWFC_ENABLED;
;;;155        config.interrupt_priority = irq_priority;
;;;156        config.parity = p_comm_params->use_parity ? NRF_UART_PARITY_INCLUDED : NRF_UART_PARITY_EXCLUDED;
;;;157        config.pselcts = p_comm_params->cts_pin_no;
;;;158        config.pselrts = p_comm_params->rts_pin_no;
;;;159        config.pselrxd = p_comm_params->rx_pin_no;
;;;160        config.pseltxd = p_comm_params->tx_pin_no;
;;;161    
;;;162        err_code = nrf_drv_uart_init(&app_uart_inst, &config, uart_event_handler);
;;;163        VERIFY_SUCCESS(err_code);
;;;164        m_rx_ovf = false;
;;;165    
;;;166        // Turn on receiver if RX pin is connected
;;;167        if (p_comm_params->rx_pin_no != UART_PIN_DISCONNECTED)
;;;168        {
;;;169    #ifdef UARTE_PRESENT
;;;170            if (!config.use_easy_dma)
;;;171    #endif
;;;172            {
;;;173                nrf_drv_uart_rx_enable(&app_uart_inst);
;;;174            }
;;;175    
;;;176            return nrf_drv_uart_rx(&app_uart_inst, rx_buffer,1);
;;;177        }
;;;178        else
;;;179        {
;;;180            return NRF_SUCCESS;
;;;181        }
;;;182    }
000016  b008              ADD      sp,sp,#0x20
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L4.28|
00001c  88a8              LDRH     r0,[r5,#4]            ;144
00001e  b282              UXTH     r2,r0                 ;144
000020  482a              LDR      r0,|L4.204|
000022  6829              LDR      r1,[r5,#0]            ;144
000024  f7fffffe          BL       app_fifo_init
000028  4606              MOV      r6,r0                 ;144
00002a  bf00              NOP                            ;145
00002c  b10e              CBZ      r6,|L4.50|
00002e  4630              MOV      r0,r6                 ;145
000030  e7f1              B        |L4.22|
                  |L4.50|
000032  bf00              NOP                            ;145
000034  89a8              LDRH     r0,[r5,#0xc]          ;148
000036  b282              UXTH     r2,r0                 ;148
000038  4825              LDR      r0,|L4.208|
00003a  68a9              LDR      r1,[r5,#8]            ;148
00003c  f7fffffe          BL       app_fifo_init
000040  4606              MOV      r6,r0                 ;148
000042  bf00              NOP                            ;149
000044  b10e              CBZ      r6,|L4.74|
000046  4630              MOV      r0,r6                 ;149
000048  e7e5              B        |L4.22|
                  |L4.74|
00004a  bf00              NOP                            ;149
00004c  2220              MOVS     r2,#0x20              ;151
00004e  4921              LDR      r1,|L4.212|
000050  4668              MOV      r0,sp                 ;151
000052  f7fffffe          BL       __aeabi_memcpy4
000056  6960              LDR      r0,[r4,#0x14]         ;152
000058  9006              STR      r0,[sp,#0x18]         ;152
00005a  7c20              LDRB     r0,[r4,#0x10]         ;153
00005c  b108              CBZ      r0,|L4.98|
00005e  2001              MOVS     r0,#1                 ;154
000060  e000              B        |L4.100|
                  |L4.98|
000062  2000              MOVS     r0,#0                 ;154
                  |L4.100|
000064  f88d0014          STRB     r0,[sp,#0x14]         ;154
000068  f88d801c          STRB     r8,[sp,#0x1c]         ;155
00006c  7c60              LDRB     r0,[r4,#0x11]         ;156
00006e  b108              CBZ      r0,|L4.116|
000070  200e              MOVS     r0,#0xe               ;156
000072  e000              B        |L4.118|
                  |L4.116|
000074  2000              MOVS     r0,#0                 ;156
                  |L4.118|
000076  f88d0015          STRB     r0,[sp,#0x15]         ;156
00007a  68e0              LDR      r0,[r4,#0xc]          ;157
00007c  9002              STR      r0,[sp,#8]            ;157
00007e  68a0              LDR      r0,[r4,#8]            ;158
000080  9003              STR      r0,[sp,#0xc]          ;158
000082  6820              LDR      r0,[r4,#0]            ;159
000084  9001              STR      r0,[sp,#4]            ;159
000086  6860              LDR      r0,[r4,#4]            ;160
000088  9000              STR      r0,[sp,#0]            ;160
00008a  4a13              LDR      r2,|L4.216|
00008c  4669              MOV      r1,sp                 ;162
00008e  4813              LDR      r0,|L4.220|
000090  f7fffffe          BL       nrf_drv_uart_init
000094  4606              MOV      r6,r0                 ;162
000096  bf00              NOP                            ;163
000098  b10e              CBZ      r6,|L4.158|
00009a  4630              MOV      r0,r6                 ;163
00009c  e7bb              B        |L4.22|
                  |L4.158|
00009e  bf00              NOP                            ;163
0000a0  2000              MOVS     r0,#0                 ;164
0000a2  490f              LDR      r1,|L4.224|
0000a4  7008              STRB     r0,[r1,#0]            ;164
0000a6  6820              LDR      r0,[r4,#0]            ;167
0000a8  1c40              ADDS     r0,r0,#1              ;167
0000aa  b158              CBZ      r0,|L4.196|
0000ac  f89d001d          LDRB     r0,[sp,#0x1d]         ;170
0000b0  b910              CBNZ     r0,|L4.184|
0000b2  480a              LDR      r0,|L4.220|
0000b4  f7fffffe          BL       nrf_drv_uart_rx_enable
                  |L4.184|
0000b8  2201              MOVS     r2,#1                 ;176
0000ba  490a              LDR      r1,|L4.228|
0000bc  4807              LDR      r0,|L4.220|
0000be  f7fffffe          BL       nrf_drv_uart_rx
0000c2  e7a8              B        |L4.22|
                  |L4.196|
0000c4  2000              MOVS     r0,#0                 ;180
0000c6  e7a6              B        |L4.22|
;;;183    
                          ENDP

                  |L4.200|
                          DCD      m_event_handler
                  |L4.204|
                          DCD      m_rx_fifo
                  |L4.208|
                          DCD      m_tx_fifo
                  |L4.212|
                          DCD      ||.constdata||
                  |L4.216|
                          DCD      uart_event_handler
                  |L4.220|
                          DCD      app_uart_inst
                  |L4.224|
                          DCD      m_rx_ovf
                  |L4.228|
                          DCD      rx_buffer

                          AREA ||i.app_uart_put||, CODE, READONLY, ALIGN=2

                  app_uart_put PROC
;;;219    
;;;220    uint32_t app_uart_put(uint8_t byte)
000000  b570              PUSH     {r4-r6,lr}
;;;221    {
000002  4604              MOV      r4,r0
;;;222        uint32_t err_code;
;;;223        err_code = app_fifo_put(&m_tx_fifo, byte);
000004  4621              MOV      r1,r4
000006  480b              LDR      r0,|L5.52|
000008  f7fffffe          BL       app_fifo_put
00000c  4605              MOV      r5,r0
;;;224        if (err_code == NRF_SUCCESS)
00000e  b975              CBNZ     r5,|L5.46|
;;;225        {
;;;226            // The new byte has been added to FIFO. It will be picked up from there
;;;227            // (in 'uart_event_handler') when all preceding bytes are transmitted.
;;;228            // But if UART is not transmitting anything at the moment, we must start
;;;229            // a new transmission here.
;;;230            if (!nrf_drv_uart_tx_in_progress(&app_uart_inst))
000010  4809              LDR      r0,|L5.56|
000012  f7fffffe          BL       nrf_drv_uart_tx_in_progress
000016  b950              CBNZ     r0,|L5.46|
;;;231            {
;;;232                // This operation should be almost always successful, since we've
;;;233                // just added a byte to FIFO, but if some bigger delay occurred
;;;234                // (some heavy interrupt handler routine has been executed) since
;;;235                // that time, FIFO might be empty already.
;;;236                if (app_fifo_get(&m_tx_fifo, tx_buffer) == NRF_SUCCESS)
000018  4908              LDR      r1,|L5.60|
00001a  4806              LDR      r0,|L5.52|
00001c  f7fffffe          BL       app_fifo_get
000020  b928              CBNZ     r0,|L5.46|
;;;237                {
;;;238                    err_code = nrf_drv_uart_tx(&app_uart_inst, tx_buffer, 1);
000022  2201              MOVS     r2,#1
000024  4905              LDR      r1,|L5.60|
000026  4804              LDR      r0,|L5.56|
000028  f7fffffe          BL       nrf_drv_uart_tx
00002c  4605              MOV      r5,r0
                  |L5.46|
;;;239                }
;;;240            }
;;;241        }
;;;242        return err_code;
00002e  4628              MOV      r0,r5
;;;243    }
000030  bd70              POP      {r4-r6,pc}
;;;244    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      m_tx_fifo
                  |L5.56|
                          DCD      app_uart_inst
                  |L5.60|
                          DCD      tx_buffer

                          AREA ||i.fifo_length||, CODE, READONLY, ALIGN=1

                  fifo_length PROC
;;;48     
;;;49     static __INLINE uint32_t fifo_length(app_fifo_t * const fifo)
000000  4601              MOV      r1,r0
;;;50     {
;;;51       uint32_t tmp = fifo->read_pos;
000002  688a              LDR      r2,[r1,#8]
;;;52       return fifo->write_pos - tmp;
000004  68c8              LDR      r0,[r1,#0xc]
000006  1a80              SUBS     r0,r0,r2
;;;53     }
000008  4770              BX       lr
;;;54     
                          ENDP


                          AREA ||i.uart_event_handler||, CODE, READONLY, ALIGN=2

                  uart_event_handler PROC
;;;65     
;;;66     static void uart_event_handler(nrf_drv_uart_event_t * p_event, void* p_context)
000000  b57c              PUSH     {r2-r6,lr}
;;;67     {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;68         app_uart_evt_t app_uart_event;
;;;69         uint32_t err_code;
;;;70     
;;;71         switch (p_event->type)
000006  7820              LDRB     r0,[r4,#0]
000008  2800              CMP      r0,#0
00000a  d03f              BEQ      |L7.140|
00000c  2801              CMP      r0,#1
00000e  d002              BEQ      |L7.22|
000010  2802              CMP      r0,#2
000012  d14e              BNE      |L7.178|
000014  e02b              B        |L7.110|
                  |L7.22|
;;;72         {
;;;73             case NRF_DRV_UART_EVT_RX_DONE:
;;;74                 // Write received byte to FIFO.
;;;75                 err_code = app_fifo_put(&m_rx_fifo, p_event->data.rxtx.p_data[0]);
000016  6860              LDR      r0,[r4,#4]
000018  7801              LDRB     r1,[r0,#0]
00001a  4827              LDR      r0,|L7.184|
00001c  f7fffffe          BL       app_fifo_put
000020  4605              MOV      r5,r0
;;;76                 if (err_code != NRF_SUCCESS)
000022  b145              CBZ      r5,|L7.54|
;;;77                 {
;;;78                     app_uart_event.evt_type          = APP_UART_FIFO_ERROR;
000024  2001              MOVS     r0,#1
000026  f88d0000          STRB     r0,[sp,#0]
;;;79                     app_uart_event.data.error_code   = err_code;
00002a  9501              STR      r5,[sp,#4]
;;;80                     m_event_handler(&app_uart_event);
00002c  4668              MOV      r0,sp
00002e  4923              LDR      r1,|L7.188|
000030  6809              LDR      r1,[r1,#0]  ; m_event_handler
000032  4788              BLX      r1
000034  e00a              B        |L7.76|
                  |L7.54|
;;;81                 }
;;;82                 // Notify that there are data available.
;;;83                 else if (FIFO_LENGTH(m_rx_fifo) != 0)
000036  4820              LDR      r0,|L7.184|
000038  f7fffffe          BL       fifo_length
00003c  b130              CBZ      r0,|L7.76|
;;;84                 {
;;;85                     app_uart_event.evt_type = APP_UART_DATA_READY;
00003e  2000              MOVS     r0,#0
000040  f88d0000          STRB     r0,[sp,#0]
;;;86                     m_event_handler(&app_uart_event);
000044  4668              MOV      r0,sp
000046  491d              LDR      r1,|L7.188|
000048  6809              LDR      r1,[r1,#0]  ; m_event_handler
00004a  4788              BLX      r1
                  |L7.76|
;;;87                 }
;;;88     
;;;89                 // Start new RX if size in buffer.
;;;90                 if (FIFO_LENGTH(m_rx_fifo) <= m_rx_fifo.buf_size_mask)
00004c  481a              LDR      r0,|L7.184|
00004e  f7fffffe          BL       fifo_length
000052  4919              LDR      r1,|L7.184|
000054  8889              LDRH     r1,[r1,#4]  ; m_rx_fifo
000056  4288              CMP      r0,r1
000058  d805              BHI      |L7.102|
;;;91                 {
;;;92                     (void)nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);
00005a  2201              MOVS     r2,#1
00005c  4918              LDR      r1,|L7.192|
00005e  4819              LDR      r0,|L7.196|
000060  f7fffffe          BL       nrf_drv_uart_rx
000064  e002              B        |L7.108|
                  |L7.102|
;;;93                 }
;;;94                 else
;;;95                 {
;;;96                     // Overflow in RX FIFO.
;;;97                     m_rx_ovf = true;
000066  2001              MOVS     r0,#1
000068  4917              LDR      r1,|L7.200|
00006a  7008              STRB     r0,[r1,#0]
                  |L7.108|
;;;98                 }
;;;99     
;;;100                break;
00006c  e022              B        |L7.180|
                  |L7.110|
;;;101    
;;;102            case NRF_DRV_UART_EVT_ERROR:
;;;103                app_uart_event.evt_type                 = APP_UART_COMMUNICATION_ERROR;
00006e  2002              MOVS     r0,#2
000070  f88d0000          STRB     r0,[sp,#0]
;;;104                app_uart_event.data.error_communication = p_event->data.error.error_mask;
000074  68e0              LDR      r0,[r4,#0xc]
000076  9001              STR      r0,[sp,#4]
;;;105                (void)nrf_drv_uart_rx(&app_uart_inst, rx_buffer, 1);
000078  2201              MOVS     r2,#1
00007a  4911              LDR      r1,|L7.192|
00007c  4811              LDR      r0,|L7.196|
00007e  f7fffffe          BL       nrf_drv_uart_rx
;;;106                m_event_handler(&app_uart_event);
000082  4668              MOV      r0,sp
000084  490d              LDR      r1,|L7.188|
000086  6809              LDR      r1,[r1,#0]  ; m_event_handler
000088  4788              BLX      r1
;;;107                break;
00008a  e013              B        |L7.180|
                  |L7.140|
;;;108    
;;;109            case NRF_DRV_UART_EVT_TX_DONE:
;;;110                // Get next byte from FIFO.
;;;111                if (app_fifo_get(&m_tx_fifo, tx_buffer) == NRF_SUCCESS)
00008c  490f              LDR      r1,|L7.204|
00008e  4810              LDR      r0,|L7.208|
000090  f7fffffe          BL       app_fifo_get
000094  b928              CBNZ     r0,|L7.162|
;;;112                {
;;;113                    (void)nrf_drv_uart_tx(&app_uart_inst, tx_buffer, 1);
000096  2201              MOVS     r2,#1
000098  490c              LDR      r1,|L7.204|
00009a  480a              LDR      r0,|L7.196|
00009c  f7fffffe          BL       nrf_drv_uart_tx
0000a0  e006              B        |L7.176|
                  |L7.162|
;;;114                }
;;;115                else
;;;116                {
;;;117                    // Last byte from FIFO transmitted, notify the application.
;;;118                    app_uart_event.evt_type = APP_UART_TX_EMPTY;
0000a2  2003              MOVS     r0,#3
0000a4  f88d0000          STRB     r0,[sp,#0]
;;;119                    m_event_handler(&app_uart_event);
0000a8  4668              MOV      r0,sp
0000aa  4904              LDR      r1,|L7.188|
0000ac  6809              LDR      r1,[r1,#0]  ; m_event_handler
0000ae  4788              BLX      r1
                  |L7.176|
;;;120                }
;;;121                break;
0000b0  e000              B        |L7.180|
                  |L7.178|
;;;122    
;;;123            default:
;;;124                break;
0000b2  bf00              NOP      
                  |L7.180|
0000b4  bf00              NOP                            ;100
;;;125        }
;;;126    }
0000b6  bd7c              POP      {r2-r6,pc}
;;;127    
                          ENDP

                  |L7.184|
                          DCD      m_rx_fifo
                  |L7.188|
                          DCD      m_event_handler
                  |L7.192|
                          DCD      rx_buffer
                  |L7.196|
                          DCD      app_uart_inst
                  |L7.200|
                          DCD      m_rx_ovf
                  |L7.204|
                          DCD      tx_buffer
                  |L7.208|
                          DCD      m_tx_fifo

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_rx_fifo
                          %        16
                  m_tx_fifo
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0x00000000
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x01d60000
00001c  07010000          DCB      0x07,0x01,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  app_uart_inst
                          DCD      0x40002000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  m_event_handler
                          DCD      0x00000000
                  tx_buffer
00000c  00                DCB      0x00
                  rx_buffer
00000d  00                DCB      0x00
                  m_rx_ovf
00000e  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\libraries\\uart\\app_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_app_uart_fifo_c_5e248083____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_app_uart_fifo_c_5e248083____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_app_uart_fifo_c_5e248083____REVSH|
#line 402
|__asm___15_app_uart_fifo_c_5e248083____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_app_uart_fifo_c_5e248083____RRX|
#line 587
|__asm___15_app_uart_fifo_c_5e248083____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
