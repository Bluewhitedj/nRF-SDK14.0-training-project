; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\pm_buffer.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\pm_buffer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\pm_buffer.crf ..\..\..\..\..\..\components\ble\peer_manager\pm_buffer.c]
                          THUMB

                          AREA ||i.pm_buffer_block_acquire||, CODE, READONLY, ALIGN=1

                  pm_buffer_block_acquire PROC
;;;86     
;;;87     uint8_t pm_buffer_block_acquire(pm_buffer_t * p_buffer, uint32_t n_blocks)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;88     {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;89         if (!BUFFER_IS_VALID(p_buffer))
000008  b11c              CBZ      r4,|L1.18|
00000a  6820              LDR      r0,[r4,#0]
00000c  b108              CBZ      r0,|L1.18|
00000e  6860              LDR      r0,[r4,#4]
000010  b910              CBNZ     r0,|L1.24|
                  |L1.18|
;;;90         {
;;;91             return ( PM_BUFFER_INVALID_ID );
000012  20ff              MOVS     r0,#0xff
                  |L1.20|
;;;92         }
;;;93     
;;;94         uint8_t first_locked_mutex = PM_BUFFER_INVALID_ID;
;;;95     
;;;96         for (uint8_t i = 0; i < p_buffer->n_blocks; i++)
;;;97         {
;;;98             if (pm_mutex_lock(p_buffer->p_mutex, i))
;;;99             {
;;;100                if (first_locked_mutex == PM_BUFFER_INVALID_ID)
;;;101                {
;;;102                    first_locked_mutex = i;
;;;103                }
;;;104                if ((i - first_locked_mutex + 1) == n_blocks)
;;;105                {
;;;106                    return first_locked_mutex;
;;;107                }
;;;108            }
;;;109            else if (first_locked_mutex != PM_BUFFER_INVALID_ID)
;;;110            {
;;;111                for (uint8_t j = first_locked_mutex; j < i; j++)
;;;112                {
;;;113                    pm_buffer_release(p_buffer, j);
;;;114                }
;;;115                first_locked_mutex = PM_BUFFER_INVALID_ID;
;;;116            }
;;;117        }
;;;118    
;;;119        return ( PM_BUFFER_INVALID_ID );
;;;120    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L1.24|
000018  25ff              MOVS     r5,#0xff              ;94
00001a  2600              MOVS     r6,#0                 ;96
00001c  e01c              B        |L1.88|
                  |L1.30|
00001e  4631              MOV      r1,r6                 ;98
000020  6860              LDR      r0,[r4,#4]            ;98
000022  f7fffffe          BL       pm_mutex_lock
000026  b140              CBZ      r0,|L1.58|
000028  2dff              CMP      r5,#0xff              ;100
00002a  d100              BNE      |L1.46|
00002c  4635              MOV      r5,r6                 ;102
                  |L1.46|
00002e  1b70              SUBS     r0,r6,r5              ;104
000030  1c40              ADDS     r0,r0,#1              ;104
000032  4540              CMP      r0,r8                 ;104
000034  d10e              BNE      |L1.84|
000036  4628              MOV      r0,r5                 ;106
000038  e7ec              B        |L1.20|
                  |L1.58|
00003a  2dff              CMP      r5,#0xff              ;109
00003c  d00a              BEQ      |L1.84|
00003e  462f              MOV      r7,r5                 ;111
000040  e005              B        |L1.78|
                  |L1.66|
000042  4639              MOV      r1,r7                 ;113
000044  4620              MOV      r0,r4                 ;113
000046  f7fffffe          BL       pm_buffer_release
00004a  1c78              ADDS     r0,r7,#1              ;111
00004c  b2c7              UXTB     r7,r0                 ;111
                  |L1.78|
00004e  42b7              CMP      r7,r6                 ;111
000050  dbf7              BLT      |L1.66|
000052  25ff              MOVS     r5,#0xff              ;115
                  |L1.84|
000054  1c70              ADDS     r0,r6,#1              ;96
000056  b2c6              UXTB     r6,r0                 ;96
                  |L1.88|
000058  68a0              LDR      r0,[r4,#8]            ;96
00005a  42b0              CMP      r0,r6                 ;96
00005c  d8df              BHI      |L1.30|
00005e  20ff              MOVS     r0,#0xff              ;119
000060  e7d8              B        |L1.20|
;;;121    
                          ENDP


                          AREA ||i.pm_buffer_init||, CODE, READONLY, ALIGN=1

                  pm_buffer_init PROC
;;;55     
;;;56     ret_code_t pm_buffer_init(pm_buffer_t * p_buffer,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;57                               uint8_t     * p_buffer_memory,
;;;58                               uint32_t      buffer_memory_size,
;;;59                               uint8_t     * p_mutex_memory,
;;;60                               uint32_t      mutex_memory_size,
;;;61                               uint32_t      n_blocks,
;;;62                               uint32_t      block_size)
;;;63     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  e9dda508          LDRD     r10,r5,[sp,#0x20]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;64         if (   (p_buffer           != NULL)
000014  b1cc              CBZ      r4,|L2.74|
;;;65             && (p_buffer_memory    != NULL)
000016  b1c6              CBZ      r6,|L2.74|
;;;66             && (p_mutex_memory     != NULL)
000018  b1bf              CBZ      r7,|L2.74|
;;;67             && (buffer_memory_size >= (n_blocks * block_size))
00001a  fb05f008          MUL      r0,r5,r8
00001e  4548              CMP      r0,r9
000020  d813              BHI      |L2.74|
;;;68             && (mutex_memory_size  >= MUTEX_STORAGE_SIZE(n_blocks))
000022  1de8              ADDS     r0,r5,#7
000024  ebba0fd0          CMP      r10,r0,LSR #3
000028  d30f              BCC      |L2.74|
;;;69             && (n_blocks           != 0)
00002a  b175              CBZ      r5,|L2.74|
;;;70             && (block_size         != 0))
00002c  f1b80f00          CMP      r8,#0
000030  d00b              BEQ      |L2.74|
;;;71         {
;;;72             p_buffer->p_memory   = p_buffer_memory;
000032  6026              STR      r6,[r4,#0]
;;;73             p_buffer->p_mutex    = p_mutex_memory;
000034  6067              STR      r7,[r4,#4]
;;;74             p_buffer->n_blocks   = n_blocks;
000036  60a5              STR      r5,[r4,#8]
;;;75             p_buffer->block_size = block_size;
000038  f8c4800c          STR      r8,[r4,#0xc]
;;;76             pm_mutex_init(p_buffer->p_mutex, n_blocks);
00003c  b2a9              UXTH     r1,r5
00003e  6860              LDR      r0,[r4,#4]
000040  f7fffffe          BL       pm_mutex_init
;;;77     
;;;78             return NRF_SUCCESS;
000044  2000              MOVS     r0,#0
                  |L2.70|
;;;79         }
;;;80         else
;;;81         {
;;;82             return NRF_ERROR_INVALID_PARAM;
;;;83         }
;;;84     }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L2.74|
00004a  2007              MOVS     r0,#7                 ;82
00004c  e7fb              B        |L2.70|
;;;85     
                          ENDP


                          AREA ||i.pm_buffer_ptr_get||, CODE, READONLY, ALIGN=1

                  pm_buffer_ptr_get PROC
;;;122    
;;;123    uint8_t * pm_buffer_ptr_get(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;125        if (!BUFFER_IS_VALID(p_buffer))
000006  b11c              CBZ      r4,|L3.16|
000008  6820              LDR      r0,[r4,#0]
00000a  b108              CBZ      r0,|L3.16|
00000c  6860              LDR      r0,[r4,#4]
00000e  b908              CBNZ     r0,|L3.20|
                  |L3.16|
;;;126        {
;;;127            return ( NULL );
000010  2000              MOVS     r0,#0
                  |L3.18|
;;;128        }
;;;129    
;;;130        if ( (id != PM_BUFFER_INVALID_ID)
;;;131        &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id) )
;;;132        {
;;;133            return ( &p_buffer->p_memory[id * p_buffer->block_size] );
;;;134        }
;;;135        else
;;;136        {
;;;137            return ( NULL );
;;;138        }
;;;139    }
000012  bd70              POP      {r4-r6,pc}
                  |L3.20|
000014  2dff              CMP      r5,#0xff              ;130
000016  d009              BEQ      |L3.44|
000018  4629              MOV      r1,r5                 ;131
00001a  6860              LDR      r0,[r4,#4]            ;131
00001c  f7fffffe          BL       pm_mutex_lock_status_get
000020  b120              CBZ      r0,|L3.44|
000022  68e1              LDR      r1,[r4,#0xc]          ;133
000024  6820              LDR      r0,[r4,#0]            ;133
000026  fb050001          MLA      r0,r5,r1,r0           ;133
00002a  e7f2              B        |L3.18|
                  |L3.44|
00002c  2000              MOVS     r0,#0                 ;137
00002e  e7f0              B        |L3.18|
;;;140    
                          ENDP


                          AREA ||i.pm_buffer_release||, CODE, READONLY, ALIGN=1

                  pm_buffer_release PROC
;;;141    
;;;142    void pm_buffer_release(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;144        if (    BUFFER_IS_VALID(p_buffer)
000006  b174              CBZ      r4,|L4.38|
000008  6820              LDR      r0,[r4,#0]
00000a  b160              CBZ      r0,|L4.38|
00000c  6860              LDR      r0,[r4,#4]
00000e  b150              CBZ      r0,|L4.38|
;;;145           &&  (id != PM_BUFFER_INVALID_ID)
000010  2dff              CMP      r5,#0xff
000012  d008              BEQ      |L4.38|
;;;146           &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id))
000014  4629              MOV      r1,r5
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       pm_mutex_lock_status_get
00001c  b118              CBZ      r0,|L4.38|
;;;147        {
;;;148            pm_mutex_unlock(p_buffer->p_mutex, id);
00001e  4629              MOV      r1,r5
000020  6860              LDR      r0,[r4,#4]
000022  f7fffffe          BL       pm_mutex_unlock
                  |L4.38|
;;;149        }
;;;150    }
000026  bd70              POP      {r4-r6,pc}
;;;151    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\pm_buffer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_pm_buffer_c_dfd62912____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_pm_buffer_c_dfd62912____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_pm_buffer_c_dfd62912____REVSH|
#line 402
|__asm___11_pm_buffer_c_dfd62912____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_pm_buffer_c_dfd62912____RRX|
#line 587
|__asm___11_pm_buffer_c_dfd62912____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
