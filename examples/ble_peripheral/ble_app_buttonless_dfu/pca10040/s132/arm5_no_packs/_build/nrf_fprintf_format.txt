; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --reduce_paths -o.\_build\nrf_fprintf_format.o --asm_dir=.\_build\ --list_dir=.\_build\ --depend=.\_build\nrf_fprintf_format.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_gatt -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\libraries\atomic -I..\..\..\..\..\..\components\libraries\balloc -I..\..\..\..\..\..\components\libraries\bootloader\dfu -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\experimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I..\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\strerror -I..\..\..\..\..\..\components\libraries\svc -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\components\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s132\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\libraries\fifo -I.\RTE\_nrf52832_xxaa -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.14.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DNRF52 -DBL_SETTINGS_ACCESS_ONLY -DBOARD_PCA10040 -DCONFIG_GPIO_AS_PINRESET -DNRF52 -DNRF52832_XXAA -DNRF52_PAN_74 -DNRF_SD_BLE_API_VERSION=5 -DS132 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 -DDEBUG --omf_browse=.\_build\nrf_fprintf_format.crf ..\..\..\..\..\..\external\fprintf\nrf_fprintf_format.c]
                          THUMB

                          AREA ||i.buffer_add||, CODE, READONLY, ALIGN=1

                  buffer_add PROC
;;;71     
;;;72     static void buffer_add(nrf_fprintf_ctx_t * const p_ctx, char c)
000000  b570              PUSH     {r4-r6,lr}
;;;73     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;74         p_ctx->p_io_buffer[p_ctx->io_buffer_cnt++] = c;
000006  68a1              LDR      r1,[r4,#8]
000008  1c48              ADDS     r0,r1,#1
00000a  60a0              STR      r0,[r4,#8]
00000c  6820              LDR      r0,[r4,#0]
00000e  5445              STRB     r5,[r0,r1]
;;;75     
;;;76         if (p_ctx->io_buffer_cnt >= p_ctx->io_buffer_size)
000010  e9d41001          LDRD     r1,r0,[r4,#4]
000014  4288              CMP      r0,r1
000016  d302              BCC      |L1.30|
;;;77         {
;;;78             nrf_fprintf_buffer_flush(p_ctx);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       nrf_fprintf_buffer_flush
                  |L1.30|
;;;79         }
;;;80     }
00001e  bd70              POP      {r4-r6,pc}
;;;81     
                          ENDP


                          AREA ||i.int_print||, CODE, READONLY, ALIGN=1

                  int_print PROC
;;;231    
;;;232    static void int_print(nrf_fprintf_ctx_t * const p_ctx,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;233                          int32_t                   v,
;;;234                          uint32_t                  Base,
;;;235                          uint32_t                  NumDigits,
;;;236                          uint32_t                  FieldWidth,
;;;237                          uint32_t                  FormatFlags)
;;;238    {
000004  4683              MOV      r11,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  e9dd450c          LDRD     r4,r5,[sp,#0x30]
;;;239        uint32_t Width;
;;;240        int32_t Number;
;;;241    
;;;242        Number = (v < 0) ? -v : v;
000010  2e00              CMP      r6,#0
000012  da01              BGE      |L2.24|
000014  4270              RSBS     r0,r6,#0
000016  e000              B        |L2.26|
                  |L2.24|
000018  4630              MOV      r0,r6
                  |L2.26|
00001a  4682              MOV      r10,r0
;;;243    
;;;244        //
;;;245        // Get actual field width
;;;246        //
;;;247        Width = 1u;
00001c  f04f0801          MOV      r8,#1
;;;248        while (Number >= (int32_t)Base)
000020  e003              B        |L2.42|
                  |L2.34|
;;;249        {
;;;250            Number = (Number / (int32_t)Base);
000022  fb9afaf9          SDIV     r10,r10,r9
;;;251            Width++;
000026  f1080801          ADD      r8,r8,#1
                  |L2.42|
00002a  45ca              CMP      r10,r9                ;248
00002c  daf9              BGE      |L2.34|
;;;252        }
;;;253        if (NumDigits > Width)
00002e  4547              CMP      r7,r8
000030  d900              BLS      |L2.52|
;;;254        {
;;;255            Width = NumDigits;
000032  46b8              MOV      r8,r7
                  |L2.52|
;;;256        }
;;;257        if ((FieldWidth > 0u) && ((v < 0) ||
000034  b134              CBZ      r4,|L2.68|
000036  2e00              CMP      r6,#0
000038  db03              BLT      |L2.66|
;;;258            ((FormatFlags & NRF_CLI_FORMAT_FLAG_PRINT_SIGN) == NRF_CLI_FORMAT_FLAG_PRINT_SIGN)))
00003a  f0050004          AND      r0,r5,#4
00003e  2804              CMP      r0,#4
000040  d100              BNE      |L2.68|
                  |L2.66|
;;;259        {
;;;260            FieldWidth--;
000042  1e64              SUBS     r4,r4,#1
                  |L2.68|
;;;261        }
;;;262        //
;;;263        // Print leading spaces if necessary
;;;264        //
;;;265        if ((((FormatFlags & NRF_CLI_FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) &&
000044  f0050002          AND      r0,r5,#2
000048  b100              CBZ      r0,|L2.76|
00004a  b167              CBZ      r7,|L2.102|
                  |L2.76|
;;;266            ((FormatFlags & NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY) == 0u))
00004c  f0050001          AND      r0,r5,#1
000050  b948              CBNZ     r0,|L2.102|
;;;267        {
;;;268            if (FieldWidth != 0u)
000052  b144              CBZ      r4,|L2.102|
;;;269            {
;;;270                while ((FieldWidth != 0u) && (Width < FieldWidth))
000054  e004              B        |L2.96|
                  |L2.86|
;;;271                {
;;;272                    FieldWidth--;
000056  1e64              SUBS     r4,r4,#1
;;;273                    buffer_add(p_ctx, ' ');
000058  2120              MOVS     r1,#0x20
00005a  4658              MOV      r0,r11
00005c  f7fffffe          BL       buffer_add
                  |L2.96|
000060  b10c              CBZ      r4,|L2.102|
000062  45a0              CMP      r8,r4                 ;270
000064  d3f7              BCC      |L2.86|
                  |L2.102|
;;;274                }
;;;275            }
;;;276        }
;;;277        //
;;;278        // Print sign if necessary
;;;279        //
;;;280        if (v < 0)
000066  2e00              CMP      r6,#0
000068  da05              BGE      |L2.118|
;;;281        {
;;;282            v = -v;
00006a  4276              RSBS     r6,r6,#0
;;;283            buffer_add(p_ctx, '-');
00006c  212d              MOVS     r1,#0x2d
00006e  4658              MOV      r0,r11
000070  f7fffffe          BL       buffer_add
000074  e007              B        |L2.134|
                  |L2.118|
;;;284        }
;;;285        else if ((FormatFlags & NRF_CLI_FORMAT_FLAG_PRINT_SIGN) == NRF_CLI_FORMAT_FLAG_PRINT_SIGN)
000076  f0050004          AND      r0,r5,#4
00007a  2804              CMP      r0,#4
00007c  d103              BNE      |L2.134|
;;;286        {
;;;287            buffer_add(p_ctx, '+');
00007e  212b              MOVS     r1,#0x2b
000080  4658              MOV      r0,r11
000082  f7fffffe          BL       buffer_add
                  |L2.134|
;;;288        }
;;;289        else
;;;290        {
;;;291            /* do nothing */
;;;292        }
;;;293        //
;;;294        // Print leading zeros if necessary
;;;295        //
;;;296        if (((FormatFlags & NRF_CLI_FORMAT_FLAG_PAD_ZERO) == NRF_CLI_FORMAT_FLAG_PAD_ZERO) &&
000086  f0050002          AND      r0,r5,#2
00008a  2802              CMP      r0,#2
00008c  d10d              BNE      |L2.170|
;;;297            ((FormatFlags & NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u))
00008e  f0050001          AND      r0,r5,#1
000092  b950              CBNZ     r0,|L2.170|
000094  b94f              CBNZ     r7,|L2.170|
;;;298        {
;;;299            if (FieldWidth != 0u)
000096  b144              CBZ      r4,|L2.170|
;;;300            {
;;;301                while ((FieldWidth != 0u) && (Width < FieldWidth))
000098  e004              B        |L2.164|
                  |L2.154|
;;;302                {
;;;303                    FieldWidth--;
00009a  1e64              SUBS     r4,r4,#1
;;;304                    buffer_add(p_ctx, '0');
00009c  2130              MOVS     r1,#0x30
00009e  4658              MOV      r0,r11
0000a0  f7fffffe          BL       buffer_add
                  |L2.164|
0000a4  b10c              CBZ      r4,|L2.170|
0000a6  45a0              CMP      r8,r4                 ;301
0000a8  d3f7              BCC      |L2.154|
                  |L2.170|
;;;305                }
;;;306            }
;;;307        }
;;;308        //
;;;309        // Print number without sign
;;;310        //
;;;311        unsigned_print(p_ctx, (uint32_t)v, Base, NumDigits, FieldWidth, FormatFlags);
0000aa  463b              MOV      r3,r7
0000ac  464a              MOV      r2,r9
0000ae  4631              MOV      r1,r6
0000b0  4658              MOV      r0,r11
0000b2  e9cd4500          STRD     r4,r5,[sp,#0]
0000b6  f7fffffe          BL       unsigned_print
;;;312    }
0000ba  e8bd9ffc          POP      {r2-r12,pc}
;;;313    
                          ENDP


                          AREA ||i.nrf_fprintf_fmt||, CODE, READONLY, ALIGN=1

                  nrf_fprintf_fmt PROC
;;;313    
;;;314    void nrf_fprintf_fmt(nrf_fprintf_ctx_t * const p_ctx,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;315                        char const *               p_fmt,
;;;316                        va_list *                  p_args)
;;;317    {
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;318        ASSERT(p_ctx != NULL);
;;;319    
;;;320        ASSERT(p_ctx->fwrite != NULL);
;;;321        ASSERT(p_ctx->p_io_buffer != NULL);
;;;322        ASSERT(p_ctx->io_buffer_size > 0);
;;;323    
;;;324        if (p_fmt == NULL)
00000a  b90d              CBNZ     r5,|L3.16|
                  |L3.12|
;;;325        {
;;;326            return;
;;;327        }
;;;328    
;;;329        char c;
;;;330        int32_t v;
;;;331        uint32_t NumDigits;
;;;332        uint32_t FormatFlags;
;;;333        uint32_t FieldWidth;
;;;334    
;;;335        do
;;;336        {
;;;337            c = *p_fmt;
;;;338            p_fmt++;
;;;339    
;;;340            if (c == 0u)
;;;341            {
;;;342                break;
;;;343            }
;;;344            if (c == '%')
;;;345            {
;;;346                //
;;;347                // Filter out flags
;;;348                //
;;;349                FormatFlags = 0u;
;;;350                v = 1;
;;;351    
;;;352                do
;;;353                {
;;;354                    c = *p_fmt;
;;;355                    switch (c)
;;;356                    {
;;;357                        case '-':
;;;358                            FormatFlags |= NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY;
;;;359                            p_fmt++;
;;;360                            break;
;;;361                        case '0':
;;;362                            FormatFlags |= NRF_CLI_FORMAT_FLAG_PAD_ZERO;
;;;363                            p_fmt++;
;;;364                            break;
;;;365                        case '+':
;;;366                            FormatFlags |= NRF_CLI_FORMAT_FLAG_PRINT_SIGN;
;;;367                            p_fmt++;
;;;368                            break;
;;;369                        default:
;;;370                            v = 0;
;;;371                            break;
;;;372                    }
;;;373                } while (v);
;;;374    
;;;375                //
;;;376                // filter out field width
;;;377                //
;;;378                FieldWidth = 0u;
;;;379                do
;;;380                {
;;;381                    if (c == '*')
;;;382                    {
;;;383                        /*lint -save -e64 -e56*/
;;;384                        FieldWidth += va_arg(*p_args, unsigned);
;;;385                        /*lint -restore*/
;;;386                        p_fmt++;
;;;387                        break;
;;;388                    }
;;;389                    c = *p_fmt;
;;;390                    if ((c < '0') || (c > '9'))
;;;391                    {
;;;392                        break;
;;;393                    }
;;;394                    p_fmt++;
;;;395                    FieldWidth = (FieldWidth * 10u) + (c - '0');
;;;396                } while (1);
;;;397    
;;;398                //
;;;399                // Filter out precision (number of digits to display)
;;;400                //
;;;401                NumDigits = 0u;
;;;402                c = *p_fmt;
;;;403                if (c == '.')
;;;404                {
;;;405                    p_fmt++;
;;;406                    do
;;;407                    {
;;;408                        c = *p_fmt;
;;;409                        if ((c < '0') || (c > '9'))
;;;410                        {
;;;411                            break;
;;;412                        }
;;;413                        p_fmt++;
;;;414                        NumDigits = NumDigits * 10u + (c - '0');
;;;415                    } while (1);
;;;416                }
;;;417                //
;;;418                // Filter out length modifier
;;;419                //
;;;420                c = *p_fmt;
;;;421                do
;;;422                {
;;;423                    if ((c == 'l') || (c == 'h'))
;;;424                    {
;;;425                        p_fmt++;
;;;426                        c = *p_fmt;
;;;427                    }
;;;428                    else
;;;429                    {
;;;430                        break;
;;;431                    }
;;;432                } while (1);
;;;433                //
;;;434                // Handle specifiers
;;;435                //
;;;436                /*lint -save -e64*/
;;;437                switch (c)
;;;438                {
;;;439                    case 'c':
;;;440                    {
;;;441                        char c0;
;;;442                        v = va_arg(*p_args, int32_t);
;;;443                        c0 = (char)v;
;;;444                        buffer_add(p_ctx, c0);
;;;445                        break;
;;;446                    }
;;;447                    case 'd':
;;;448                    case 'i':
;;;449                        v = va_arg(*p_args, int32_t);
;;;450                        int_print(p_ctx,
;;;451                                  v,
;;;452                                  10u,
;;;453                                  NumDigits,
;;;454                                  FieldWidth,
;;;455                                  FormatFlags);
;;;456                        break;
;;;457                    case 'u':
;;;458                        v = va_arg(*p_args, int32_t);
;;;459                        unsigned_print(p_ctx,
;;;460                                       (uint32_t)v,
;;;461                                       10u,
;;;462                                       NumDigits,
;;;463                                       FieldWidth,
;;;464                                       FormatFlags);
;;;465                        break;
;;;466                    case 'x':
;;;467                    case 'X':
;;;468                        v = va_arg(*p_args, int32_t);
;;;469                        unsigned_print(p_ctx,
;;;470                                       (uint32_t)v,
;;;471                                       16u,
;;;472                                       NumDigits,
;;;473                                       FieldWidth,
;;;474                                       FormatFlags);
;;;475                        break;
;;;476                    case 's':
;;;477                    {
;;;478                        char const * p_s = va_arg(*p_args, const char *);
;;;479                        string_print(p_ctx, p_s, FieldWidth, FormatFlags);
;;;480                        break;
;;;481                    }
;;;482                    case 'p':
;;;483                        v = va_arg(*p_args, int32_t);
;;;484                        buffer_add(p_ctx, '0');
;;;485                        buffer_add(p_ctx, 'x');
;;;486                        unsigned_print(p_ctx, (uint32_t)v, 16u, 8u, 8u, 0);
;;;487                        break;
;;;488                    case '%':
;;;489                        buffer_add(p_ctx, '%');
;;;490                        break;
;;;491                    default:
;;;492                        break;
;;;493                }
;;;494                /*lint -restore*/
;;;495                p_fmt++;
;;;496            }
;;;497            else
;;;498            {
;;;499                buffer_add(p_ctx, c);
;;;500            }
;;;501        } while (*p_fmt != '\0');
;;;502    
;;;503        if (p_ctx->auto_flush)
;;;504        {
;;;505            nrf_fprintf_buffer_flush(p_ctx);
;;;506        }
;;;507    }
00000c  e8bd9ffc          POP      {r2-r12,pc}
                  |L3.16|
000010  bf00              NOP                            ;335
                  |L3.18|
000012  782e              LDRB     r6,[r5,#0]            ;337
000014  1c6d              ADDS     r5,r5,#1              ;338
000016  b906              CBNZ     r6,|L3.26|
000018  e0e1              B        |L3.478|
                  |L3.26|
00001a  2e25              CMP      r6,#0x25              ;344
00001c  d170              BNE      |L3.256|
00001e  2700              MOVS     r7,#0                 ;349
000020  f04f0901          MOV      r9,#1                 ;350
000024  bf00              NOP                            ;352
                  |L3.38|
000026  782e              LDRB     r6,[r5,#0]            ;354
000028  2e2b              CMP      r6,#0x2b              ;355
00002a  d00c              BEQ      |L3.70|
00002c  2e2d              CMP      r6,#0x2d              ;355
00002e  d002              BEQ      |L3.54|
000030  2e30              CMP      r6,#0x30              ;355
000032  d10c              BNE      |L3.78|
000034  e003              B        |L3.62|
                  |L3.54|
000036  f0470701          ORR      r7,r7,#1              ;358
00003a  1c6d              ADDS     r5,r5,#1              ;359
00003c  e00a              B        |L3.84|
                  |L3.62|
00003e  f0470702          ORR      r7,r7,#2              ;362
000042  1c6d              ADDS     r5,r5,#1              ;363
000044  e006              B        |L3.84|
                  |L3.70|
000046  f0470704          ORR      r7,r7,#4              ;366
00004a  1c6d              ADDS     r5,r5,#1              ;367
00004c  e002              B        |L3.84|
                  |L3.78|
00004e  f04f0900          MOV      r9,#0                 ;370
000052  bf00              NOP                            ;371
                  |L3.84|
000054  bf00              NOP                            ;360
000056  f1b90f00          CMP      r9,#0                 ;373
00005a  d1e4              BNE      |L3.38|
00005c  f04f0800          MOV      r8,#0                 ;378
000060  bf00              NOP                            ;379
                  |L3.98|
000062  2e2a              CMP      r6,#0x2a              ;381
000064  d106              BNE      |L3.116|
000066  6821              LDR      r1,[r4,#0]            ;384
000068  1d08              ADDS     r0,r1,#4              ;384
00006a  6020              STR      r0,[r4,#0]            ;384
00006c  6808              LDR      r0,[r1,#0]            ;384
00006e  4480              ADD      r8,r8,r0              ;384
000070  1c6d              ADDS     r5,r5,#1              ;386
000072  e00d              B        |L3.144|
                  |L3.116|
000074  782e              LDRB     r6,[r5,#0]            ;389
000076  2e30              CMP      r6,#0x30              ;390
000078  db01              BLT      |L3.126|
00007a  2e39              CMP      r6,#0x39              ;390
00007c  dd00              BLE      |L3.128|
                  |L3.126|
00007e  e007              B        |L3.144|
                  |L3.128|
000080  1c6d              ADDS     r5,r5,#1              ;394
000082  f1a60030          SUB      r0,r6,#0x30           ;395
000086  eb080188          ADD      r1,r8,r8,LSL #2       ;395
00008a  eb000841          ADD      r8,r0,r1,LSL #1       ;395
00008e  e7e8              B        |L3.98|
                  |L3.144|
000090  bf00              NOP                            ;387
000092  f04f0b00          MOV      r11,#0                ;401
000096  782e              LDRB     r6,[r5,#0]            ;402
000098  2e2e              CMP      r6,#0x2e              ;403
00009a  d110              BNE      |L3.190|
00009c  1c6d              ADDS     r5,r5,#1              ;405
00009e  bf00              NOP                            ;406
                  |L3.160|
0000a0  782e              LDRB     r6,[r5,#0]            ;408
0000a2  2e30              CMP      r6,#0x30              ;409
0000a4  db01              BLT      |L3.170|
0000a6  2e39              CMP      r6,#0x39              ;409
0000a8  dd00              BLE      |L3.172|
                  |L3.170|
0000aa  e007              B        |L3.188|
                  |L3.172|
0000ac  1c6d              ADDS     r5,r5,#1              ;413
0000ae  f1a60030          SUB      r0,r6,#0x30           ;414
0000b2  eb0b018b          ADD      r1,r11,r11,LSL #2     ;414
0000b6  eb000b41          ADD      r11,r0,r1,LSL #1      ;414
0000ba  e7f1              B        |L3.160|
                  |L3.188|
0000bc  bf00              NOP                            ;411
                  |L3.190|
0000be  782e              LDRB     r6,[r5,#0]            ;420
0000c0  bf00              NOP                            ;421
                  |L3.194|
0000c2  2e6c              CMP      r6,#0x6c              ;423
0000c4  d001              BEQ      |L3.202|
0000c6  2e68              CMP      r6,#0x68              ;423
0000c8  d102              BNE      |L3.208|
                  |L3.202|
0000ca  1c6d              ADDS     r5,r5,#1              ;425
0000cc  782e              LDRB     r6,[r5,#0]            ;426
0000ce  e000              B        |L3.210|
                  |L3.208|
0000d0  e000              B        |L3.212|
                  |L3.210|
0000d2  e7f6              B        |L3.194|
                  |L3.212|
0000d4  bf00              NOP                            ;430
0000d6  2e69              CMP      r6,#0x69              ;437
0000d8  d021              BEQ      |L3.286|
0000da  dc08              BGT      |L3.238|
0000dc  2e25              CMP      r6,#0x25              ;437
0000de  d06d              BEQ      |L3.444|
0000e0  2e58              CMP      r6,#0x58              ;437
0000e2  d039              BEQ      |L3.344|
0000e4  2e63              CMP      r6,#0x63              ;437
0000e6  d00c              BEQ      |L3.258|
0000e8  2e64              CMP      r6,#0x64              ;437
0000ea  d16c              BNE      |L3.454|
0000ec  e016              B        |L3.284|
                  |L3.238|
0000ee  2e70              CMP      r6,#0x70              ;437
0000f0  d04c              BEQ      |L3.396|
0000f2  2e73              CMP      r6,#0x73              ;437
0000f4  d03e              BEQ      |L3.372|
0000f6  2e75              CMP      r6,#0x75              ;437
0000f8  d01f              BEQ      |L3.314|
0000fa  2e78              CMP      r6,#0x78              ;437
0000fc  d163              BNE      |L3.454|
0000fe  e02a              B        |L3.342|
                  |L3.256|
000100  e065              B        |L3.462|
                  |L3.258|
000102  6821              LDR      r1,[r4,#0]            ;442
000104  1d08              ADDS     r0,r1,#4              ;442
000106  6020              STR      r0,[r4,#0]            ;442
000108  f8d19000          LDR      r9,[r1,#0]            ;442
00010c  f00900ff          AND      r0,r9,#0xff           ;443
000110  9001              STR      r0,[sp,#4]            ;443
000112  4650              MOV      r0,r10                ;444
000114  9901              LDR      r1,[sp,#4]            ;444
000116  f7fffffe          BL       buffer_add
00011a  e055              B        |L3.456|
                  |L3.284|
00011c  bf00              NOP                            ;448
                  |L3.286|
00011e  6821              LDR      r1,[r4,#0]            ;449
000120  1d08              ADDS     r0,r1,#4              ;449
000122  6020              STR      r0,[r4,#0]            ;449
000124  f8d19000          LDR      r9,[r1,#0]            ;449
000128  465b              MOV      r3,r11                ;450
00012a  220a              MOVS     r2,#0xa               ;450
00012c  4649              MOV      r1,r9                 ;450
00012e  4650              MOV      r0,r10                ;450
000130  e9cd8700          STRD     r8,r7,[sp,#0]         ;450
000134  f7fffffe          BL       int_print
000138  e046              B        |L3.456|
                  |L3.314|
00013a  6821              LDR      r1,[r4,#0]            ;458
00013c  1d08              ADDS     r0,r1,#4              ;458
00013e  6020              STR      r0,[r4,#0]            ;458
000140  f8d19000          LDR      r9,[r1,#0]            ;458
000144  465b              MOV      r3,r11                ;459
000146  220a              MOVS     r2,#0xa               ;459
000148  4649              MOV      r1,r9                 ;459
00014a  4650              MOV      r0,r10                ;459
00014c  e9cd8700          STRD     r8,r7,[sp,#0]         ;459
000150  f7fffffe          BL       unsigned_print
000154  e038              B        |L3.456|
                  |L3.342|
000156  bf00              NOP                            ;467
                  |L3.344|
000158  6821              LDR      r1,[r4,#0]            ;468
00015a  1d08              ADDS     r0,r1,#4              ;468
00015c  6020              STR      r0,[r4,#0]            ;468
00015e  f8d19000          LDR      r9,[r1,#0]            ;468
000162  465b              MOV      r3,r11                ;469
000164  2210              MOVS     r2,#0x10              ;469
000166  4649              MOV      r1,r9                 ;469
000168  4650              MOV      r0,r10                ;469
00016a  e9cd8700          STRD     r8,r7,[sp,#0]         ;469
00016e  f7fffffe          BL       unsigned_print
000172  e029              B        |L3.456|
                  |L3.372|
000174  6821              LDR      r1,[r4,#0]            ;478
000176  1d08              ADDS     r0,r1,#4              ;478
000178  6020              STR      r0,[r4,#0]            ;478
00017a  6808              LDR      r0,[r1,#0]            ;478
00017c  9001              STR      r0,[sp,#4]            ;478
00017e  463b              MOV      r3,r7                 ;479
000180  4642              MOV      r2,r8                 ;479
000182  4650              MOV      r0,r10                ;479
000184  9901              LDR      r1,[sp,#4]            ;479
000186  f7fffffe          BL       string_print
00018a  e01d              B        |L3.456|
                  |L3.396|
00018c  6821              LDR      r1,[r4,#0]            ;483
00018e  1d08              ADDS     r0,r1,#4              ;483
000190  6020              STR      r0,[r4,#0]            ;483
000192  f8d19000          LDR      r9,[r1,#0]            ;483
000196  2130              MOVS     r1,#0x30              ;484
000198  4650              MOV      r0,r10                ;484
00019a  f7fffffe          BL       buffer_add
00019e  2178              MOVS     r1,#0x78              ;485
0001a0  4650              MOV      r0,r10                ;485
0001a2  f7fffffe          BL       buffer_add
0001a6  2000              MOVS     r0,#0                 ;486
0001a8  2108              MOVS     r1,#8                 ;486
0001aa  460b              MOV      r3,r1                 ;486
0001ac  2210              MOVS     r2,#0x10              ;486
0001ae  e9cd1000          STRD     r1,r0,[sp,#0]         ;486
0001b2  4649              MOV      r1,r9                 ;486
0001b4  4650              MOV      r0,r10                ;486
0001b6  f7fffffe          BL       unsigned_print
0001ba  e005              B        |L3.456|
                  |L3.444|
0001bc  2125              MOVS     r1,#0x25              ;489
0001be  4650              MOV      r0,r10                ;489
0001c0  f7fffffe          BL       buffer_add
0001c4  e000              B        |L3.456|
                  |L3.454|
0001c6  bf00              NOP                            ;492
                  |L3.456|
0001c8  bf00              NOP                            ;445
0001ca  1c6d              ADDS     r5,r5,#1              ;495
0001cc  e003              B        |L3.470|
                  |L3.462|
0001ce  4631              MOV      r1,r6                 ;499
0001d0  4650              MOV      r0,r10                ;499
0001d2  f7fffffe          BL       buffer_add
                  |L3.470|
0001d6  7828              LDRB     r0,[r5,#0]            ;501
0001d8  2800              CMP      r0,#0                 ;501
0001da  f47faf1a          BNE      |L3.18|
                  |L3.478|
0001de  bf00              NOP                            ;342
0001e0  f89a000c          LDRB     r0,[r10,#0xc]         ;503
0001e4  b110              CBZ      r0,|L3.492|
0001e6  4650              MOV      r0,r10                ;505
0001e8  f7fffffe          BL       nrf_fprintf_buffer_flush
                  |L3.492|
0001ec  bf00              NOP      
0001ee  e70d              B        |L3.12|
;;;508    
                          ENDP


                          AREA ||i.string_print||, CODE, READONLY, ALIGN=1

                  string_print PROC
;;;81     
;;;82     static void string_print(nrf_fprintf_ctx_t * const p_ctx,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;83                              char const *              p_str,
;;;84                              uint32_t                  FieldWidth,
;;;85                              uint32_t                  FormatFlags)
;;;86     {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;87         uint32_t Width = 0;
00000c  2600              MOVS     r6,#0
;;;88         char c;
;;;89     
;;;90         if ((FormatFlags & NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY) == NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY)
00000e  f0080001          AND      r0,r8,#1
000012  b1a0              CBZ      r0,|L4.62|
;;;91         {
;;;92             while ((c = *p_str) != '\0')
000014  e005              B        |L4.34|
                  |L4.22|
;;;93             {
;;;94                 p_str++;
000016  1c64              ADDS     r4,r4,#1
;;;95                 Width++;
000018  1c76              ADDS     r6,r6,#1
;;;96                 buffer_add(p_ctx, c);
00001a  4639              MOV      r1,r7
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       buffer_add
                  |L4.34|
000022  7827              LDRB     r7,[r4,#0]            ;92
000024  2f00              CMP      r7,#0                 ;92
000026  d1f6              BNE      |L4.22|
;;;97             }
;;;98     
;;;99             while ((FieldWidth > Width) && (FieldWidth > 0))
000028  e004              B        |L4.52|
                  |L4.42|
;;;100            {
;;;101                FieldWidth--;
00002a  1e6d              SUBS     r5,r5,#1
;;;102                buffer_add(p_ctx, ' ');
00002c  2120              MOVS     r1,#0x20
00002e  4648              MOV      r0,r9
000030  f7fffffe          BL       buffer_add
                  |L4.52|
000034  42b5              CMP      r5,r6                 ;99
000036  d91b              BLS      |L4.112|
000038  2d00              CMP      r5,#0                 ;99
00003a  d1f6              BNE      |L4.42|
00003c  e018              B        |L4.112|
                  |L4.62|
;;;103            }
;;;104        }
;;;105        else
;;;106        {
;;;107            if (p_str != 0)
00003e  b11c              CBZ      r4,|L4.72|
;;;108            {
;;;109                Width = strlen(p_str);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       strlen
000046  4606              MOV      r6,r0
                  |L4.72|
;;;110            }
;;;111    
;;;112            while ((FieldWidth > Width) && (FieldWidth > 0))
000048  e004              B        |L4.84|
                  |L4.74|
;;;113            {
;;;114                FieldWidth--;
00004a  1e6d              SUBS     r5,r5,#1
;;;115                buffer_add(p_ctx, ' ');
00004c  2120              MOVS     r1,#0x20
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       buffer_add
                  |L4.84|
000054  42b5              CMP      r5,r6                 ;112
000056  d901              BLS      |L4.92|
000058  2d00              CMP      r5,#0                 ;112
00005a  d1f6              BNE      |L4.74|
                  |L4.92|
;;;116            }
;;;117    
;;;118            while ((c = *p_str) != '\0')
00005c  e005              B        |L4.106|
                  |L4.94|
;;;119            {
;;;120                p_str++;
00005e  1c64              ADDS     r4,r4,#1
;;;121                Width++;
000060  1c76              ADDS     r6,r6,#1
;;;122                buffer_add(p_ctx, c);
000062  4639              MOV      r1,r7
000064  4648              MOV      r0,r9
000066  f7fffffe          BL       buffer_add
                  |L4.106|
00006a  7827              LDRB     r7,[r4,#0]            ;118
00006c  2f00              CMP      r7,#0                 ;118
00006e  d1f6              BNE      |L4.94|
                  |L4.112|
;;;123            }
;;;124        }
;;;125    }
000070  e8bd87f0          POP      {r4-r10,pc}
;;;126    
                          ENDP


                          AREA ||i.unsigned_print||, CODE, READONLY, ALIGN=2

                  unsigned_print PROC
;;;126    
;;;127    static void unsigned_print(nrf_fprintf_ctx_t * const p_ctx,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;128                               uint32_t                  v,
;;;129                               uint32_t                  Base,
;;;130                               uint32_t                  NumDigits,
;;;131                               uint32_t                  FieldWidth,
;;;132                               uint32_t                  FormatFlags)
;;;133    {
000004  b081              SUB      sp,sp,#4
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd4b0e          LDRD     r4,r11,[sp,#0x38]
;;;134        static const char _aV2C[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
;;;135                                       'A', 'B', 'C', 'D', 'E', 'F' };
;;;136        uint32_t Div;
;;;137        uint32_t Value;
;;;138        uint32_t Width;
;;;139        char c;
;;;140    
;;;141        Value = v;
000010  4645              MOV      r5,r8
;;;142        //
;;;143        // Get actual field width
;;;144        //
;;;145        Width = 1u;
000012  f04f0a01          MOV      r10,#1
;;;146        while (Value >= Base)
000016  e003              B        |L5.32|
                  |L5.24|
;;;147        {
;;;148            Value = (Value / Base);
000018  fbb5f5f6          UDIV     r5,r5,r6
;;;149            Width++;
00001c  f10a0a01          ADD      r10,r10,#1
                  |L5.32|
000020  42b5              CMP      r5,r6                 ;146
000022  d2f9              BCS      |L5.24|
;;;150        }
;;;151        if (NumDigits > Width)
000024  4557              CMP      r7,r10
000026  d900              BLS      |L5.42|
;;;152        {
;;;153            Width = NumDigits;
000028  46ba              MOV      r10,r7
                  |L5.42|
;;;154        }
;;;155        //
;;;156        // Print leading chars if necessary
;;;157        //
;;;158        if ((FormatFlags & NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY) == 0u)
00002a  f00b0001          AND      r0,r11,#1
00002e  b998              CBNZ     r0,|L5.88|
;;;159        {
;;;160            if (FieldWidth != 0u)
000030  b194              CBZ      r4,|L5.88|
;;;161            {
;;;162                if (((FormatFlags & NRF_CLI_FORMAT_FLAG_PAD_ZERO) == NRF_CLI_FORMAT_FLAG_PAD_ZERO) &&
000032  f00b0002          AND      r0,r11,#2
000036  2802              CMP      r0,#2
000038  d103              BNE      |L5.66|
;;;163                    (NumDigits == 0u))
00003a  b917              CBNZ     r7,|L5.66|
;;;164                {
;;;165                    c = '0';
00003c  2030              MOVS     r0,#0x30
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L5.70|
                  |L5.66|
;;;166                }
;;;167                else
;;;168                {
;;;169                    c = ' ';
000042  2020              MOVS     r0,#0x20
000044  9000              STR      r0,[sp,#0]
                  |L5.70|
;;;170                }
;;;171                while ((FieldWidth != 0u) && (Width < FieldWidth))
000046  e004              B        |L5.82|
                  |L5.72|
;;;172                {
;;;173                    FieldWidth--;
000048  1e64              SUBS     r4,r4,#1
;;;174                    buffer_add(p_ctx, c);
00004a  e9dd1000          LDRD     r1,r0,[sp,#0]
00004e  f7fffffe          BL       buffer_add
                  |L5.82|
000052  b10c              CBZ      r4,|L5.88|
000054  45a2              CMP      r10,r4                ;171
000056  d3f7              BCC      |L5.72|
                  |L5.88|
;;;175                }
;;;176            }
;;;177        }
;;;178    
;;;179        Value = 1;
000058  2501              MOVS     r5,#1
;;;180        /*
;;;181         * Compute Digit.
;;;182         * Loop until Digit has the value of the highest digit required.
;;;183         * Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
;;;184         */
;;;185        while (1)
00005a  e009              B        |L5.112|
                  |L5.92|
;;;186        {
;;;187            /* User specified a min number of digits to print? => Make sure we loop at least that
;;;188             * often, before checking anything else (> 1 check avoids problems with NumDigits
;;;189             * being signed / unsigned)
;;;190             */
;;;191            if (NumDigits > 1u)
00005c  2f01              CMP      r7,#1
00005e  d901              BLS      |L5.100|
;;;192            {
;;;193                NumDigits--;
000060  1e7f              SUBS     r7,r7,#1
000062  e004              B        |L5.110|
                  |L5.100|
;;;194            }
;;;195            else
;;;196            {
;;;197                Div = v / Value;
000064  fbb8f9f5          UDIV     r9,r8,r5
;;;198                // Is our divider big enough to extract the highest digit from value? => Done
;;;199                if (Div < Base)
000068  45b1              CMP      r9,r6
00006a  d200              BCS      |L5.110|
;;;200                {
;;;201                    break;
00006c  e001              B        |L5.114|
                  |L5.110|
;;;202                }
;;;203            }
;;;204            Value *= Base;
00006e  4375              MULS     r5,r6,r5
                  |L5.112|
000070  e7f4              B        |L5.92|
                  |L5.114|
000072  bf00              NOP                            ;201
;;;205        }
;;;206        //
;;;207        // Output digits
;;;208        //
;;;209        do
000074  bf00              NOP      
                  |L5.118|
;;;210        {
;;;211            Div = v / Value;
000076  fbb8f9f5          UDIV     r9,r8,r5
;;;212            v -= Div * Value;
00007a  fb098815          MLS      r8,r9,r5,r8
;;;213            buffer_add(p_ctx, _aV2C[Div]);
00007e  480d              LDR      r0,|L5.180|
000080  f8101009          LDRB     r1,[r0,r9]
000084  9801              LDR      r0,[sp,#4]
000086  f7fffffe          BL       buffer_add
;;;214            Value /= Base;
00008a  fbb5f5f6          UDIV     r5,r5,r6
;;;215        } while (Value);
00008e  2d00              CMP      r5,#0
000090  d1f1              BNE      |L5.118|
;;;216        //
;;;217        // Print trailing spaces if necessary
;;;218        //
;;;219        if ((FormatFlags & NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY) == NRF_CLI_FORMAT_FLAG_LEFT_JUSTIFY)
000092  f00b0001          AND      r0,r11,#1
000096  b148              CBZ      r0,|L5.172|
;;;220        {
;;;221            if (FieldWidth != 0u)
000098  b144              CBZ      r4,|L5.172|
;;;222            {
;;;223                while ((FieldWidth != 0u) && (Width < FieldWidth))
00009a  e004              B        |L5.166|
                  |L5.156|
;;;224                {
;;;225                    FieldWidth--;
00009c  1e64              SUBS     r4,r4,#1
;;;226                    buffer_add(p_ctx, ' ');
00009e  2120              MOVS     r1,#0x20
0000a0  9801              LDR      r0,[sp,#4]
0000a2  f7fffffe          BL       buffer_add
                  |L5.166|
0000a6  b10c              CBZ      r4,|L5.172|
0000a8  45a2              CMP      r10,r4                ;223
0000aa  d3f7              BCC      |L5.156|
                  |L5.172|
;;;227                }
;;;228            }
;;;229        }
;;;230    }
0000ac  b005              ADD      sp,sp,#0x14
0000ae  e8bd8ff0          POP      {r4-r11,pc}
;;;231    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L5.180|
                          DCD      _aV2C

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _aV2C
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\external\\fprintf\\nrf_fprintf_format.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_nrf_fprintf_format_c_c9f8926c____REV16|
#line 388 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_nrf_fprintf_format_c_c9f8926c____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_nrf_fprintf_format_c_c9f8926c____REVSH|
#line 402
|__asm___20_nrf_fprintf_format_c_c9f8926c____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_nrf_fprintf_format_c_c9f8926c____RRX|
#line 587
|__asm___20_nrf_fprintf_format_c_c9f8926c____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
